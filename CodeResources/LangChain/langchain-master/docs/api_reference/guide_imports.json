{"SingleFileFacebookMessengerChatLoader": {"Facebook Messenger": "https://python.langchain.com/docs/integrations/chat_loaders/facebook"}, "FolderFacebookMessengerChatLoader": {"Facebook Messenger": "https://python.langchain.com/docs/integrations/chat_loaders/facebook", "Chat loaders": "https://python.langchain.com/docs/integrations/chat_loaders/index"}, "merge_chat_runs": {"Facebook Messenger": "https://python.langchain.com/docs/integrations/chat_loaders/facebook", "Slack": "https://python.langchain.com/docs/integrations/chat_loaders/slack", "WhatsApp": "https://python.langchain.com/docs/integrations/chat_loaders/whatsapp", "iMessage": "https://python.langchain.com/docs/integrations/chat_loaders/imessage", "Telegram": "https://python.langchain.com/docs/integrations/chat_loaders/telegram", "Discord": "https://python.langchain.com/docs/integrations/chat_loaders/discord"}, "map_ai_messages": {"Facebook Messenger": "https://python.langchain.com/docs/integrations/chat_loaders/facebook", "GMail": "https://python.langchain.com/docs/integrations/chat_loaders/gmail", "Slack": "https://python.langchain.com/docs/integrations/chat_loaders/slack", "WhatsApp": "https://python.langchain.com/docs/integrations/chat_loaders/whatsapp", "iMessage": "https://python.langchain.com/docs/integrations/chat_loaders/imessage", "Telegram": "https://python.langchain.com/docs/integrations/chat_loaders/telegram", "Discord": "https://python.langchain.com/docs/integrations/chat_loaders/discord"}, "convert_messages_for_finetuning": {"Facebook Messenger": "https://python.langchain.com/docs/integrations/chat_loaders/facebook", "Chat loaders": "https://python.langchain.com/docs/integrations/chat_loaders/index", "iMessage": "https://python.langchain.com/docs/integrations/chat_loaders/imessage"}, "ChatOpenAI": {"Facebook Messenger": "https://python.langchain.com/docs/integrations/chat_loaders/facebook", "Slack": "https://python.langchain.com/docs/integrations/chat_loaders/slack", "WhatsApp": "https://python.langchain.com/docs/integrations/chat_loaders/whatsapp", "iMessage": "https://python.langchain.com/docs/integrations/chat_loaders/imessage", "Telegram": "https://python.langchain.com/docs/integrations/chat_loaders/telegram", "Discord": "https://python.langchain.com/docs/integrations/chat_loaders/discord", "RePhraseQueryRetriever": "https://python.langchain.com/docs/integrations/retrievers/re_phrase", "Wikipedia": "https://python.langchain.com/docs/integrations/retrievers/wikipedia", "Arxiv": "https://python.langchain.com/docs/integrations/retrievers/arxiv", "ChatGPT Plugins": "https://python.langchain.com/docs/integrations/tools/chatgpt_plugins", "Human as a tool": "https://python.langchain.com/docs/integrations/tools/human_tools", "Yahoo Finance News": "https://python.langchain.com/docs/integrations/tools/yahoo_finance_news", "ArXiv": "https://python.langchain.com/docs/integrations/tools/arxiv", "Metaphor Search": "https://python.langchain.com/docs/integrations/tools/metaphor_search", "Shell (bash)": "https://python.langchain.com/docs/integrations/tools/bash", "Xata chat memory": "https://python.langchain.com/docs/integrations/memory/xata_chat_message_history", "Dynamodb Chat Message History": "https://python.langchain.com/docs/integrations/memory/dynamodb_chat_message_history", "OpenAI": "https://python.langchain.com/docs/integrations/chat/openai", "LLMonitor": "https://python.langchain.com/docs/integrations/callbacks/llmonitor", "Context": "https://python.langchain.com/docs/integrations/callbacks/context", "Label Studio": "https://python.langchain.com/docs/integrations/callbacks/labelstudio", "PromptLayer": "https://python.langchain.com/docs/integrations/callbacks/promptlayer", "CnosDB": "https://python.langchain.com/docs/integrations/providers/cnosdb", "Log10": "https://python.langchain.com/docs/integrations/providers/log10", "Flyte": "https://python.langchain.com/docs/integrations/providers/flyte", "Arthur": "https://python.langchain.com/docs/integrations/providers/arthur_tracking", "CSV": "https://python.langchain.com/docs/integrations/toolkits/csv", "Document Comparison": "https://python.langchain.com/docs/integrations/toolkits/document_comparison_toolkit", "Python": "https://python.langchain.com/docs/integrations/toolkits/python", "PowerBI Dataset": "https://python.langchain.com/docs/integrations/toolkits/powerbi", "SQL Database": "https://python.langchain.com/docs/integrations/toolkits/sql_database", "Airbyte Question Answering": "https://python.langchain.com/docs/integrations/toolkits/airbyte_structured_qa", "Github": "https://python.langchain.com/docs/integrations/toolkits/github", "Spark SQL": "https://python.langchain.com/docs/integrations/toolkits/spark_sql", "AINetwork": "https://python.langchain.com/docs/integrations/toolkits/ainetwork", "Pandas Dataframe": "https://python.langchain.com/docs/integrations/toolkits/pandas", "Neo4j Vector Index": "https://python.langchain.com/docs/integrations/vectorstores/neo4jvector", "OpenAI Functions Metadata Tagger": "https://python.langchain.com/docs/integrations/document_transformers/openai_metadata_tagger", "Loading documents from a YouTube url": "https://python.langchain.com/docs/integrations/document_loaders/youtube_audio", "Figma": "https://python.langchain.com/docs/integrations/document_loaders/figma", "Fallbacks": "https://python.langchain.com/docs/guides/fallbacks", "Debugging": "https://python.langchain.com/docs/guides/debugging", "LangSmith Walkthrough": "https://python.langchain.com/docs/guides/langsmith/walkthrough", "Reversible data anonymization with Microsoft Presidio": "https://python.langchain.com/docs/guides/privacy/presidio_data_anonymization/reversible", "Data anonymization with Microsoft Presidio": "https://python.langchain.com/docs/guides/privacy/presidio_data_anonymization/index", "Comparing Chain Outputs": "https://python.langchain.com/docs/guides/evaluation/examples/comparisons", "Agent Trajectory": "https://python.langchain.com/docs/guides/evaluation/trajectory/trajectory_eval", "Custom Trajectory Evaluator": "https://python.langchain.com/docs/guides/evaluation/trajectory/custom", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/tagging", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/qa_structured/sql", "Question Answering": "https://python.langchain.com/docs/use_cases/question_answering/question_answering", "Perform context-aware text splitting": "https://python.langchain.com/docs/use_cases/question_answering/how_to/document-context-aware-QA", "Conversational Retrieval Agent": "https://python.langchain.com/docs/use_cases/question_answering/how_to/conversational_retrieval_agents", "Multiple Retrieval Sources": "https://python.langchain.com/docs/use_cases/question_answering/how_to/multiple_retrieval", "Cite sources": "https://python.langchain.com/docs/use_cases/question_answering/how_to/qa_citations", "Retrieve as you generate with FLARE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/flare", "Analysis of Twitter the-algorithm source code with LangChain, GPT4 and Activeloop's Deep Lake": "https://python.langchain.com/docs/use_cases/question_answering/how_to/code/twitter-the-algorithm-analysis-deeplake", "Use LangChain, GPT and Activeloop's Deep Lake to work with code base": "https://python.langchain.com/docs/use_cases/question_answering/how_to/code/code-analysis-deeplake", "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa", "QA using Activeloop's DeepLake": "https://python.langchain.com/docs/use_cases/question_answering/integrations/semantic-search-over-chat", "Neptune Open Cypher QA Chain": "https://python.langchain.com/docs/use_cases/more/graph/neptune_cypher_qa", "NebulaGraphQAChain": "https://python.langchain.com/docs/use_cases/more/graph/graph_nebula_qa", "Memgraph QA chain": "https://python.langchain.com/docs/use_cases/more/graph/graph_memgraph_qa", "KuzuQAChain": "https://python.langchain.com/docs/use_cases/more/graph/graph_kuzu_qa", "HugeGraph QA Chain": "https://python.langchain.com/docs/use_cases/more/graph/graph_hugegraph_qa", "GraphSparqlQAChain": "https://python.langchain.com/docs/use_cases/more/graph/graph_sparql_qa", "Diffbot Graph Transformer": "https://python.langchain.com/docs/use_cases/more/graph/diffbot_graphtransformer", "ArangoDB QA chain": "https://python.langchain.com/docs/use_cases/more/graph/graph_arangodb_qa", "Neo4j DB QA chain": "https://python.langchain.com/docs/use_cases/more/graph/graph_cypher_qa", "FalkorDBQAChain": "https://python.langchain.com/docs/use_cases/more/graph/graph_falkordb_qa", "Agents": "https://python.langchain.com/docs/use_cases/more/agents/agents", "AutoGPT": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/autogpt", "!pip install bs4": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/marathon_times", "Wikibase Agent": "https://python.langchain.com/docs/use_cases/more/agents/agents/wikibase_agent", "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/more/agents/agents/sales_agent_with_context", "CAMEL Role-Playing Autonomous Cooperative Agents": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/camel_role_playing", "Multi-Agent Simulated Environment: Petting Zoo": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/petting_zoo", "Multi-agent decentralized speaker selection": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/multiagent_bidding", "Multi-agent authoritarian speaker selection": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/multiagent_authoritarian", "Generative Agents in LangChain": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/characters", "Two-Player Dungeons & Dragons": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/two_player_dnd", "Multi-Player Dungeons & Dragons": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/multi_player_dnd", "Simulated Environment: Gymnasium": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/gymnasium", "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/two_agent_debate_tools", "How to use a SmartLLMChain": "https://python.langchain.com/docs/use_cases/more/self_check/smart_llm", "Vector SQL Retriever with MyScale": "https://python.langchain.com/docs/use_cases/qa_structured/integrations/myscale_vector_sql", "Elasticsearch": "https://python.langchain.com/docs/use_cases/qa_structured/integrations/elasticsearch", "SQL": "https://python.langchain.com/docs/use_cases/sql/sql", "MultiVector Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/multi_vector", "MultiQueryRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/MultiQueryRetriever", "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research", "Memory in LLMChain": "https://python.langchain.com/docs/modules/memory/adding_memory", "Custom callback handlers": "https://python.langchain.com/docs/modules/callbacks/custom_callbacks", "Async callbacks": "https://python.langchain.com/docs/modules/callbacks/async_callbacks", "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools", "Tools as OpenAI Functions": "https://python.langchain.com/docs/modules/agents/tools/tools_as_openai_functions", "OpenAI Multi Functions Agent": "https://python.langchain.com/docs/modules/agents/agent_types/openai_multi_functions_agent", "Handle parsing errors": "https://python.langchain.com/docs/modules/agents/how_to/handle_parsing_errors", "Running Agent as an Iterator": "https://python.langchain.com/docs/modules/agents/how_to/agent_iter", "Add Memory to OpenAI Functions Agent": "https://python.langchain.com/docs/modules/agents/how_to/add_memory_openai_functions", "Custom functions with OpenAI Functions Agent": "https://python.langchain.com/docs/modules/agents/how_to/custom-functions-with-openai-functions-agent", "Use ToolKits with OpenAI Functions": "https://python.langchain.com/docs/modules/agents/how_to/use_toolkits_with_openai_functions", "Retry parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/retry", "Pydantic (JSON) parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/pydantic", "Prompt pipelining": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/prompts_pipelining", "Connecting to a Feature Store": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/connecting_to_a_feature_store", "Custom chain": "https://python.langchain.com/docs/modules/chains/how_to/custom_chain", "Using OpenAI functions": "https://python.langchain.com/docs/modules/chains/how_to/openai_functions", "interface.md": "https://python.langchain.com/docs/expression_language/interface", "First we add a step to load memory": "https://python.langchain.com/docs/expression_language/cookbook/retrieval", "sql_db.md": "https://python.langchain.com/docs/expression_language/cookbook/sql_db", "prompt_llm_parser.md": "https://python.langchain.com/docs/expression_language/cookbook/prompt_llm_parser", "Adding memory": "https://python.langchain.com/docs/expression_language/cookbook/memory", "multiple_chains.md": "https://python.langchain.com/docs/expression_language/cookbook/multiple_chains", "Code writing": "https://python.langchain.com/docs/expression_language/cookbook/code_writing", "Using tools": "https://python.langchain.com/docs/expression_language/cookbook/tools", "Configure Runnable traces": "https://python.langchain.com/docs/expression_language/how_to/trace_config"}, "ChatPromptTemplate": {"Facebook Messenger": "https://python.langchain.com/docs/integrations/chat_loaders/facebook", "Chat loaders": "https://python.langchain.com/docs/integrations/chat_loaders/index", "iMessage": "https://python.langchain.com/docs/integrations/chat_loaders/imessage", "Anthropic": "https://python.langchain.com/docs/integrations/chat/anthropic", "\ud83d\ude85 LiteLLM": "https://python.langchain.com/docs/integrations/chat/litellm", "Konko": "https://python.langchain.com/docs/integrations/chat/konko", "OpenAI": "https://python.langchain.com/docs/integrations/chat/openai", "Google Cloud Platform Vertex AI PaLM ": "https://python.langchain.com/docs/integrations/chat/google_vertex_ai_palm", "JinaChat": "https://python.langchain.com/docs/integrations/chat/jinachat", "Context": "https://python.langchain.com/docs/integrations/callbacks/context", "OpenAI Functions Metadata Tagger": "https://python.langchain.com/docs/integrations/document_transformers/openai_metadata_tagger", "Figma": "https://python.langchain.com/docs/integrations/document_loaders/figma", "Fireworks": "https://python.langchain.com/docs/integrations/llms/fireworks", "Fallbacks": "https://python.langchain.com/docs/guides/fallbacks", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/tagging", "Multiple Retrieval Sources": "https://python.langchain.com/docs/use_cases/question_answering/how_to/multiple_retrieval", "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa", "Multi-agent authoritarian speaker selection": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/multiagent_authoritarian", "MultiVector Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/multi_vector", "Memory in LLMChain": "https://python.langchain.com/docs/modules/memory/adding_memory", "Retry parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/retry", "Pydantic (JSON) parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/pydantic", "Few-shot examples for chat models": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot_examples_chat", "Prompt pipelining": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/prompts_pipelining", "Using OpenAI functions": "https://python.langchain.com/docs/modules/chains/how_to/openai_functions", "interface.md": "https://python.langchain.com/docs/expression_language/interface", "First we add a step to load memory": "https://python.langchain.com/docs/expression_language/cookbook/retrieval", "sql_db.md": "https://python.langchain.com/docs/expression_language/cookbook/sql_db", "prompt_llm_parser.md": "https://python.langchain.com/docs/expression_language/cookbook/prompt_llm_parser", "Adding memory": "https://python.langchain.com/docs/expression_language/cookbook/memory", "multiple_chains.md": "https://python.langchain.com/docs/expression_language/cookbook/multiple_chains", "Code writing": "https://python.langchain.com/docs/expression_language/cookbook/code_writing", "Using tools": "https://python.langchain.com/docs/expression_language/cookbook/tools", "Adding moderation": "https://python.langchain.com/docs/expression_language/cookbook/moderation"}, "StrOutputParser": {"Facebook Messenger": "https://python.langchain.com/docs/integrations/chat_loaders/facebook", "Chat loaders": "https://python.langchain.com/docs/integrations/chat_loaders/index", "iMessage": "https://python.langchain.com/docs/integrations/chat_loaders/imessage", "OpaquePrompts": "https://python.langchain.com/docs/integrations/llms/opaqueprompts", "Fallbacks": "https://python.langchain.com/docs/guides/fallbacks", "MultiVector Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/multi_vector", "First we add a step to load memory": "https://python.langchain.com/docs/expression_language/cookbook/retrieval", "sql_db.md": "https://python.langchain.com/docs/expression_language/cookbook/sql_db", "prompt_llm_parser.md": "https://python.langchain.com/docs/expression_language/cookbook/prompt_llm_parser", "multiple_chains.md": "https://python.langchain.com/docs/expression_language/cookbook/multiple_chains", "Code writing": "https://python.langchain.com/docs/expression_language/cookbook/code_writing", "Using tools": "https://python.langchain.com/docs/expression_language/cookbook/tools", "Configure Runnable traces": "https://python.langchain.com/docs/expression_language/how_to/trace_config"}, "AIMessage": {"Twitter (via Apify)": "https://python.langchain.com/docs/integrations/chat_loaders/twitter", "Zep": "https://python.langchain.com/docs/integrations/retrievers/zep_memorystore", "Zep Memory": "https://python.langchain.com/docs/integrations/memory/zep_memory", "SQL Chat Message History": "https://python.langchain.com/docs/integrations/memory/sql_chat_message_history", "Anthropic": "https://python.langchain.com/docs/integrations/chat/anthropic", "\ud83d\ude85 LiteLLM": "https://python.langchain.com/docs/integrations/chat/litellm", "Konko": "https://python.langchain.com/docs/integrations/chat/konko", "OpenAI": "https://python.langchain.com/docs/integrations/chat/openai", "JinaChat": "https://python.langchain.com/docs/integrations/chat/jinachat", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/chatbots", "CAMEL Role-Playing Autonomous Cooperative Agents": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/camel_role_playing", "Multi-agent decentralized speaker selection": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/multiagent_bidding", "Multi-agent authoritarian speaker selection": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/multiagent_authoritarian", "Multi-Player Dungeons & Dragons": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/multi_player_dnd", "Simulated Environment: Gymnasium": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/gymnasium", "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/two_agent_debate_tools", "Prompt pipelining": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/prompts_pipelining"}, "convert_message_to_dict": {"Twitter (via Apify)": "https://python.langchain.com/docs/integrations/chat_loaders/twitter"}, "GMailLoader": {"GMail": "https://python.langchain.com/docs/integrations/chat_loaders/gmail"}, "SlackChatLoader": {"Slack": "https://python.langchain.com/docs/integrations/chat_loaders/slack"}, "ChatSession": {"Slack": "https://python.langchain.com/docs/integrations/chat_loaders/slack", "WhatsApp": "https://python.langchain.com/docs/integrations/chat_loaders/whatsapp", "iMessage": "https://python.langchain.com/docs/integrations/chat_loaders/imessage", "Telegram": "https://python.langchain.com/docs/integrations/chat_loaders/telegram", "Discord": "https://python.langchain.com/docs/integrations/chat_loaders/discord"}, "WhatsAppChatLoader": {"WhatsApp": "https://python.langchain.com/docs/integrations/providers/whatsapp", "WhatsApp Chat": "https://python.langchain.com/docs/integrations/document_loaders/whatsapp_chat"}, "IMessageChatLoader": {"iMessage": "https://python.langchain.com/docs/integrations/chat_loaders/imessage"}, "TelegramChatLoader": {"Telegram": "https://python.langchain.com/docs/integrations/chat_loaders/telegram"}, "base": {"Discord": "https://python.langchain.com/docs/integrations/chat_loaders/discord"}, "HuggingFaceBgeEmbeddings": {"BGE on Hugging Face": "https://python.langchain.com/docs/integrations/text_embedding/bge_huggingface"}, "XinferenceEmbeddings": {"Xorbits inference (Xinference)": "https://python.langchain.com/docs/integrations/text_embedding/xinference"}, "DeepInfraEmbeddings": {"DeepInfra": "https://python.langchain.com/docs/integrations/text_embedding/deepinfra"}, "HuggingFaceEmbeddings": {"Hugging Face": "https://python.langchain.com/docs/integrations/providers/huggingface", "Sentence Transformers": "https://python.langchain.com/docs/integrations/text_embedding/sentence_transformers", "LOTR (Merger Retriever)": "https://python.langchain.com/docs/integrations/retrievers/merger_retriever", "ScaNN": "https://python.langchain.com/docs/integrations/vectorstores/scann", "Annoy": "https://python.langchain.com/docs/integrations/vectorstores/annoy", "your local model path": "https://python.langchain.com/docs/integrations/vectorstores/vearch", "Pairwise Embedding Distance ": "https://python.langchain.com/docs/guides/evaluation/comparison/pairwise_embedding_distance", "Embedding Distance": "https://python.langchain.com/docs/guides/evaluation/string/embedding_distance", "Lost in the middle: The problem with long contexts": "https://python.langchain.com/docs/modules/data_connection/document_transformers/post_retrieval/long_context_reorder"}, "HuggingFaceInferenceAPIEmbeddings": {"Hugging Face": "https://python.langchain.com/docs/integrations/text_embedding/huggingfacehub"}, "GPT4AllEmbeddings": {"GPT4All": "https://python.langchain.com/docs/integrations/text_embedding/gpt4all", "Ollama": "https://python.langchain.com/docs/integrations/llms/ollama", "Use local LLMs": "https://python.langchain.com/docs/use_cases/question_answering/how_to/local_retrieval_qa", "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research"}, "MosaicMLInstructorEmbeddings": {"MosaicML": "https://python.langchain.com/docs/integrations/text_embedding/mosaicml"}, "OpenAIEmbeddings": {"OpenAI": "https://python.langchain.com/docs/integrations/providers/openai", "AzureOpenAI": "https://python.langchain.com/docs/integrations/text_embedding/azureopenai", "RePhraseQueryRetriever": "https://python.langchain.com/docs/integrations/retrievers/re_phrase", "Cohere Reranker": "https://python.langchain.com/docs/integrations/retrievers/cohere-reranker", "kNN": "https://python.langchain.com/docs/integrations/retrievers/knn", "DocArray Retriever": "https://python.langchain.com/docs/integrations/retrievers/docarray_retriever", "SVM": "https://python.langchain.com/docs/integrations/retrievers/svm", "Pinecone Hybrid Search": "https://python.langchain.com/docs/integrations/retrievers/pinecone_hybrid_search", "LOTR (Merger Retriever)": "https://python.langchain.com/docs/integrations/retrievers/merger_retriever", "Xata chat memory": "https://python.langchain.com/docs/integrations/memory/xata_chat_message_history", "Confident": "https://python.langchain.com/docs/integrations/callbacks/confident", "Azure OpenAI": "https://python.langchain.com/docs/integrations/providers/azure_openai", "Document Comparison": "https://python.langchain.com/docs/integrations/toolkits/document_comparison_toolkit", "Vectorstore": "https://python.langchain.com/docs/integrations/toolkits/vectorstore", "LanceDB": "https://python.langchain.com/docs/integrations/vectorstores/lancedb", "Weaviate": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/weaviate_self_query", "Xata": "https://python.langchain.com/docs/integrations/vectorstores/xata", "Redis": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/redis_self_query", "PGVector": "https://python.langchain.com/docs/integrations/vectorstores/pgvector", "Rockset": "https://python.langchain.com/docs/integrations/vectorstores/rockset", "DingoDB": "https://python.langchain.com/docs/integrations/vectorstores/dingo", "Zilliz": "https://python.langchain.com/docs/integrations/vectorstores/zilliz", "SingleStoreDB": "https://python.langchain.com/docs/integrations/vectorstores/singlestoredb", "Typesense": "https://python.langchain.com/docs/integrations/vectorstores/typesense", "Atlas": "https://python.langchain.com/docs/integrations/vectorstores/atlas", "Activeloop Deep Lake": "https://python.langchain.com/docs/integrations/vectorstores/activeloop_deeplake", "Neo4j Vector Index": "https://python.langchain.com/docs/integrations/vectorstores/neo4jvector", "Chroma": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/chroma_self_query", "Alibaba Cloud OpenSearch": "https://python.langchain.com/docs/integrations/vectorstores/alibabacloud_opensearch", "Baidu Cloud VectorSearch": "https://python.langchain.com/docs/integrations/vectorstores/baiducloud_vector_search", "StarRocks": "https://python.langchain.com/docs/integrations/vectorstores/starrocks", "scikit-learn": "https://python.langchain.com/docs/integrations/vectorstores/sklearn", "DocArray HnswSearch": "https://python.langchain.com/docs/integrations/vectorstores/docarray_hnsw", "MyScale": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/myscale_self_query", "ClickHouse": "https://python.langchain.com/docs/integrations/vectorstores/clickhouse", "Qdrant": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/qdrant_self_query", "Tigris": "https://python.langchain.com/docs/integrations/vectorstores/tigris", "Supabase (Postgres)": "https://python.langchain.com/docs/integrations/vectorstores/supabase", "OpenSearch": "https://python.langchain.com/docs/integrations/vectorstores/opensearch", "Pinecone": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/pinecone", "Azure Cognitive Search": "https://python.langchain.com/docs/integrations/vectorstores/azuresearch", "Cassandra": "https://python.langchain.com/docs/integrations/vectorstores/cassandra", "USearch": "https://python.langchain.com/docs/integrations/vectorstores/usearch", "Milvus": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/milvus_self_query", "Elasticsearch": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/elasticsearch_self_query", "DocArray InMemorySearch": "https://python.langchain.com/docs/integrations/vectorstores/docarray_in_memory", "Postgres Embedding": "https://python.langchain.com/docs/integrations/vectorstores/pgembedding", "Faiss": "https://python.langchain.com/docs/integrations/vectorstores/faiss", "Epsilla": "https://python.langchain.com/docs/integrations/vectorstores/epsilla", "AnalyticDB": "https://python.langchain.com/docs/integrations/vectorstores/analyticdb", "Hologres": "https://python.langchain.com/docs/integrations/vectorstores/hologres", "MongoDB Atlas": "https://python.langchain.com/docs/integrations/vectorstores/mongodb_atlas", "Meilisearch": "https://python.langchain.com/docs/integrations/vectorstores/meilisearch", "Loading documents from a YouTube url": "https://python.langchain.com/docs/integrations/document_loaders/youtube_audio", "Psychic": "https://python.langchain.com/docs/integrations/document_loaders/psychic", "Docugami": "https://python.langchain.com/docs/integrations/document_loaders/docugami", "LLM Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/chatbots", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/qa_structured/sql", "Question Answering": "https://python.langchain.com/docs/use_cases/question_answering/question_answering", "Perform context-aware text splitting": "https://python.langchain.com/docs/use_cases/question_answering/how_to/document-context-aware-QA", "Conversational Retrieval Agent": "https://python.langchain.com/docs/use_cases/question_answering/how_to/conversational_retrieval_agents", "Retrieve from vector stores directly": "https://python.langchain.com/docs/use_cases/question_answering/how_to/vector_db_text_generation", "Retrieve as you generate with FLARE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/flare", "Improve document indexing with HyDE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/hyde", "Analysis of Twitter the-algorithm source code with LangChain, GPT4 and Activeloop's Deep Lake": "https://python.langchain.com/docs/use_cases/question_answering/how_to/code/twitter-the-algorithm-analysis-deeplake", "Use LangChain, GPT and Activeloop's Deep Lake to work with code base": "https://python.langchain.com/docs/use_cases/question_answering/how_to/code/code-analysis-deeplake", "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa", "QA using Activeloop's DeepLake": "https://python.langchain.com/docs/use_cases/question_answering/integrations/semantic-search-over-chat", "Agents": "https://python.langchain.com/docs/use_cases/more/agents/agents", "AutoGPT": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/autogpt", "BabyAGI User Guide": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/baby_agi", "BabyAGI with Tools": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/baby_agi_with_agent", "!pip install bs4": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/marathon_times", "Plug-and-Plai": "https://python.langchain.com/docs/use_cases/more/agents/agents/custom_agent_with_plugin_retrieval_using_plugnplai", "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/more/agents/agents/sales_agent_with_context", "Custom Agent with PlugIn Retrieval": "https://python.langchain.com/docs/use_cases/more/agents/agents/custom_agent_with_plugin_retrieval", "Generative Agents in LangChain": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/characters", "SQL": "https://python.langchain.com/docs/use_cases/sql/sql", "Indexing": "https://python.langchain.com/docs/modules/data_connection/indexing", "Caching": "https://python.langchain.com/docs/modules/data_connection/text_embedding/caching_embeddings", "MultiVector Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/multi_vector", "MultiQueryRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/MultiQueryRetriever", "Parent Document Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/parent_document_retriever", "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research", "Supabase": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/supabase_self_query", "Deep Lake": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/activeloop_deeplake_self_query", "Memory in the Multi-Input Chain": "https://python.langchain.com/docs/modules/memory/adding_memory_chain_multiple_inputs", "Combine agents and vector stores": "https://python.langchain.com/docs/modules/agents/how_to/agent_vectorstore", "Custom agent with tool retrieval": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent_with_tool_retrieval", "Select by maximal marginal relevance (MMR)": "https://python.langchain.com/docs/modules/model_io/prompts/example_selectors/mmr", "Few-shot examples for chat models": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot_examples_chat", "Loading from LangChainHub": "https://python.langchain.com/docs/modules/chains/how_to/from_hub", "First we add a step to load memory": "https://python.langchain.com/docs/expression_language/cookbook/retrieval"}, "VertexAIEmbeddings": {"Google Vertex AI PaLM ": "https://python.langchain.com/docs/integrations/text_embedding/google_vertex_ai_palm"}, "BedrockEmbeddings": {"Bedrock": "https://python.langchain.com/docs/integrations/providers/bedrock"}, "LlamaCppEmbeddings": {"Llama-cpp": "https://python.langchain.com/docs/integrations/text_embedding/llamacpp", "Llama.cpp": "https://python.langchain.com/docs/integrations/providers/llamacpp"}, "NLPCloudEmbeddings": {"NLP Cloud": "https://python.langchain.com/docs/integrations/text_embedding/nlp_cloud", "NLPCloud": "https://python.langchain.com/docs/integrations/providers/nlpcloud"}, "SpacyEmbeddings": {"SpaCy": "https://python.langchain.com/docs/integrations/text_embedding/spacy_embedding", "spaCy": "https://python.langchain.com/docs/integrations/providers/spacy"}, "HuggingFaceInstructEmbeddings": {"InstructEmbeddings": "https://python.langchain.com/docs/integrations/text_embedding/instruct_embeddings", "Vector SQL Retriever with MyScale": "https://python.langchain.com/docs/use_cases/qa_structured/integrations/myscale_vector_sql"}, "QianfanEmbeddingsEndpoint": {"Baidu Qianfan": "https://python.langchain.com/docs/integrations/text_embedding/baidu_qianfan_endpoint"}, "CohereEmbeddings": {"Cohere": "https://python.langchain.com/docs/integrations/providers/cohere", "Memory in the Multi-Input Chain": "https://python.langchain.com/docs/modules/memory/adding_memory_chain_multiple_inputs", "Router": "https://python.langchain.com/docs/modules/chains/foundational/router"}, "EdenAiEmbeddings": {"EDEN AI": "https://python.langchain.com/docs/integrations/text_embedding/edenai"}, "SentenceTransformerEmbeddings": {"Sentence Transformers": "https://python.langchain.com/docs/integrations/text_embedding/sentence_transformers", "sqlite-vss": "https://python.langchain.com/docs/integrations/vectorstores/sqlitevss", "Chroma": "https://python.langchain.com/docs/integrations/vectorstores/chroma"}, "ClarifaiEmbeddings": {"Clarifai": "https://python.langchain.com/docs/integrations/providers/clarifai"}, "AwaEmbeddings": {"AwaDB": "https://python.langchain.com/docs/integrations/providers/awadb"}, "MiniMaxEmbeddings": {"MiniMax": "https://python.langchain.com/docs/integrations/text_embedding/minimax", "Minimax": "https://python.langchain.com/docs/integrations/providers/minimax"}, "FakeEmbeddings": {"Fake Embeddings": "https://python.langchain.com/docs/integrations/text_embedding/fake", "DocArray Retriever": "https://python.langchain.com/docs/integrations/retrievers/docarray_retriever", "Vectara": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/vectara_self_query", "Tair": "https://python.langchain.com/docs/integrations/vectorstores/tair", "Tencent Cloud VectorDB": "https://python.langchain.com/docs/integrations/vectorstores/tencentvectordb"}, "ElasticsearchEmbeddings": {"Elasticsearch": "https://python.langchain.com/docs/integrations/text_embedding/elasticsearch"}, "SelfHostedEmbeddings": {"Self Hosted": "https://python.langchain.com/docs/integrations/text_embedding/self-hosted"}, "SelfHostedHuggingFaceEmbeddings": {"Self Hosted": "https://python.langchain.com/docs/integrations/text_embedding/self-hosted"}, "SelfHostedHuggingFaceInstructEmbeddings": {"Self Hosted": "https://python.langchain.com/docs/integrations/text_embedding/self-hosted"}, "EmbaasEmbeddings": {"Embaas": "https://python.langchain.com/docs/integrations/text_embedding/embaas"}, "JinaEmbeddings": {"Jina": "https://python.langchain.com/docs/integrations/providers/jina"}, "AlephAlphaAsymmetricSemanticEmbedding": {"Aleph Alpha": "https://python.langchain.com/docs/integrations/providers/aleph_alpha"}, "AlephAlphaSymmetricSemanticEmbedding": {"Aleph Alpha": "https://python.langchain.com/docs/integrations/providers/aleph_alpha"}, "DashScopeEmbeddings": {"DashScope": "https://python.langchain.com/docs/integrations/text_embedding/dashscope", "DashVector": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/dashvector"}, "TensorflowHubEmbeddings": {"TensorflowHub": "https://python.langchain.com/docs/integrations/text_embedding/tensorflowhub", "ScaNN": "https://python.langchain.com/docs/integrations/vectorstores/scann"}, "ModelScopeEmbeddings": {"ModelScope": "https://python.langchain.com/docs/integrations/providers/modelscope"}, "SagemakerEndpointEmbeddings": {"SageMaker": "https://python.langchain.com/docs/integrations/text_embedding/sagemaker-endpoint", "SageMaker Endpoint": "https://python.langchain.com/docs/integrations/providers/sagemaker_endpoint"}, "EmbeddingsContentHandler": {"SageMaker": "https://python.langchain.com/docs/integrations/text_embedding/sagemaker-endpoint"}, "LocalAIEmbeddings": {"LocalAI": "https://python.langchain.com/docs/integrations/text_embedding/localai"}, "WebBaseLoader": {"RePhraseQueryRetriever": "https://python.langchain.com/docs/integrations/retrievers/re_phrase", "Ollama": "https://python.langchain.com/docs/integrations/llms/ollama", "Vectorstore": "https://python.langchain.com/docs/integrations/toolkits/vectorstore", "Zep": "https://python.langchain.com/docs/integrations/vectorstores/zep", "WebBaseLoader": "https://python.langchain.com/docs/integrations/document_loaders/web_base", "MergeDocLoader": "https://python.langchain.com/docs/integrations/document_loaders/merge_doc_loader", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/chatbots", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/summarization", "Question Answering": "https://python.langchain.com/docs/use_cases/question_answering/question_answering", "Use local LLMs": "https://python.langchain.com/docs/use_cases/question_answering/how_to/local_retrieval_qa", "MultiQueryRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/MultiQueryRetriever", "Combine agents and vector stores": "https://python.langchain.com/docs/modules/agents/how_to/agent_vectorstore"}, "RecursiveCharacterTextSplitter": {"RePhraseQueryRetriever": "https://python.langchain.com/docs/integrations/retrievers/re_phrase", "Cohere Reranker": "https://python.langchain.com/docs/integrations/retrievers/cohere-reranker", "Ollama": "https://python.langchain.com/docs/integrations/llms/ollama", "Zep": "https://python.langchain.com/docs/integrations/vectorstores/zep", "your local model path": "https://python.langchain.com/docs/integrations/vectorstores/vearch", "Loading documents from a YouTube url": "https://python.langchain.com/docs/integrations/document_loaders/youtube_audio", "Source Code": "https://python.langchain.com/docs/integrations/document_loaders/source_code", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/chatbots", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/code_understanding", "Question Answering": "https://python.langchain.com/docs/use_cases/question_answering/question_answering", "Perform context-aware text splitting": "https://python.langchain.com/docs/use_cases/question_answering/how_to/document-context-aware-QA", "Use local LLMs": "https://python.langchain.com/docs/use_cases/question_answering/how_to/local_retrieval_qa", "QA using Activeloop's DeepLake": "https://python.langchain.com/docs/use_cases/question_answering/integrations/semantic-search-over-chat", "!pip install bs4": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/marathon_times", "MultiVector Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/multi_vector", "MultiQueryRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/MultiQueryRetriever", "Parent Document Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/parent_document_retriever", "MarkdownHeaderTextSplitter": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/markdown_header_metadata"}, "Chroma": {"RePhraseQueryRetriever": "https://python.langchain.com/docs/integrations/retrievers/re_phrase", "LOTR (Merger Retriever)": "https://python.langchain.com/docs/integrations/retrievers/merger_retriever", "Ollama": "https://python.langchain.com/docs/integrations/llms/ollama", "Confident": "https://python.langchain.com/docs/integrations/callbacks/confident", "Chroma": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/chroma_self_query", "Vectorstore": "https://python.langchain.com/docs/integrations/toolkits/vectorstore", "StarRocks": "https://python.langchain.com/docs/integrations/vectorstores/starrocks", "Psychic": "https://python.langchain.com/docs/integrations/document_loaders/psychic", "Docugami": "https://python.langchain.com/docs/integrations/document_loaders/docugami", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/chatbots", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/code_understanding", "Question Answering": "https://python.langchain.com/docs/use_cases/question_answering/question_answering", "Perform context-aware text splitting": "https://python.langchain.com/docs/use_cases/question_answering/how_to/document-context-aware-QA", "Use local LLMs": "https://python.langchain.com/docs/use_cases/question_answering/how_to/local_retrieval_qa", "Retrieve from vector stores directly": "https://python.langchain.com/docs/use_cases/question_answering/how_to/vector_db_text_generation", "Improve document indexing with HyDE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/hyde", "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa", "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/more/agents/agents/sales_agent_with_context", "MultiVector Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/multi_vector", "MultiQueryRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/MultiQueryRetriever", "Parent Document Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/parent_document_retriever", "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research", "Lost in the middle: The problem with long contexts": "https://python.langchain.com/docs/modules/data_connection/document_transformers/post_retrieval/long_context_reorder", "Memory in the Multi-Input Chain": "https://python.langchain.com/docs/modules/memory/adding_memory_chain_multiple_inputs", "Combine agents and vector stores": "https://python.langchain.com/docs/modules/agents/how_to/agent_vectorstore", "Few-shot examples for chat models": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot_examples_chat", "Router": "https://python.langchain.com/docs/modules/chains/foundational/router", "Loading from LangChainHub": "https://python.langchain.com/docs/modules/chains/how_to/from_hub"}, "RePhraseQueryRetriever": {"RePhraseQueryRetriever": "https://python.langchain.com/docs/integrations/retrievers/re_phrase"}, "PromptTemplate": {"RePhraseQueryRetriever": "https://python.langchain.com/docs/integrations/retrievers/re_phrase", "Zapier Natural Language Actions": "https://python.langchain.com/docs/integrations/tools/zapier", "Dall-E Image Generator": "https://python.langchain.com/docs/integrations/tools/dalle_image_generator", "Streamlit Chat Message History": "https://python.langchain.com/docs/integrations/memory/streamlit_chat_message_history", "Context": "https://python.langchain.com/docs/integrations/callbacks/context", "Argilla": "https://python.langchain.com/docs/integrations/callbacks/argilla", "Comet": "https://python.langchain.com/docs/integrations/providers/comet_tracking", "Aim": "https://python.langchain.com/docs/integrations/providers/aim_tracking", "Weights & Biases": "https://python.langchain.com/docs/integrations/providers/wandb_tracking", "SageMaker Tracking": "https://python.langchain.com/docs/integrations/providers/sagemaker_tracking", "Rebuff": "https://python.langchain.com/docs/integrations/providers/rebuff", "MLflow": "https://python.langchain.com/docs/integrations/providers/mlflow_tracking", "Flyte": "https://python.langchain.com/docs/integrations/providers/flyte", "Vectara Text Generation": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_text_generation", "Natural Language APIs": "https://python.langchain.com/docs/integrations/toolkits/openapi_nla", "your local model path": "https://python.langchain.com/docs/integrations/vectorstores/vearch", "Google Drive": "https://python.langchain.com/docs/integrations/document_loaders/google_drive", "Google Vertex AI PaLM ": "https://python.langchain.com/docs/integrations/llms/google_vertex_ai_palm", "Predibase": "https://python.langchain.com/docs/integrations/llms/predibase", "Hugging Face Local Pipelines": "https://python.langchain.com/docs/integrations/llms/huggingface_pipelines", "Eden AI": "https://python.langchain.com/docs/integrations/llms/edenai", "Fallbacks": "https://python.langchain.com/docs/guides/fallbacks", "Reversible data anonymization with Microsoft Presidio": "https://python.langchain.com/docs/guides/privacy/presidio_data_anonymization/reversible", "Data anonymization with Microsoft Presidio": "https://python.langchain.com/docs/guides/privacy/presidio_data_anonymization/index", "Removing logical fallacies from model output": "https://python.langchain.com/docs/guides/safety/logical_fallacy_chain", "Amazon Comprehend Moderation Chain": "https://python.langchain.com/docs/guides/safety/amazon_comprehend_chain", "Pairwise String Comparison": "https://python.langchain.com/docs/guides/evaluation/comparison/pairwise_string", "Criteria Evaluation": "https://python.langchain.com/docs/guides/evaluation/string/criteria_eval_chain", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/qa_structured/sql", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/apis", "Question Answering": "https://python.langchain.com/docs/use_cases/question_answering/question_answering", "Retrieve from vector stores directly": "https://python.langchain.com/docs/use_cases/question_answering/how_to/vector_db_text_generation", "Improve document indexing with HyDE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/hyde", "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa", "Neo4j DB QA chain": "https://python.langchain.com/docs/use_cases/more/graph/graph_cypher_qa", "Multi-agent authoritarian speaker selection": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/multiagent_authoritarian", "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/two_agent_debate_tools", "Bash chain": "https://python.langchain.com/docs/use_cases/more/code_writing/llm_bash", "How to use a SmartLLMChain": "https://python.langchain.com/docs/use_cases/more/self_check/smart_llm", "Elasticsearch": "https://python.langchain.com/docs/use_cases/qa_structured/integrations/elasticsearch", "SQL": "https://python.langchain.com/docs/use_cases/sql/sql", "MultiQueryRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/MultiQueryRetriever", "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research", "Lost in the middle: The problem with long contexts": "https://python.langchain.com/docs/modules/data_connection/document_transformers/post_retrieval/long_context_reorder", "Custom Memory": "https://python.langchain.com/docs/modules/memory/custom_memory", "Memory in the Multi-Input Chain": "https://python.langchain.com/docs/modules/memory/adding_memory_chain_multiple_inputs", "Memory in LLMChain": "https://python.langchain.com/docs/modules/memory/adding_memory", "Multiple Memory classes": "https://python.langchain.com/docs/modules/memory/multiple_memory", "Customizing Conversational Memory": "https://python.langchain.com/docs/modules/memory/conversational_customization", "Conversation Knowledge Graph": "https://python.langchain.com/docs/modules/memory/types/kg", "Logging to file": "https://python.langchain.com/docs/modules/callbacks/filecallbackhandler", "Retry parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/retry", "Datetime parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/datetime", "Pydantic (JSON) parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/pydantic", "Select by maximal marginal relevance (MMR)": "https://python.langchain.com/docs/modules/model_io/prompts/example_selectors/mmr", "Select by n-gram overlap": "https://python.langchain.com/docs/modules/model_io/prompts/example_selectors/ngram_overlap", "Prompt pipelining": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/prompts_pipelining", "Template formats": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/formats", "Connecting to a Feature Store": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/connecting_to_a_feature_store", "Router": "https://python.langchain.com/docs/modules/chains/foundational/router", "Transformation": "https://python.langchain.com/docs/modules/chains/foundational/transformation", "Custom chain": "https://python.langchain.com/docs/modules/chains/how_to/custom_chain", "Async API": "https://python.langchain.com/docs/modules/chains/how_to/async_chain", "First we add a step to load memory": "https://python.langchain.com/docs/expression_language/cookbook/retrieval", "Configure Runnable traces": "https://python.langchain.com/docs/expression_language/how_to/trace_config"}, "ElasticSearchBM25Retriever": {"ElasticSearch BM25": "https://python.langchain.com/docs/integrations/retrievers/elastic_search_bm25"}, "ZepMemory": {"Zep": "https://python.langchain.com/docs/integrations/retrievers/zep_memorystore", "Zep Memory": "https://python.langchain.com/docs/integrations/memory/zep_memory"}, "CombinedMemory": {"Zep": "https://python.langchain.com/docs/integrations/retrievers/zep_memorystore", "Multiple Memory classes": "https://python.langchain.com/docs/modules/memory/multiple_memory"}, "VectorStoreRetrieverMemory": {"Zep": "https://python.langchain.com/docs/integrations/retrievers/zep_memorystore"}, "HumanMessage": {"Zep": "https://python.langchain.com/docs/integrations/retrievers/zep_memorystore", "Zep Memory": "https://python.langchain.com/docs/integrations/memory/zep_memory", "SQL Chat Message History": "https://python.langchain.com/docs/integrations/memory/sql_chat_message_history", "AzureML Chat Online Endpoint": "https://python.langchain.com/docs/integrations/chat/azureml_chat_endpoint", "Anthropic": "https://python.langchain.com/docs/integrations/chat/anthropic", "\ud83d\ude85 LiteLLM": "https://python.langchain.com/docs/integrations/chat/litellm", "Konko": "https://python.langchain.com/docs/integrations/chat/konko", "OpenAI": "https://python.langchain.com/docs/integrations/chat/openai", "Google Cloud Platform Vertex AI PaLM ": "https://python.langchain.com/docs/integrations/chat/google_vertex_ai_palm", "Bedrock Chat": "https://python.langchain.com/docs/integrations/chat/bedrock", "JinaChat": "https://python.langchain.com/docs/integrations/chat/jinachat", "Ollama": "https://python.langchain.com/docs/integrations/chat/ollama", "Azure": "https://python.langchain.com/docs/integrations/chat/azure_chat_openai", "Baidu Qianfan": "https://python.langchain.com/docs/integrations/chat/baidu_qianfan_endpoint", "ERNIE-Bot Chat": "https://python.langchain.com/docs/integrations/chat/ernie", "PromptLayer ChatOpenAI": "https://python.langchain.com/docs/integrations/chat/promptlayer_chatopenai", "Anyscale": "https://python.langchain.com/docs/integrations/chat/anyscale", "Anthropic Functions": "https://python.langchain.com/docs/integrations/chat/anthropic_functions", "LLMonitor": "https://python.langchain.com/docs/integrations/callbacks/llmonitor", "Context": "https://python.langchain.com/docs/integrations/callbacks/context", "Label Studio": "https://python.langchain.com/docs/integrations/callbacks/labelstudio", "PromptLayer": "https://python.langchain.com/docs/integrations/callbacks/promptlayer", "Log10": "https://python.langchain.com/docs/integrations/providers/log10", "MLflow AI Gateway": "https://python.langchain.com/docs/integrations/providers/mlflow_ai_gateway", "Flyte": "https://python.langchain.com/docs/integrations/providers/flyte", "Arthur": "https://python.langchain.com/docs/integrations/providers/arthur_tracking", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/chatbots", "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa", "CAMEL Role-Playing Autonomous Cooperative Agents": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/camel_role_playing", "Multi-Agent Simulated Environment: Petting Zoo": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/petting_zoo", "Multi-agent decentralized speaker selection": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/multiagent_bidding", "Multi-agent authoritarian speaker selection": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/multiagent_authoritarian", "Two-Player Dungeons & Dragons": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/two_player_dnd", "Multi-Player Dungeons & Dragons": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/multi_player_dnd", "Simulated Environment: Gymnasium": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/gymnasium", "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/two_agent_debate_tools", "Custom callback handlers": "https://python.langchain.com/docs/modules/callbacks/custom_callbacks", "Async callbacks": "https://python.langchain.com/docs/modules/callbacks/async_callbacks", "Tools as OpenAI Functions": "https://python.langchain.com/docs/modules/agents/tools/tools_as_openai_functions", "Prompt pipelining": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/prompts_pipelining", "Using OpenAI functions": "https://python.langchain.com/docs/modules/chains/how_to/openai_functions"}, "ZepRetriever": {"Zep": "https://python.langchain.com/docs/integrations/providers/zep", "Zep Memory": "https://python.langchain.com/docs/integrations/memory/zep_memory"}, "VespaRetriever": {"Vespa": "https://python.langchain.com/docs/integrations/providers/vespa"}, "AmazonKendraRetriever": {"Amazon Kendra": "https://python.langchain.com/docs/integrations/retrievers/amazon_kendra_retriever"}, "TextLoader": {"Cohere Reranker": "https://python.langchain.com/docs/integrations/retrievers/cohere-reranker", "Confident": "https://python.langchain.com/docs/integrations/callbacks/confident", "Elasticsearch": "https://python.langchain.com/docs/integrations/vectorstores/elasticsearch", "Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat", "Vectorstore": "https://python.langchain.com/docs/integrations/toolkits/vectorstore", "LanceDB": "https://python.langchain.com/docs/integrations/vectorstores/lancedb", "sqlite-vss": "https://python.langchain.com/docs/integrations/vectorstores/sqlitevss", "Weaviate": "https://python.langchain.com/docs/integrations/vectorstores/weaviate", "DashVector": "https://python.langchain.com/docs/integrations/vectorstores/dashvector", "ScaNN": "https://python.langchain.com/docs/integrations/vectorstores/scann", "Xata": "https://python.langchain.com/docs/integrations/vectorstores/xata", "Vectara": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/vectara_self_query", "PGVector": "https://python.langchain.com/docs/integrations/vectorstores/pgvector", "Rockset": "https://python.langchain.com/docs/integrations/vectorstores/rockset", "DingoDB": "https://python.langchain.com/docs/integrations/vectorstores/dingo", "Zilliz": "https://python.langchain.com/docs/integrations/vectorstores/zilliz", "SingleStoreDB": "https://python.langchain.com/docs/integrations/vectorstores/singlestoredb", "Annoy": "https://python.langchain.com/docs/integrations/vectorstores/annoy", "Typesense": "https://python.langchain.com/docs/integrations/vectorstores/typesense", "Atlas": "https://python.langchain.com/docs/integrations/vectorstores/atlas", "Activeloop Deep Lake": "https://python.langchain.com/docs/integrations/vectorstores/activeloop_deeplake", "Neo4j Vector Index": "https://python.langchain.com/docs/integrations/vectorstores/neo4jvector", "Tair": "https://python.langchain.com/docs/integrations/vectorstores/tair", "Chroma": "https://python.langchain.com/docs/integrations/vectorstores/chroma", "Alibaba Cloud OpenSearch": "https://python.langchain.com/docs/integrations/vectorstores/alibabacloud_opensearch", "Baidu Cloud VectorSearch": "https://python.langchain.com/docs/integrations/vectorstores/baiducloud_vector_search", "StarRocks": "https://python.langchain.com/docs/integrations/vectorstores/starrocks", "scikit-learn": "https://python.langchain.com/docs/integrations/vectorstores/sklearn", "Tencent Cloud VectorDB": "https://python.langchain.com/docs/integrations/vectorstores/tencentvectordb", "DocArray HnswSearch": "https://python.langchain.com/docs/integrations/vectorstores/docarray_hnsw", "MyScale": "https://python.langchain.com/docs/integrations/vectorstores/myscale", "ClickHouse": "https://python.langchain.com/docs/integrations/vectorstores/clickhouse", "Qdrant": "https://python.langchain.com/docs/integrations/vectorstores/qdrant", "Tigris": "https://python.langchain.com/docs/integrations/vectorstores/tigris", "AwaDB": "https://python.langchain.com/docs/integrations/vectorstores/awadb", "Supabase (Postgres)": "https://python.langchain.com/docs/integrations/vectorstores/supabase", "OpenSearch": "https://python.langchain.com/docs/integrations/vectorstores/opensearch", "Pinecone": "https://python.langchain.com/docs/integrations/vectorstores/pinecone", "BagelDB": "https://python.langchain.com/docs/integrations/vectorstores/bageldb", "Azure Cognitive Search": "https://python.langchain.com/docs/integrations/vectorstores/azuresearch", "Cassandra": "https://python.langchain.com/docs/integrations/vectorstores/cassandra", "USearch": "https://python.langchain.com/docs/integrations/vectorstores/usearch", "Milvus": "https://python.langchain.com/docs/integrations/vectorstores/milvus", "Marqo": "https://python.langchain.com/docs/integrations/vectorstores/marqo", "DocArray InMemorySearch": "https://python.langchain.com/docs/integrations/vectorstores/docarray_in_memory", "Postgres Embedding": "https://python.langchain.com/docs/integrations/vectorstores/pgembedding", "Faiss": "https://python.langchain.com/docs/integrations/vectorstores/faiss", "Epsilla": "https://python.langchain.com/docs/integrations/vectorstores/epsilla", "AnalyticDB": "https://python.langchain.com/docs/integrations/vectorstores/analyticdb", "Hologres": "https://python.langchain.com/docs/integrations/vectorstores/hologres", "your local model path": "https://python.langchain.com/docs/integrations/vectorstores/vearch", "MongoDB Atlas": "https://python.langchain.com/docs/integrations/vectorstores/mongodb_atlas", "Meilisearch": "https://python.langchain.com/docs/integrations/vectorstores/meilisearch", "Conversational Retrieval Agent": "https://python.langchain.com/docs/use_cases/question_answering/how_to/conversational_retrieval_agents", "Analysis of Twitter the-algorithm source code with LangChain, GPT4 and Activeloop's Deep Lake": "https://python.langchain.com/docs/use_cases/question_answering/how_to/code/twitter-the-algorithm-analysis-deeplake", "Use LangChain, GPT and Activeloop's Deep Lake to work with code base": "https://python.langchain.com/docs/use_cases/question_answering/how_to/code/code-analysis-deeplake", "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa", "QA using Activeloop's DeepLake": "https://python.langchain.com/docs/use_cases/question_answering/integrations/semantic-search-over-chat", "Graph QA": "https://python.langchain.com/docs/use_cases/more/graph/graph_qa", "Caching": "https://python.langchain.com/docs/modules/data_connection/text_embedding/caching_embeddings", "MultiVector Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/multi_vector", "Parent Document Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/parent_document_retriever", "Combine agents and vector stores": "https://python.langchain.com/docs/modules/agents/how_to/agent_vectorstore", "Loading from LangChainHub": "https://python.langchain.com/docs/modules/chains/how_to/from_hub"}, "FAISS": {"Cohere Reranker": "https://python.langchain.com/docs/integrations/retrievers/cohere-reranker", "Facebook Faiss": "https://python.langchain.com/docs/integrations/providers/facebook_faiss", "Document Comparison": "https://python.langchain.com/docs/integrations/toolkits/document_comparison_toolkit", "Faiss": "https://python.langchain.com/docs/integrations/vectorstores/faiss", "Loading documents from a YouTube url": "https://python.langchain.com/docs/integrations/document_loaders/youtube_audio", "Conversational Retrieval Agent": "https://python.langchain.com/docs/use_cases/question_answering/how_to/conversational_retrieval_agents", "Agents": "https://python.langchain.com/docs/use_cases/more/agents/agents", "AutoGPT": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/autogpt", "BabyAGI User Guide": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/baby_agi", "BabyAGI with Tools": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/baby_agi_with_agent", "!pip install bs4": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/marathon_times", "Plug-and-Plai": "https://python.langchain.com/docs/use_cases/more/agents/agents/custom_agent_with_plugin_retrieval_using_plugnplai", "Custom Agent with PlugIn Retrieval": "https://python.langchain.com/docs/use_cases/more/agents/agents/custom_agent_with_plugin_retrieval", "Generative Agents in LangChain": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/characters", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/qa_structured/sql", "SQL": "https://python.langchain.com/docs/use_cases/sql/sql", "Caching": "https://python.langchain.com/docs/modules/data_connection/text_embedding/caching_embeddings", "Ensemble Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/ensemble", "Custom agent with tool retrieval": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent_with_tool_retrieval", "Select by maximal marginal relevance (MMR)": "https://python.langchain.com/docs/modules/model_io/prompts/example_selectors/mmr", "First we add a step to load memory": "https://python.langchain.com/docs/expression_language/cookbook/retrieval"}, "OpenAI": {"Cohere Reranker": "https://python.langchain.com/docs/integrations/retrievers/cohere-reranker", "Google Serper": "https://python.langchain.com/docs/integrations/providers/google_serper", "Human as a tool": "https://python.langchain.com/docs/integrations/tools/human_tools", "OpenWeatherMap": "https://python.langchain.com/docs/integrations/tools/openweathermap", "Search Tools": "https://python.langchain.com/docs/integrations/tools/search_tools", "Zapier Natural Language Actions": "https://python.langchain.com/docs/integrations/tools/zapier", "Gradio": "https://python.langchain.com/docs/integrations/tools/gradio_tools", "SceneXplain": "https://python.langchain.com/docs/integrations/tools/sceneXplain", "Dall-E Image Generator": "https://python.langchain.com/docs/integrations/tools/dalle_image_generator", "Entity Memory with SQLite storage": "https://python.langchain.com/docs/integrations/memory/entity_memory_with_sqlite", "Streamlit Chat Message History": "https://python.langchain.com/docs/integrations/memory/streamlit_chat_message_history", "Confident": "https://python.langchain.com/docs/integrations/callbacks/confident", "LLMonitor": "https://python.langchain.com/docs/integrations/callbacks/llmonitor", "Label Studio": "https://python.langchain.com/docs/integrations/callbacks/labelstudio", "Argilla": "https://python.langchain.com/docs/integrations/callbacks/argilla", "PromptLayer": "https://python.langchain.com/docs/integrations/callbacks/promptlayer", "Streamlit": "https://python.langchain.com/docs/integrations/callbacks/.ipynb_checkpoints/streamlit-checkpoint", "Infino": "https://python.langchain.com/docs/integrations/callbacks/infino", "Comet": "https://python.langchain.com/docs/integrations/providers/comet_tracking", "Aim": "https://python.langchain.com/docs/integrations/providers/aim_tracking", "Weights & Biases": "https://python.langchain.com/docs/integrations/providers/wandb_tracking", "SageMaker Tracking": "https://python.langchain.com/docs/integrations/providers/sagemaker_tracking", "OpenAI": "https://python.langchain.com/docs/integrations/llms/openai", "Rebuff": "https://python.langchain.com/docs/integrations/providers/rebuff", "MLflow": "https://python.langchain.com/docs/integrations/providers/mlflow_tracking", "Helicone": "https://python.langchain.com/docs/integrations/providers/helicone", "Shale Protocol": "https://python.langchain.com/docs/integrations/providers/shaleprotocol", "WhyLabs": "https://python.langchain.com/docs/integrations/providers/whylabs_profiling", "WandB Tracing": "https://python.langchain.com/docs/integrations/providers/wandb_tracing", "ClearML": "https://python.langchain.com/docs/integrations/providers/clearml_tracking", "Ray Serve": "https://python.langchain.com/docs/integrations/providers/ray_serve", "Log, Trace, and Monitor": "https://python.langchain.com/docs/integrations/providers/portkey/logging_tracing_portkey", "Portkey": "https://python.langchain.com/docs/integrations/providers/portkey/index", "Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat", "Vectara Text Generation": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_text_generation", "CSV": "https://python.langchain.com/docs/integrations/toolkits/csv", "Xorbits": "https://python.langchain.com/docs/integrations/toolkits/xorbits", "Jira": "https://python.langchain.com/docs/integrations/toolkits/jira", "Spark Dataframe": "https://python.langchain.com/docs/integrations/toolkits/spark", "Python": "https://python.langchain.com/docs/integrations/toolkits/python", "SQL Database": "https://python.langchain.com/docs/integrations/toolkits/sql_database", "Natural Language APIs": "https://python.langchain.com/docs/integrations/toolkits/openapi_nla", "JSON": "https://python.langchain.com/docs/integrations/toolkits/json", "Github": "https://python.langchain.com/docs/integrations/toolkits/github", "Pandas Dataframe": "https://python.langchain.com/docs/integrations/toolkits/pandas", "OpenAPI": "https://python.langchain.com/docs/integrations/toolkits/openapi", "Gitlab": "https://python.langchain.com/docs/integrations/toolkits/gitlab", "Vectara": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/vectara_self_query", "Psychic": "https://python.langchain.com/docs/integrations/document_loaders/psychic", "Docugami": "https://python.langchain.com/docs/integrations/document_loaders/docugami", "Amazon Textract ": "https://python.langchain.com/docs/integrations/document_loaders/pdf-amazonTextractPDFLoader", "OpaquePrompts": "https://python.langchain.com/docs/integrations/llms/opaqueprompts", "LLM Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching", "Fallbacks": "https://python.langchain.com/docs/guides/fallbacks", "Removing logical fallacies from model output": "https://python.langchain.com/docs/guides/safety/logical_fallacy_chain", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/apis", "Perform context-aware text splitting": "https://python.langchain.com/docs/use_cases/question_answering/how_to/document-context-aware-QA", "Retrieve from vector stores directly": "https://python.langchain.com/docs/use_cases/question_answering/how_to/vector_db_text_generation", "Retrieve as you generate with FLARE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/flare", "Improve document indexing with HyDE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/hyde", "QA using Activeloop's DeepLake": "https://python.langchain.com/docs/use_cases/question_answering/integrations/semantic-search-over-chat", "Graph QA": "https://python.langchain.com/docs/use_cases/more/graph/graph_qa", "Tree of Thought (ToT) example": "https://python.langchain.com/docs/use_cases/more/graph/tot", "HuggingGPT": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/hugginggpt", "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/more/agents/agents/sales_agent_with_context", "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/two_agent_debate_tools", "Bash chain": "https://python.langchain.com/docs/use_cases/more/code_writing/llm_bash", "LLM Symbolic Math ": "https://python.langchain.com/docs/use_cases/more/code_writing/llm_symbolic_math", "Summarization checker chain": "https://python.langchain.com/docs/use_cases/more/self_check/llm_summarization_checker", "Self-checking chain": "https://python.langchain.com/docs/use_cases/more/self_check/llm_checker", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/qa_structured/sql", "Vector SQL Retriever with MyScale": "https://python.langchain.com/docs/use_cases/qa_structured/integrations/myscale_vector_sql", "SQL": "https://python.langchain.com/docs/use_cases/sql/sql", "Milvus": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/milvus_self_query", "Weaviate": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/weaviate_self_query", "Elasticsearch": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/elasticsearch_self_query", "Chroma": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/chroma_self_query", "Pinecone": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/pinecone", "Supabase": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/supabase_self_query", "Redis": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/redis_self_query", "MyScale": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/myscale_self_query", "Deep Lake": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/activeloop_deeplake_self_query", "Qdrant": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/qdrant_self_query", "Lost in the middle: The problem with long contexts": "https://python.langchain.com/docs/modules/data_connection/document_transformers/post_retrieval/long_context_reorder", "Memory in the Multi-Input Chain": "https://python.langchain.com/docs/modules/memory/adding_memory_chain_multiple_inputs", "Memory in LLMChain": "https://python.langchain.com/docs/modules/memory/adding_memory", "Multiple Memory classes": "https://python.langchain.com/docs/modules/memory/multiple_memory", "Customizing Conversational Memory": "https://python.langchain.com/docs/modules/memory/conversational_customization", "Conversation Knowledge Graph": "https://python.langchain.com/docs/modules/memory/types/kg", "Conversation Token Buffer": "https://python.langchain.com/docs/modules/memory/types/token_buffer", "Conversation Summary Buffer": "https://python.langchain.com/docs/modules/memory/types/summary_buffer", "Multiple callback handlers": "https://python.langchain.com/docs/modules/callbacks/multiple_callbacks", "Token counting": "https://python.langchain.com/docs/modules/callbacks/token_counting", "Logging to file": "https://python.langchain.com/docs/modules/callbacks/filecallbackhandler", "Multi-Input Tools": "https://python.langchain.com/docs/modules/agents/tools/multi_input_tool", "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools", "Tool Input Schema": "https://python.langchain.com/docs/modules/agents/tools/tool_input_validation", "Human-in-the-loop Tool Validation": "https://python.langchain.com/docs/modules/agents/tools/human_approval", "Combine agents and vector stores": "https://python.langchain.com/docs/modules/agents/how_to/agent_vectorstore", "Access intermediate steps": "https://python.langchain.com/docs/modules/agents/how_to/intermediate_steps", "Timeouts for agents": "https://python.langchain.com/docs/modules/agents/how_to/max_time_limit", "Streaming final agent output": "https://python.langchain.com/docs/modules/agents/how_to/streaming_stdout_final_only", "Cap the max number of iterations": "https://python.langchain.com/docs/modules/agents/how_to/max_iterations", "Async API": "https://python.langchain.com/docs/modules/chains/how_to/async_chain", "Tracking token usage": "https://python.langchain.com/docs/modules/model_io/models/llms/token_usage_tracking", "Serialization": "https://python.langchain.com/docs/modules/model_io/models/llms/llm_serialization", "Retry parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/retry", "Datetime parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/datetime", "Pydantic (JSON) parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/pydantic", "Router": "https://python.langchain.com/docs/modules/chains/foundational/router", "Transformation": "https://python.langchain.com/docs/modules/chains/foundational/transformation", "Adding moderation": "https://python.langchain.com/docs/expression_language/cookbook/moderation"}, "ContextualCompressionRetriever": {"Cohere Reranker": "https://python.langchain.com/docs/integrations/retrievers/cohere-reranker", "LOTR (Merger Retriever)": "https://python.langchain.com/docs/integrations/retrievers/merger_retriever"}, "CohereRerank": {"Cohere Reranker": "https://python.langchain.com/docs/integrations/retrievers/cohere-reranker", "Cohere": "https://python.langchain.com/docs/integrations/providers/cohere"}, "RetrievalQA": {"Cohere Reranker": "https://python.langchain.com/docs/integrations/retrievers/cohere-reranker", "Ollama": "https://python.langchain.com/docs/integrations/llms/ollama", "Confident": "https://python.langchain.com/docs/integrations/callbacks/confident", "Document Comparison": "https://python.langchain.com/docs/integrations/toolkits/document_comparison_toolkit", "ScaNN": "https://python.langchain.com/docs/integrations/vectorstores/scann", "Activeloop Deep Lake": "https://python.langchain.com/docs/integrations/vectorstores/activeloop_deeplake", "StarRocks": "https://python.langchain.com/docs/integrations/vectorstores/starrocks", "your local model path": "https://python.langchain.com/docs/integrations/vectorstores/vearch", "Loading documents from a YouTube url": "https://python.langchain.com/docs/integrations/document_loaders/youtube_audio", "Docugami": "https://python.langchain.com/docs/integrations/document_loaders/docugami", "Question Answering": "https://python.langchain.com/docs/use_cases/question_answering/question_answering", "Perform context-aware text splitting": "https://python.langchain.com/docs/use_cases/question_answering/how_to/document-context-aware-QA", "Use local LLMs": "https://python.langchain.com/docs/use_cases/question_answering/how_to/local_retrieval_qa", "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa", "QA using Activeloop's DeepLake": "https://python.langchain.com/docs/use_cases/question_answering/integrations/semantic-search-over-chat", "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/more/agents/agents/sales_agent_with_context", "Combine agents and vector stores": "https://python.langchain.com/docs/modules/agents/how_to/agent_vectorstore"}, "KNNRetriever": {"kNN": "https://python.langchain.com/docs/integrations/retrievers/knn"}, "WikipediaRetriever": {"Wikipedia": "https://python.langchain.com/docs/integrations/providers/wikipedia"}, "ConversationalRetrievalChain": {"Wikipedia": "https://python.langchain.com/docs/integrations/retrievers/wikipedia", "Arxiv": "https://python.langchain.com/docs/integrations/retrievers/arxiv", "Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat", "Vectara": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/vectara_self_query", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/chatbots", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/code_understanding", "Analysis of Twitter the-algorithm source code with LangChain, GPT4 and Activeloop's Deep Lake": "https://python.langchain.com/docs/use_cases/question_answering/how_to/code/twitter-the-algorithm-analysis-deeplake", "Use LangChain, GPT and Activeloop's Deep Lake to work with code base": "https://python.langchain.com/docs/use_cases/question_answering/how_to/code/code-analysis-deeplake", "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa", "QA using Activeloop's DeepLake": "https://python.langchain.com/docs/use_cases/question_answering/integrations/semantic-search-over-chat"}, "MetalRetriever": {"Metal": "https://python.langchain.com/docs/integrations/providers/metal"}, "CSVLoader": {"ChatGPT Plugin": "https://python.langchain.com/docs/integrations/retrievers/chatgpt-plugin", "CSV": "https://python.langchain.com/docs/integrations/document_loaders/csv"}, "Document": {"ChatGPT Plugin": "https://python.langchain.com/docs/integrations/retrievers/chatgpt-plugin", "Weaviate Hybrid Search": "https://python.langchain.com/docs/integrations/retrievers/weaviate-hybrid", "BM25": "https://python.langchain.com/docs/integrations/retrievers/bm25", "TF-IDF": "https://python.langchain.com/docs/integrations/retrievers/tf_idf", "Apify": "https://python.langchain.com/docs/integrations/tools/apify", "Vectara Text Generation": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_text_generation", "PGVector": "https://python.langchain.com/docs/integrations/vectorstores/pgvector", "Annoy": "https://python.langchain.com/docs/integrations/vectorstores/annoy", "Neo4j Vector Index": "https://python.langchain.com/docs/integrations/vectorstores/neo4jvector", "Postgres Embedding": "https://python.langchain.com/docs/integrations/vectorstores/pgembedding", "Faiss": "https://python.langchain.com/docs/integrations/vectorstores/faiss", "Nuclia Understanding API document transformer": "https://python.langchain.com/docs/integrations/document_transformers/nuclia_transformer", "OpenAI Functions Metadata Tagger": "https://python.langchain.com/docs/integrations/document_transformers/openai_metadata_tagger", "Doctran Extract Properties": "https://python.langchain.com/docs/integrations/document_transformers/doctran_extract_properties", "Doctran Interrogate Documents": "https://python.langchain.com/docs/integrations/document_transformers/doctran_interrogate_document", "Doctran Translate Documents": "https://python.langchain.com/docs/integrations/document_transformers/doctran_translate_document", "TensorFlow Datasets": "https://python.langchain.com/docs/integrations/document_loaders/tensorflow_datasets", "Airbyte Salesforce": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_salesforce", "Airbyte CDK": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_cdk", "Airbyte Stripe": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_stripe", "Copy Paste": "https://python.langchain.com/docs/integrations/document_loaders/copypaste", "Airbyte Typeform": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_typeform", "Apify Dataset": "https://python.langchain.com/docs/integrations/document_loaders/apify_dataset", "Docugami": "https://python.langchain.com/docs/integrations/document_loaders/docugami", "Airbyte Hubspot": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_hubspot", "Airbyte Gong": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_gong", "Airbyte Shopify": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_shopify", "Airbyte Zendesk Support": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_zendesk_support", "SageMakerEndpoint": "https://python.langchain.com/docs/integrations/llms/sagemaker", "LLM Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching", "Retrieve from vector stores directly": "https://python.langchain.com/docs/use_cases/question_answering/how_to/vector_db_text_generation", "Multiple Retrieval Sources": "https://python.langchain.com/docs/use_cases/question_answering/how_to/multiple_retrieval", "Retrieve as you generate with FLARE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/flare", "!pip install bs4": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/marathon_times", "Plug-and-Plai": "https://python.langchain.com/docs/use_cases/more/agents/agents/custom_agent_with_plugin_retrieval_using_plugnplai", "Custom Agent with PlugIn Retrieval": "https://python.langchain.com/docs/use_cases/more/agents/agents/custom_agent_with_plugin_retrieval", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/qa_structured/sql", "SQL": "https://python.langchain.com/docs/use_cases/sql/sql", "Indexing": "https://python.langchain.com/docs/modules/data_connection/indexing", "MultiVector Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/multi_vector", "Milvus": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/milvus_self_query", "Weaviate": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/weaviate_self_query", "Vectara": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/vectara_self_query", "DashVector": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/dashvector", "Elasticsearch": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/elasticsearch_self_query", "Chroma": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/chroma_self_query", "Pinecone": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/pinecone", "Supabase": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/supabase_self_query", "Redis": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/redis_self_query", "MyScale": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/myscale_self_query", "Deep Lake": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/activeloop_deeplake_self_query", "Qdrant": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/qdrant_self_query", "Memory in the Multi-Input Chain": "https://python.langchain.com/docs/modules/memory/adding_memory_chain_multiple_inputs", "Custom agent with tool retrieval": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent_with_tool_retrieval"}, "ChatGPTPluginRetriever": {"ChatGPT Plugin": "https://python.langchain.com/docs/integrations/retrievers/chatgpt-plugin", "OpenAI": "https://python.langchain.com/docs/integrations/providers/openai"}, "GoogleVertexAISearchRetriever": {"Google Vertex AI Search": "https://python.langchain.com/docs/integrations/retrievers/google_vertex_ai_search"}, "DocArrayRetriever": {"DocArray Retriever": "https://python.langchain.com/docs/integrations/retrievers/docarray_retriever"}, "SVMRetriever": {"SVM": "https://python.langchain.com/docs/integrations/retrievers/svm", "Question Answering": "https://python.langchain.com/docs/use_cases/question_answering/question_answering"}, "PineconeHybridSearchRetriever": {"Pinecone Hybrid Search": "https://python.langchain.com/docs/integrations/retrievers/pinecone_hybrid_search"}, "PubMedRetriever": {"PubMed": "https://python.langchain.com/docs/integrations/providers/pubmed"}, "WeaviateHybridSearchRetriever": {"Weaviate Hybrid Search": "https://python.langchain.com/docs/integrations/retrievers/weaviate-hybrid"}, "ArxivRetriever": {"Arxiv": "https://python.langchain.com/docs/integrations/providers/arxiv"}, "BM25Retriever": {"BM25": "https://python.langchain.com/docs/integrations/retrievers/bm25", "Ensemble Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/ensemble"}, "AzureCognitiveSearchRetriever": {"Azure Cognitive Search": "https://python.langchain.com/docs/integrations/providers/azure_cognitive_search_"}, "ChaindeskRetriever": {"Chaindesk": "https://python.langchain.com/docs/integrations/providers/chaindesk"}, "MergerRetriever": {"LOTR (Merger Retriever)": "https://python.langchain.com/docs/integrations/retrievers/merger_retriever"}, "EmbeddingsRedundantFilter": {"LOTR (Merger Retriever)": "https://python.langchain.com/docs/integrations/retrievers/merger_retriever"}, "EmbeddingsClusteringFilter": {"LOTR (Merger Retriever)": "https://python.langchain.com/docs/integrations/retrievers/merger_retriever"}, "DocumentCompressorPipeline": {"LOTR (Merger Retriever)": "https://python.langchain.com/docs/integrations/retrievers/merger_retriever"}, "LongContextReorder": {"LOTR (Merger Retriever)": "https://python.langchain.com/docs/integrations/retrievers/merger_retriever", "Lost in the middle: The problem with long contexts": "https://python.langchain.com/docs/modules/data_connection/document_transformers/post_retrieval/long_context_reorder"}, "TFIDFRetriever": {"TF-IDF": "https://python.langchain.com/docs/integrations/retrievers/tf_idf"}, "load_tools": {"ChatGPT Plugins": "https://python.langchain.com/docs/integrations/tools/chatgpt_plugins", "Human as a tool": "https://python.langchain.com/docs/integrations/tools/human_tools", "AWS Lambda": "https://python.langchain.com/docs/integrations/tools/awslambda", "Google Drive": "https://python.langchain.com/docs/integrations/tools/google_drive", "Requests": "https://python.langchain.com/docs/integrations/tools/requests", "OpenWeatherMap": "https://python.langchain.com/docs/integrations/providers/openweathermap", "Search Tools": "https://python.langchain.com/docs/integrations/tools/search_tools", "Eleven Labs Text2Speech": "https://python.langchain.com/docs/integrations/tools/eleven_labs_tts", "ArXiv": "https://python.langchain.com/docs/integrations/tools/arxiv", "GraphQL": "https://python.langchain.com/docs/integrations/tools/graphql", "SceneXplain": "https://python.langchain.com/docs/integrations/tools/sceneXplain", "Dall-E Image Generator": "https://python.langchain.com/docs/integrations/tools/dalle_image_generator", "LLMonitor": "https://python.langchain.com/docs/integrations/callbacks/llmonitor", "Argilla": "https://python.langchain.com/docs/integrations/callbacks/argilla", "Streamlit": "https://python.langchain.com/docs/integrations/callbacks/.ipynb_checkpoints/streamlit-checkpoint", "SerpAPI": "https://python.langchain.com/docs/integrations/providers/serpapi", "Comet": "https://python.langchain.com/docs/integrations/providers/comet_tracking", "Aim": "https://python.langchain.com/docs/integrations/providers/aim_tracking", "Golden": "https://python.langchain.com/docs/integrations/providers/golden", "Weights & Biases": "https://python.langchain.com/docs/integrations/providers/wandb_tracking", "SageMaker Tracking": "https://python.langchain.com/docs/integrations/providers/sagemaker_tracking", "Wolfram Alpha": "https://python.langchain.com/docs/integrations/providers/wolfram_alpha", "MLflow": "https://python.langchain.com/docs/integrations/providers/mlflow_tracking", "DataForSEO": "https://python.langchain.com/docs/integrations/providers/dataforseo", "SearxNG Search API": "https://python.langchain.com/docs/integrations/providers/searx", "Google Serper": "https://python.langchain.com/docs/integrations/providers/google_serper", "Flyte": "https://python.langchain.com/docs/integrations/providers/flyte", "WandB Tracing": "https://python.langchain.com/docs/integrations/providers/wandb_tracing", "ClearML": "https://python.langchain.com/docs/integrations/providers/clearml_tracking", "Google Search": "https://python.langchain.com/docs/integrations/providers/google_search", "Log, Trace, and Monitor": "https://python.langchain.com/docs/integrations/providers/portkey/logging_tracing_portkey", "Portkey": "https://python.langchain.com/docs/integrations/providers/portkey/index", "Google Drive tool": "https://python.langchain.com/docs/integrations/toolkits/google_drive", "Bittensor": "https://python.langchain.com/docs/integrations/llms/bittensor", "Amazon API Gateway": "https://python.langchain.com/docs/integrations/llms/amazon_api_gateway", "Debugging": "https://python.langchain.com/docs/guides/debugging", "LangSmith Walkthrough": "https://python.langchain.com/docs/guides/langsmith/walkthrough", "Agents": "https://python.langchain.com/docs/use_cases/more/agents/agents", "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/two_agent_debate_tools", "Multiple callback handlers": "https://python.langchain.com/docs/modules/callbacks/multiple_callbacks", "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools", "Human-in-the-loop Tool Validation": "https://python.langchain.com/docs/modules/agents/tools/human_approval", "Access intermediate steps": "https://python.langchain.com/docs/modules/agents/how_to/intermediate_steps", "Timeouts for agents": "https://python.langchain.com/docs/modules/agents/how_to/max_time_limit", "Streaming final agent output": "https://python.langchain.com/docs/modules/agents/how_to/streaming_stdout_final_only", "Cap the max number of iterations": "https://python.langchain.com/docs/modules/agents/how_to/max_iterations", "Async API": "https://python.langchain.com/docs/modules/agents/how_to/async_agent", "Human input chat model": "https://python.langchain.com/docs/modules/model_io/models/chat/human_input_chat_model", "Fake LLM": "https://python.langchain.com/docs/modules/model_io/models/llms/fake_llm", "Tracking token usage": "https://python.langchain.com/docs/modules/model_io/models/llms/token_usage_tracking", "Human input LLM": "https://python.langchain.com/docs/modules/model_io/models/llms/human_input_llm"}, "initialize_agent": {"ChatGPT Plugins": "https://python.langchain.com/docs/integrations/tools/chatgpt_plugins", "Google Serper": "https://python.langchain.com/docs/integrations/providers/google_serper", "Human as a tool": "https://python.langchain.com/docs/integrations/tools/human_tools", "Yahoo Finance News": "https://python.langchain.com/docs/integrations/tools/yahoo_finance_news", "AWS Lambda": "https://python.langchain.com/docs/integrations/tools/awslambda", "Google Drive": "https://python.langchain.com/docs/integrations/tools/google_drive", "OpenWeatherMap": "https://python.langchain.com/docs/integrations/tools/openweathermap", "Search Tools": "https://python.langchain.com/docs/integrations/tools/search_tools", "Eleven Labs Text2Speech": "https://python.langchain.com/docs/integrations/tools/eleven_labs_tts", "Zapier Natural Language Actions": "https://python.langchain.com/docs/integrations/tools/zapier", "ArXiv": "https://python.langchain.com/docs/integrations/tools/arxiv", "Metaphor Search": "https://python.langchain.com/docs/integrations/tools/metaphor_search", "GraphQL": "https://python.langchain.com/docs/integrations/tools/graphql", "Gradio": "https://python.langchain.com/docs/integrations/tools/gradio_tools", "SceneXplain": "https://python.langchain.com/docs/integrations/tools/sceneXplain", "Eden AI": "https://python.langchain.com/docs/integrations/tools/edenai_tools", "Dall-E Image Generator": "https://python.langchain.com/docs/integrations/tools/dalle_image_generator", "Shell (bash)": "https://python.langchain.com/docs/integrations/tools/bash", "Zep Memory": "https://python.langchain.com/docs/integrations/memory/zep_memory", "Xata chat memory": "https://python.langchain.com/docs/integrations/memory/xata_chat_message_history", "Dynamodb Chat Message History": "https://python.langchain.com/docs/integrations/memory/dynamodb_chat_message_history", "LLMonitor": "https://python.langchain.com/docs/integrations/callbacks/llmonitor", "Argilla": "https://python.langchain.com/docs/integrations/callbacks/argilla", "Streamlit": "https://python.langchain.com/docs/integrations/callbacks/.ipynb_checkpoints/streamlit-checkpoint", "Comet": "https://python.langchain.com/docs/integrations/providers/comet_tracking", "Aim": "https://python.langchain.com/docs/integrations/providers/aim_tracking", "Weights & Biases": "https://python.langchain.com/docs/integrations/providers/wandb_tracking", "SageMaker Tracking": "https://python.langchain.com/docs/integrations/providers/sagemaker_tracking", "MLflow": "https://python.langchain.com/docs/integrations/providers/mlflow_tracking", "Flyte": "https://python.langchain.com/docs/integrations/providers/flyte", "WandB Tracing": "https://python.langchain.com/docs/integrations/providers/wandb_tracing", "ClearML": "https://python.langchain.com/docs/integrations/providers/clearml_tracking", "Log, Trace, and Monitor": "https://python.langchain.com/docs/integrations/providers/portkey/logging_tracing_portkey", "Portkey": "https://python.langchain.com/docs/integrations/providers/portkey/index", "Jira": "https://python.langchain.com/docs/integrations/toolkits/jira", "Document Comparison": "https://python.langchain.com/docs/integrations/toolkits/document_comparison_toolkit", "Azure Cognitive Services": "https://python.langchain.com/docs/integrations/toolkits/azure_cognitive_services", "Natural Language APIs": "https://python.langchain.com/docs/integrations/toolkits/openapi_nla", "Gmail": "https://python.langchain.com/docs/integrations/toolkits/gmail", "Github": "https://python.langchain.com/docs/integrations/toolkits/github", "Google Drive tool": "https://python.langchain.com/docs/integrations/toolkits/google_drive", "AINetwork": "https://python.langchain.com/docs/integrations/toolkits/ainetwork", "PlayWright Browser": "https://python.langchain.com/docs/integrations/toolkits/playwright", "Office365": "https://python.langchain.com/docs/integrations/toolkits/office365", "MultiOn": "https://python.langchain.com/docs/integrations/toolkits/multion", "Amadeus": "https://python.langchain.com/docs/integrations/toolkits/amadeus", "Gitlab": "https://python.langchain.com/docs/integrations/toolkits/gitlab", "Bittensor": "https://python.langchain.com/docs/integrations/llms/bittensor", "Amazon API Gateway": "https://python.langchain.com/docs/integrations/llms/amazon_api_gateway", "Debugging": "https://python.langchain.com/docs/guides/debugging", "LangSmith Walkthrough": "https://python.langchain.com/docs/guides/langsmith/walkthrough", "Hugging Face Prompt Injection Identification": "https://python.langchain.com/docs/guides/safety/hugging_face_prompt_injection", "Comparing Chain Outputs": "https://python.langchain.com/docs/guides/evaluation/examples/comparisons", "Agent Trajectory": "https://python.langchain.com/docs/guides/evaluation/trajectory/trajectory_eval", "Agents": "https://python.langchain.com/docs/use_cases/more/agents/agents", "Multi-modal outputs: Image & Text": "https://python.langchain.com/docs/use_cases/more/agents/multi_modal/multi_modal_output_agent", "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/two_agent_debate_tools", "Multiple callback handlers": "https://python.langchain.com/docs/modules/callbacks/multiple_callbacks", "Multi-Input Tools": "https://python.langchain.com/docs/modules/agents/tools/multi_input_tool", "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools", "Tool Input Schema": "https://python.langchain.com/docs/modules/agents/tools/tool_input_validation", "Human-in-the-loop Tool Validation": "https://python.langchain.com/docs/modules/agents/tools/human_approval", "Self-ask with search": "https://python.langchain.com/docs/modules/agents/agent_types/self_ask_with_search", "ReAct document store": "https://python.langchain.com/docs/modules/agents/agent_types/react_docstore", "OpenAI Multi Functions Agent": "https://python.langchain.com/docs/modules/agents/agent_types/openai_multi_functions_agent", "Combine agents and vector stores": "https://python.langchain.com/docs/modules/agents/how_to/agent_vectorstore", "Access intermediate steps": "https://python.langchain.com/docs/modules/agents/how_to/intermediate_steps", "Handle parsing errors": "https://python.langchain.com/docs/modules/agents/how_to/handle_parsing_errors", "Running Agent as an Iterator": "https://python.langchain.com/docs/modules/agents/how_to/agent_iter", "Timeouts for agents": "https://python.langchain.com/docs/modules/agents/how_to/max_time_limit", "Streaming final agent output": "https://python.langchain.com/docs/modules/agents/how_to/streaming_stdout_final_only", "Add Memory to OpenAI Functions Agent": "https://python.langchain.com/docs/modules/agents/how_to/add_memory_openai_functions", "Cap the max number of iterations": "https://python.langchain.com/docs/modules/agents/how_to/max_iterations", "Custom functions with OpenAI Functions Agent": "https://python.langchain.com/docs/modules/agents/how_to/custom-functions-with-openai-functions-agent", "Async API": "https://python.langchain.com/docs/modules/agents/how_to/async_agent", "Use ToolKits with OpenAI Functions": "https://python.langchain.com/docs/modules/agents/how_to/use_toolkits_with_openai_functions", "Human input chat model": "https://python.langchain.com/docs/modules/model_io/models/chat/human_input_chat_model", "Fake LLM": "https://python.langchain.com/docs/modules/model_io/models/llms/fake_llm", "Tracking token usage": "https://python.langchain.com/docs/modules/model_io/models/llms/token_usage_tracking", "Human input LLM": "https://python.langchain.com/docs/modules/model_io/models/llms/human_input_llm"}, "AgentType": {"ChatGPT Plugins": "https://python.langchain.com/docs/integrations/tools/chatgpt_plugins", "Google Serper": "https://python.langchain.com/docs/integrations/providers/google_serper", "Human as a tool": "https://python.langchain.com/docs/integrations/tools/human_tools", "Yahoo Finance News": "https://python.langchain.com/docs/integrations/tools/yahoo_finance_news", "AWS Lambda": "https://python.langchain.com/docs/integrations/tools/awslambda", "Google Drive": "https://python.langchain.com/docs/integrations/tools/google_drive", "OpenWeatherMap": "https://python.langchain.com/docs/integrations/tools/openweathermap", "Search Tools": "https://python.langchain.com/docs/integrations/tools/search_tools", "Eleven Labs Text2Speech": "https://python.langchain.com/docs/integrations/tools/eleven_labs_tts", "Zapier Natural Language Actions": "https://python.langchain.com/docs/integrations/tools/zapier", "ArXiv": "https://python.langchain.com/docs/integrations/tools/arxiv", "Metaphor Search": "https://python.langchain.com/docs/integrations/tools/metaphor_search", "GraphQL": "https://python.langchain.com/docs/integrations/tools/graphql", "Eden AI": "https://python.langchain.com/docs/integrations/tools/edenai_tools", "Shell (bash)": "https://python.langchain.com/docs/integrations/tools/bash", "Zep Memory": "https://python.langchain.com/docs/integrations/memory/zep_memory", "Xata chat memory": "https://python.langchain.com/docs/integrations/memory/xata_chat_message_history", "Dynamodb Chat Message History": "https://python.langchain.com/docs/integrations/memory/dynamodb_chat_message_history", "LLMonitor": "https://python.langchain.com/docs/integrations/callbacks/llmonitor", "Argilla": "https://python.langchain.com/docs/integrations/callbacks/argilla", "Streamlit": "https://python.langchain.com/docs/integrations/callbacks/.ipynb_checkpoints/streamlit-checkpoint", "Aim": "https://python.langchain.com/docs/integrations/providers/aim_tracking", "Weights & Biases": "https://python.langchain.com/docs/integrations/providers/wandb_tracking", "MLflow": "https://python.langchain.com/docs/integrations/providers/mlflow_tracking", "Flyte": "https://python.langchain.com/docs/integrations/providers/flyte", "WandB Tracing": "https://python.langchain.com/docs/integrations/providers/wandb_tracing", "ClearML": "https://python.langchain.com/docs/integrations/providers/clearml_tracking", "Log, Trace, and Monitor": "https://python.langchain.com/docs/integrations/providers/portkey/logging_tracing_portkey", "Portkey": "https://python.langchain.com/docs/integrations/providers/portkey/index", "CSV": "https://python.langchain.com/docs/integrations/toolkits/csv", "Jira": "https://python.langchain.com/docs/integrations/toolkits/jira", "Document Comparison": "https://python.langchain.com/docs/integrations/toolkits/document_comparison_toolkit", "Python": "https://python.langchain.com/docs/integrations/toolkits/python", "Azure Cognitive Services": "https://python.langchain.com/docs/integrations/toolkits/azure_cognitive_services", "SQL Database": "https://python.langchain.com/docs/integrations/toolkits/sql_database", "Natural Language APIs": "https://python.langchain.com/docs/integrations/toolkits/openapi_nla", "Gmail": "https://python.langchain.com/docs/integrations/toolkits/gmail", "Airbyte Question Answering": "https://python.langchain.com/docs/integrations/toolkits/airbyte_structured_qa", "Github": "https://python.langchain.com/docs/integrations/toolkits/github", "Google Drive tool": "https://python.langchain.com/docs/integrations/toolkits/google_drive", "AINetwork": "https://python.langchain.com/docs/integrations/toolkits/ainetwork", "PlayWright Browser": "https://python.langchain.com/docs/integrations/toolkits/playwright", "Office365": "https://python.langchain.com/docs/integrations/toolkits/office365", "Pandas Dataframe": "https://python.langchain.com/docs/integrations/toolkits/pandas", "MultiOn": "https://python.langchain.com/docs/integrations/toolkits/multion", "Amadeus": "https://python.langchain.com/docs/integrations/toolkits/amadeus", "Gitlab": "https://python.langchain.com/docs/integrations/toolkits/gitlab", "Bittensor": "https://python.langchain.com/docs/integrations/llms/bittensor", "Amazon API Gateway": "https://python.langchain.com/docs/integrations/llms/amazon_api_gateway", "Debugging": "https://python.langchain.com/docs/guides/debugging", "LangSmith Walkthrough": "https://python.langchain.com/docs/guides/langsmith/walkthrough", "Hugging Face Prompt Injection Identification": "https://python.langchain.com/docs/guides/safety/hugging_face_prompt_injection", "Comparing Chain Outputs": "https://python.langchain.com/docs/guides/evaluation/examples/comparisons", "Agent Trajectory": "https://python.langchain.com/docs/guides/evaluation/trajectory/trajectory_eval", "Agents": "https://python.langchain.com/docs/use_cases/more/agents/agents", "Multi-modal outputs: Image & Text": "https://python.langchain.com/docs/use_cases/more/agents/multi_modal/multi_modal_output_agent", "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/two_agent_debate_tools", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/qa_structured/sql", "SQL": "https://python.langchain.com/docs/use_cases/sql/sql", "Multiple callback handlers": "https://python.langchain.com/docs/modules/callbacks/multiple_callbacks", "Multi-Input Tools": "https://python.langchain.com/docs/modules/agents/tools/multi_input_tool", "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools", "Tool Input Schema": "https://python.langchain.com/docs/modules/agents/tools/tool_input_validation", "Human-in-the-loop Tool Validation": "https://python.langchain.com/docs/modules/agents/tools/human_approval", "Self-ask with search": "https://python.langchain.com/docs/modules/agents/agent_types/self_ask_with_search", "ReAct document store": "https://python.langchain.com/docs/modules/agents/agent_types/react_docstore", "OpenAI Multi Functions Agent": "https://python.langchain.com/docs/modules/agents/agent_types/openai_multi_functions_agent", "Combine agents and vector stores": "https://python.langchain.com/docs/modules/agents/how_to/agent_vectorstore", "Access intermediate steps": "https://python.langchain.com/docs/modules/agents/how_to/intermediate_steps", "Handle parsing errors": "https://python.langchain.com/docs/modules/agents/how_to/handle_parsing_errors", "Running Agent as an Iterator": "https://python.langchain.com/docs/modules/agents/how_to/agent_iter", "Timeouts for agents": "https://python.langchain.com/docs/modules/agents/how_to/max_time_limit", "Streaming final agent output": "https://python.langchain.com/docs/modules/agents/how_to/streaming_stdout_final_only", "Add Memory to OpenAI Functions Agent": "https://python.langchain.com/docs/modules/agents/how_to/add_memory_openai_functions", "Cap the max number of iterations": "https://python.langchain.com/docs/modules/agents/how_to/max_iterations", "Custom functions with OpenAI Functions Agent": "https://python.langchain.com/docs/modules/agents/how_to/custom-functions-with-openai-functions-agent", "Async API": "https://python.langchain.com/docs/modules/agents/how_to/async_agent", "Use ToolKits with OpenAI Functions": "https://python.langchain.com/docs/modules/agents/how_to/use_toolkits_with_openai_functions", "Human input chat model": "https://python.langchain.com/docs/modules/model_io/models/chat/human_input_chat_model", "Fake LLM": "https://python.langchain.com/docs/modules/model_io/models/llms/fake_llm", "Tracking token usage": "https://python.langchain.com/docs/modules/model_io/models/llms/token_usage_tracking", "Human input LLM": "https://python.langchain.com/docs/modules/model_io/models/llms/human_input_llm"}, "AIPluginTool": {"ChatGPT Plugins": "https://python.langchain.com/docs/integrations/tools/chatgpt_plugins"}, "DataForSeoAPIWrapper": {"DataForSeo": "https://python.langchain.com/docs/integrations/tools/dataforseo", "DataForSEO": "https://python.langchain.com/docs/integrations/providers/dataforseo"}, "Tool": {"DataForSeo": "https://python.langchain.com/docs/integrations/tools/dataforseo", "Google Serper": "https://python.langchain.com/docs/integrations/providers/google_serper", "SerpAPI": "https://python.langchain.com/docs/integrations/tools/serpapi", "Google Search": "https://python.langchain.com/docs/integrations/tools/google_search", "Zep Memory": "https://python.langchain.com/docs/integrations/memory/zep_memory", "Dynamodb Chat Message History": "https://python.langchain.com/docs/integrations/memory/dynamodb_chat_message_history", "SageMaker Tracking": "https://python.langchain.com/docs/integrations/providers/sagemaker_tracking", "Document Comparison": "https://python.langchain.com/docs/integrations/toolkits/document_comparison_toolkit", "Natural Language APIs": "https://python.langchain.com/docs/integrations/toolkits/openapi_nla", "Github": "https://python.langchain.com/docs/integrations/toolkits/github", "Bittensor": "https://python.langchain.com/docs/integrations/llms/bittensor", "Pydantic compatibility": "https://python.langchain.com/docs/guides/pydantic_compatibility", "Comparing Chain Outputs": "https://python.langchain.com/docs/guides/evaluation/examples/comparisons", "Agents": "https://python.langchain.com/docs/use_cases/more/agents/agents", "AutoGPT": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/autogpt", "BabyAGI with Tools": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/baby_agi_with_agent", "Plug-and-Plai": "https://python.langchain.com/docs/use_cases/more/agents/agents/custom_agent_with_plugin_retrieval_using_plugnplai", "Wikibase Agent": "https://python.langchain.com/docs/use_cases/more/agents/agents/wikibase_agent", "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/more/agents/agents/sales_agent_with_context", "Custom Agent with PlugIn Retrieval": "https://python.langchain.com/docs/use_cases/more/agents/agents/custom_agent_with_plugin_retrieval", "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/two_agent_debate_tools", "Message Memory in Agent backed by a database": "https://python.langchain.com/docs/modules/memory/agent_with_memory_in_db", "Memory in Agent": "https://python.langchain.com/docs/modules/memory/agent_with_memory", "Multi-Input Tools": "https://python.langchain.com/docs/modules/agents/tools/multi_input_tool", "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools", "Self-ask with search": "https://python.langchain.com/docs/modules/agents/agent_types/self_ask_with_search", "ReAct document store": "https://python.langchain.com/docs/modules/agents/agent_types/react_docstore", "OpenAI Multi Functions Agent": "https://python.langchain.com/docs/modules/agents/agent_types/openai_multi_functions_agent", "Combine agents and vector stores": "https://python.langchain.com/docs/modules/agents/how_to/agent_vectorstore", "Custom MRKL agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_mrkl_agent", "Handle parsing errors": "https://python.langchain.com/docs/modules/agents/how_to/handle_parsing_errors", "Shared memory across agents and tools": "https://python.langchain.com/docs/modules/agents/how_to/sharedmemory_for_tools", "Custom multi-action agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_multi_action_agent", "Running Agent as an Iterator": "https://python.langchain.com/docs/modules/agents/how_to/agent_iter", "Timeouts for agents": "https://python.langchain.com/docs/modules/agents/how_to/max_time_limit", "Add Memory to OpenAI Functions Agent": "https://python.langchain.com/docs/modules/agents/how_to/add_memory_openai_functions", "Cap the max number of iterations": "https://python.langchain.com/docs/modules/agents/how_to/max_iterations", "Custom agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent", "Use ToolKits with OpenAI Functions": "https://python.langchain.com/docs/modules/agents/how_to/use_toolkits_with_openai_functions", "Custom agent with tool retrieval": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent_with_tool_retrieval"}, "SearxSearchWrapper": {"SearxNG Search": "https://python.langchain.com/docs/integrations/tools/searx_search", "SearxNG Search API": "https://python.langchain.com/docs/integrations/providers/searx"}, "GoogleSerperAPIWrapper": {"Google Serper": "https://python.langchain.com/docs/integrations/providers/google_serper", "Retrieve as you generate with FLARE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/flare"}, "GooglePlacesTool": {"Google Places": "https://python.langchain.com/docs/integrations/tools/google_places"}, "HumanInputRun": {"Human as a tool": "https://python.langchain.com/docs/integrations/tools/human_tools", "!pip install bs4": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/marathon_times"}, "NucliaUnderstandingAPI": {"Nuclia Understanding": "https://python.langchain.com/docs/integrations/tools/nuclia", "Nuclia Understanding API document transformer": "https://python.langchain.com/docs/integrations/document_transformers/nuclia_transformer", "Nuclia Understanding API document loader": "https://python.langchain.com/docs/integrations/document_loaders/nuclia"}, "YahooFinanceNewsTool": {"Yahoo Finance News": "https://python.langchain.com/docs/integrations/tools/yahoo_finance_news"}, "TwilioAPIWrapper": {"Twilio": "https://python.langchain.com/docs/integrations/tools/twilio"}, "IFTTTWebhook": {"IFTTT WebHooks": "https://python.langchain.com/docs/integrations/tools/ifttt"}, "WikipediaQueryRun": {"Wikipedia": "https://python.langchain.com/docs/integrations/tools/wikipedia"}, "WikipediaAPIWrapper": {"Wikipedia": "https://python.langchain.com/docs/integrations/tools/wikipedia", "Zep Memory": "https://python.langchain.com/docs/integrations/memory/zep_memory"}, "AlphaVantageAPIWrapper": {"Alpha Vantage": "https://python.langchain.com/docs/integrations/tools/alpha_vantage"}, "TextRequestsWrapper": {"Requests": "https://python.langchain.com/docs/integrations/tools/requests", "JSON": "https://python.langchain.com/docs/integrations/toolkits/json", "OpenAPI": "https://python.langchain.com/docs/integrations/toolkits/openapi", "Tool Input Schema": "https://python.langchain.com/docs/modules/agents/tools/tool_input_validation"}, "OpenWeatherMapAPIWrapper": {"OpenWeatherMap": "https://python.langchain.com/docs/integrations/providers/openweathermap"}, "PubmedQueryRun": {"PubMed": "https://python.langchain.com/docs/integrations/tools/pubmed"}, "YouTubeSearchTool": {"YouTube": "https://python.langchain.com/docs/integrations/tools/youtube"}, "ElevenLabsText2SpeechTool": {"Eleven Labs Text2Speech": "https://python.langchain.com/docs/integrations/tools/eleven_labs_tts"}, "VectorstoreIndexCreator": {"Apify": "https://python.langchain.com/docs/integrations/tools/apify", "HuggingFace dataset": "https://python.langchain.com/docs/integrations/document_loaders/hugging_face_dataset", "Spreedly": "https://python.langchain.com/docs/integrations/document_loaders/spreedly", "Image captions": "https://python.langchain.com/docs/integrations/document_loaders/image_captions", "Figma": "https://python.langchain.com/docs/integrations/document_loaders/figma", "Apify Dataset": "https://python.langchain.com/docs/integrations/document_loaders/apify_dataset", "Iugu": "https://python.langchain.com/docs/integrations/document_loaders/iugu", "Stripe": "https://python.langchain.com/docs/integrations/document_loaders/stripe", "Modern Treasury": "https://python.langchain.com/docs/integrations/document_loaders/modern_treasury", "Question Answering": "https://python.langchain.com/docs/use_cases/question_answering/question_answering", "Multiple Retrieval Sources": "https://python.langchain.com/docs/use_cases/question_answering/how_to/multiple_retrieval"}, "ApifyWrapper": {"Apify": "https://python.langchain.com/docs/integrations/providers/apify"}, "ZapierToolkit": {"Zapier Natural Language Actions": "https://python.langchain.com/docs/integrations/tools/zapier"}, "ZapierNLAWrapper": {"Zapier Natural Language Actions": "https://python.langchain.com/docs/integrations/tools/zapier"}, "LLMChain": {"Zapier Natural Language Actions": "https://python.langchain.com/docs/integrations/tools/zapier", "Dall-E Image Generator": "https://python.langchain.com/docs/integrations/tools/dalle_image_generator", "Streamlit Chat Message History": "https://python.langchain.com/docs/integrations/memory/streamlit_chat_message_history", "Argilla": "https://python.langchain.com/docs/integrations/callbacks/argilla", "Comet": "https://python.langchain.com/docs/integrations/providers/comet_tracking", "Aim": "https://python.langchain.com/docs/integrations/providers/aim_tracking", "Weights & Biases": "https://python.langchain.com/docs/integrations/providers/wandb_tracking", "SageMaker Tracking": "https://python.langchain.com/docs/integrations/providers/sagemaker_tracking", "Rebuff": "https://python.langchain.com/docs/integrations/providers/rebuff", "MLflow": "https://python.langchain.com/docs/integrations/providers/mlflow_tracking", "Flyte": "https://python.langchain.com/docs/integrations/providers/flyte", "Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat", "Vectara Text Generation": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_text_generation", "Natural Language APIs": "https://python.langchain.com/docs/integrations/toolkits/openapi_nla", "JSON": "https://python.langchain.com/docs/integrations/toolkits/json", "Figma": "https://python.langchain.com/docs/integrations/document_loaders/figma", "Predibase": "https://python.langchain.com/docs/integrations/llms/predibase", "Eden AI": "https://python.langchain.com/docs/integrations/llms/edenai", "Azure ML": "https://python.langchain.com/docs/integrations/llms/azure_ml", "Removing logical fallacies from model output": "https://python.langchain.com/docs/guides/safety/logical_fallacy_chain", "Amazon Comprehend Moderation Chain": "https://python.langchain.com/docs/guides/safety/amazon_comprehend_chain", "Custom Trajectory Evaluator": "https://python.langchain.com/docs/guides/evaluation/trajectory/custom", "Custom Pairwise Evaluator": "https://python.langchain.com/docs/guides/evaluation/comparison/custom", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/apis", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/summarization", "Retrieve from vector stores directly": "https://python.langchain.com/docs/use_cases/question_answering/how_to/vector_db_text_generation", "Improve document indexing with HyDE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/hyde", "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa", "Multi-agent authoritarian speaker selection": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/multiagent_authoritarian", "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research", "Lost in the middle: The problem with long contexts": "https://python.langchain.com/docs/modules/data_connection/document_transformers/post_retrieval/long_context_reorder", "Memory in LLMChain": "https://python.langchain.com/docs/modules/memory/adding_memory", "Logging to file": "https://python.langchain.com/docs/modules/callbacks/filecallbackhandler", "XML Agent": "https://python.langchain.com/docs/modules/agents/agent_types/xml_agent", "Datetime parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/datetime", "Prompt pipelining": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/prompts_pipelining", "Connecting to a Feature Store": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/connecting_to_a_feature_store", "Router": "https://python.langchain.com/docs/modules/chains/foundational/router", "Transformation": "https://python.langchain.com/docs/modules/chains/foundational/transformation", "Async API": "https://python.langchain.com/docs/modules/chains/how_to/async_chain"}, "TransformChain": {"Zapier Natural Language Actions": "https://python.langchain.com/docs/integrations/tools/zapier", "Rebuff": "https://python.langchain.com/docs/integrations/providers/rebuff", "Transformation": "https://python.langchain.com/docs/modules/chains/foundational/transformation"}, "SimpleSequentialChain": {"Zapier Natural Language Actions": "https://python.langchain.com/docs/integrations/tools/zapier", "SageMaker Tracking": "https://python.langchain.com/docs/integrations/providers/sagemaker_tracking", "Rebuff": "https://python.langchain.com/docs/integrations/providers/rebuff", "Baseten": "https://python.langchain.com/docs/integrations/llms/baseten", "Predibase": "https://python.langchain.com/docs/integrations/llms/predibase", "Eden AI": "https://python.langchain.com/docs/integrations/llms/edenai", "Replicate": "https://python.langchain.com/docs/integrations/llms/replicate", "Transformation": "https://python.langchain.com/docs/modules/chains/foundational/transformation"}, "ZapierNLARunAction": {"Zapier Natural Language Actions": "https://python.langchain.com/docs/integrations/tools/zapier"}, "GoldenQueryAPIWrapper": {"Golden Query": "https://python.langchain.com/docs/integrations/tools/golden_query", "Golden": "https://python.langchain.com/docs/integrations/providers/golden"}, "ArxivAPIWrapper": {"ArXiv": "https://python.langchain.com/docs/integrations/tools/arxiv"}, "tool": {"Metaphor Search": "https://python.langchain.com/docs/integrations/tools/metaphor_search", "LLMonitor": "https://python.langchain.com/docs/integrations/callbacks/llmonitor", "JSONFormer": "https://python.langchain.com/docs/integrations/llms/jsonformer_experimental", "Agent Trajectory": "https://python.langchain.com/docs/guides/evaluation/trajectory/trajectory_eval", "Agents": "https://python.langchain.com/docs/expression_language/cookbook/agent", "!pip install bs4": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/marathon_times", "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools", "XML Agent": "https://python.langchain.com/docs/modules/agents/agent_types/xml_agent"}, "OpenAIFunctionsAgent": {"Metaphor Search": "https://python.langchain.com/docs/integrations/tools/metaphor_search", "LLMonitor": "https://python.langchain.com/docs/integrations/callbacks/llmonitor", "Conversational Retrieval Agent": "https://python.langchain.com/docs/use_cases/question_answering/how_to/conversational_retrieval_agents", "Agents": "https://python.langchain.com/docs/use_cases/more/agents/agents"}, "SystemMessage": {"Metaphor Search": "https://python.langchain.com/docs/integrations/tools/metaphor_search", "SQL Chat Message History": "https://python.langchain.com/docs/integrations/memory/sql_chat_message_history", "Anthropic": "https://python.langchain.com/docs/integrations/chat/anthropic", "\ud83d\ude85 LiteLLM": "https://python.langchain.com/docs/integrations/chat/litellm", "Konko": "https://python.langchain.com/docs/integrations/chat/konko", "OpenAI": "https://python.langchain.com/docs/integrations/chat/openai", "Google Cloud Platform Vertex AI PaLM ": "https://python.langchain.com/docs/integrations/chat/google_vertex_ai_palm", "JinaChat": "https://python.langchain.com/docs/integrations/chat/jinachat", "Anyscale": "https://python.langchain.com/docs/integrations/chat/anyscale", "LLMonitor": "https://python.langchain.com/docs/integrations/callbacks/llmonitor", "Context": "https://python.langchain.com/docs/integrations/callbacks/context", "Label Studio": "https://python.langchain.com/docs/integrations/callbacks/labelstudio", "MLflow AI Gateway": "https://python.langchain.com/docs/integrations/providers/mlflow_ai_gateway", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/chatbots", "Conversational Retrieval Agent": "https://python.langchain.com/docs/use_cases/question_answering/how_to/conversational_retrieval_agents", "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa", "Agents": "https://python.langchain.com/docs/use_cases/more/agents/agents", "CAMEL Role-Playing Autonomous Cooperative Agents": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/camel_role_playing", "Multi-Agent Simulated Environment: Petting Zoo": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/petting_zoo", "Multi-agent decentralized speaker selection": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/multiagent_bidding", "Multi-agent authoritarian speaker selection": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/multiagent_authoritarian", "Two-Player Dungeons & Dragons": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/two_player_dnd", "Multi-Player Dungeons & Dragons": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/multi_player_dnd", "Simulated Environment: Gymnasium": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/gymnasium", "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/two_agent_debate_tools", "Memory in LLMChain": "https://python.langchain.com/docs/modules/memory/adding_memory", "Use ToolKits with OpenAI Functions": "https://python.langchain.com/docs/modules/agents/how_to/use_toolkits_with_openai_functions", "Prompt pipelining": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/prompts_pipelining", "Using OpenAI functions": "https://python.langchain.com/docs/modules/chains/how_to/openai_functions"}, "AgentExecutor": {"Metaphor Search": "https://python.langchain.com/docs/integrations/tools/metaphor_search", "LLMonitor": "https://python.langchain.com/docs/integrations/callbacks/llmonitor", "Jina": "https://python.langchain.com/docs/integrations/providers/jina", "PowerBI Dataset": "https://python.langchain.com/docs/integrations/toolkits/powerbi", "SQL Database": "https://python.langchain.com/docs/integrations/toolkits/sql_database", "JSON": "https://python.langchain.com/docs/integrations/toolkits/json", "Bittensor": "https://python.langchain.com/docs/integrations/llms/bittensor", "Conversational Retrieval Agent": "https://python.langchain.com/docs/use_cases/question_answering/how_to/conversational_retrieval_agents", "Agents": "https://python.langchain.com/docs/expression_language/cookbook/agent", "BabyAGI with Tools": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/baby_agi_with_agent", "Plug-and-Plai": "https://python.langchain.com/docs/use_cases/more/agents/agents/custom_agent_with_plugin_retrieval_using_plugnplai", "Wikibase Agent": "https://python.langchain.com/docs/use_cases/more/agents/agents/wikibase_agent", "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/more/agents/agents/sales_agent_with_context", "Custom Agent with PlugIn Retrieval": "https://python.langchain.com/docs/use_cases/more/agents/agents/custom_agent_with_plugin_retrieval", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/qa_structured/sql", "SQL": "https://python.langchain.com/docs/use_cases/sql/sql", "Message Memory in Agent backed by a database": "https://python.langchain.com/docs/modules/memory/agent_with_memory_in_db", "Memory in Agent": "https://python.langchain.com/docs/modules/memory/agent_with_memory", "XML Agent": "https://python.langchain.com/docs/modules/agents/agent_types/xml_agent", "Custom MRKL agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_mrkl_agent", "Shared memory across agents and tools": "https://python.langchain.com/docs/modules/agents/how_to/sharedmemory_for_tools", "Custom multi-action agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_multi_action_agent", "Running Agent as an Iterator": "https://python.langchain.com/docs/modules/agents/how_to/agent_iter", "Custom agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent", "Custom agent with tool retrieval": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent_with_tool_retrieval"}, "MetaphorSearchAPIWrapper": {"Metaphor Search": "https://python.langchain.com/docs/integrations/tools/metaphor_search"}, "PlayWrightBrowserToolkit": {"Metaphor Search": "https://python.langchain.com/docs/integrations/tools/metaphor_search", "PlayWright Browser": "https://python.langchain.com/docs/integrations/toolkits/playwright"}, "create_async_playwright_browser": {"Metaphor Search": "https://python.langchain.com/docs/integrations/tools/metaphor_search", "PlayWright Browser": "https://python.langchain.com/docs/integrations/toolkits/playwright"}, "MetaphorSearchResults": {"Metaphor Search": "https://python.langchain.com/docs/integrations/tools/metaphor_search"}, "SerpAPIWrapper": {"SerpAPI": "https://python.langchain.com/docs/integrations/providers/serpapi", "Bittensor": "https://python.langchain.com/docs/integrations/llms/bittensor", "AutoGPT": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/autogpt"}, "GraphQLAPIWrapper": {"GraphQL": "https://python.langchain.com/docs/integrations/tools/graphql"}, "DuckDuckGoSearchRun": {"DuckDuckGo Search": "https://python.langchain.com/docs/integrations/tools/ddg", "Github": "https://python.langchain.com/docs/integrations/toolkits/github", "!pip install bs4": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/marathon_times", "Using tools": "https://python.langchain.com/docs/expression_language/cookbook/tools"}, "DuckDuckGoSearchResults": {"DuckDuckGo Search": "https://python.langchain.com/docs/integrations/tools/ddg"}, "DuckDuckGoSearchAPIWrapper": {"DuckDuckGo Search": "https://python.langchain.com/docs/integrations/tools/ddg"}, "ConversationBufferMemory": {"Gradio": "https://python.langchain.com/docs/integrations/tools/gradio_tools", "SceneXplain": "https://python.langchain.com/docs/integrations/tools/sceneXplain", "Xata chat memory": "https://python.langchain.com/docs/integrations/memory/xata_chat_message_history", "Streamlit Chat Message History": "https://python.langchain.com/docs/integrations/memory/streamlit_chat_message_history", "Dynamodb Chat Message History": "https://python.langchain.com/docs/integrations/memory/dynamodb_chat_message_history", "Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat", "Bittensor": "https://python.langchain.com/docs/integrations/llms/bittensor", "Bedrock": "https://python.langchain.com/docs/integrations/llms/bedrock", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/chatbots", "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa", "Agents": "https://python.langchain.com/docs/use_cases/more/agents/agents", "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/two_agent_debate_tools", "Message Memory in Agent backed by a database": "https://python.langchain.com/docs/modules/memory/agent_with_memory_in_db", "Memory in the Multi-Input Chain": "https://python.langchain.com/docs/modules/memory/adding_memory_chain_multiple_inputs", "Memory in LLMChain": "https://python.langchain.com/docs/modules/memory/adding_memory", "Multiple Memory classes": "https://python.langchain.com/docs/modules/memory/multiple_memory", "Customizing Conversational Memory": "https://python.langchain.com/docs/modules/memory/conversational_customization", "Memory in Agent": "https://python.langchain.com/docs/modules/memory/agent_with_memory", "Shared memory across agents and tools": "https://python.langchain.com/docs/modules/agents/how_to/sharedmemory_for_tools", "Add Memory to OpenAI Functions Agent": "https://python.langchain.com/docs/modules/agents/how_to/add_memory_openai_functions", "First we add a step to load memory": "https://python.langchain.com/docs/expression_language/cookbook/retrieval", "Adding memory": "https://python.langchain.com/docs/expression_language/cookbook/memory"}, "SceneXplainTool": {"SceneXplain": "https://python.langchain.com/docs/integrations/tools/sceneXplain"}, "WolframAlphaAPIWrapper": {"Wolfram Alpha": "https://python.langchain.com/docs/integrations/providers/wolfram_alpha"}, "load_huggingface_tool": {"HuggingFace Hub Tools": "https://python.langchain.com/docs/integrations/tools/huggingface_tools"}, "EdenAiSpeechToTextTool": {"Eden AI": "https://python.langchain.com/docs/integrations/tools/edenai_tools"}, "EdenAiTextToSpeechTool": {"Eden AI": "https://python.langchain.com/docs/integrations/tools/edenai_tools"}, "EdenAiExplicitImageTool": {"Eden AI": "https://python.langchain.com/docs/integrations/tools/edenai_tools"}, "EdenAiObjectDetectionTool": {"Eden AI": "https://python.langchain.com/docs/integrations/tools/edenai_tools"}, "EdenAiParsingIDTool": {"Eden AI": "https://python.langchain.com/docs/integrations/tools/edenai_tools"}, "EdenAiParsingInvoiceTool": {"Eden AI": "https://python.langchain.com/docs/integrations/tools/edenai_tools"}, "EdenAiTextModerationTool": {"Eden AI": "https://python.langchain.com/docs/integrations/tools/edenai_tools"}, "EdenAI": {"Eden AI": "https://python.langchain.com/docs/integrations/llms/edenai"}, "GoogleSearchAPIWrapper": {"Google Search": "https://python.langchain.com/docs/integrations/providers/google_search", "Bittensor": "https://python.langchain.com/docs/integrations/llms/bittensor", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/web_scraping", "Agents": "https://python.langchain.com/docs/use_cases/more/agents/agents", "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research", "Message Memory in Agent backed by a database": "https://python.langchain.com/docs/modules/memory/agent_with_memory_in_db", "Memory in Agent": "https://python.langchain.com/docs/modules/memory/agent_with_memory", "Shared memory across agents and tools": "https://python.langchain.com/docs/modules/agents/how_to/sharedmemory_for_tools"}, "BingSearchAPIWrapper": {"Bing Search": "https://python.langchain.com/docs/integrations/tools/bing_search"}, "DallEAPIWrapper": {"Dall-E Image Generator": "https://python.langchain.com/docs/integrations/tools/dalle_image_generator"}, "ShellTool": {"Shell (bash)": "https://python.langchain.com/docs/integrations/tools/bash", "Human-in-the-loop Tool Validation": "https://python.langchain.com/docs/modules/agents/tools/human_approval"}, "ReadFileTool": {"File System": "https://python.langchain.com/docs/integrations/tools/filesystem", "AutoGPT": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/autogpt", "!pip install bs4": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/marathon_times"}, "CopyFileTool": {"File System": "https://python.langchain.com/docs/integrations/tools/filesystem"}, "DeleteFileTool": {"File System": "https://python.langchain.com/docs/integrations/tools/filesystem"}, "MoveFileTool": {"File System": "https://python.langchain.com/docs/integrations/tools/filesystem", "Tools as OpenAI Functions": "https://python.langchain.com/docs/modules/agents/tools/tools_as_openai_functions"}, "WriteFileTool": {"File System": "https://python.langchain.com/docs/integrations/tools/filesystem", "AutoGPT": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/autogpt", "!pip install bs4": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/marathon_times"}, "ListDirectoryTool": {"File System": "https://python.langchain.com/docs/integrations/tools/filesystem"}, "FileManagementToolkit": {"File System": "https://python.langchain.com/docs/integrations/tools/filesystem"}, "BraveSearch": {"Brave Search": "https://python.langchain.com/docs/integrations/providers/brave_search"}, "RedisChatMessageHistory": {"Redis Chat Message History": "https://python.langchain.com/docs/integrations/memory/redis_chat_message_history", "Message Memory in Agent backed by a database": "https://python.langchain.com/docs/modules/memory/agent_with_memory_in_db"}, "ConversationChain": {"Entity Memory with SQLite storage": "https://python.langchain.com/docs/integrations/memory/entity_memory_with_sqlite", "Figma": "https://python.langchain.com/docs/integrations/document_loaders/figma", "Bedrock": "https://python.langchain.com/docs/integrations/llms/bedrock", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/chatbots", "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/two_agent_debate_tools", "Multiple Memory classes": "https://python.langchain.com/docs/modules/memory/multiple_memory", "Customizing Conversational Memory": "https://python.langchain.com/docs/modules/memory/conversational_customization", "Conversation Knowledge Graph": "https://python.langchain.com/docs/modules/memory/types/kg", "Conversation Token Buffer": "https://python.langchain.com/docs/modules/memory/types/token_buffer", "Conversation Summary Buffer": "https://python.langchain.com/docs/modules/memory/types/summary_buffer", "Router": "https://python.langchain.com/docs/modules/chains/foundational/router"}, "ConversationEntityMemory": {"Entity Memory with SQLite storage": "https://python.langchain.com/docs/integrations/memory/entity_memory_with_sqlite"}, "SQLiteEntityStore": {"Entity Memory with SQLite storage": "https://python.langchain.com/docs/integrations/memory/entity_memory_with_sqlite"}, "ENTITY_MEMORY_CONVERSATION_TEMPLATE": {"Entity Memory with SQLite storage": "https://python.langchain.com/docs/integrations/memory/entity_memory_with_sqlite"}, "PostgresChatMessageHistory": {"Postgres Chat Message History": "https://python.langchain.com/docs/integrations/memory/postgres_chat_message_history"}, "MomentoChatMessageHistory": {"Momento Chat Message History": "https://python.langchain.com/docs/integrations/memory/momento_chat_message_history"}, "MongoDBChatMessageHistory": {"Mongodb Chat Message History": "https://python.langchain.com/docs/integrations/memory/mongodb_chat_message_history"}, "XataChatMessageHistory": {"Xata chat memory": "https://python.langchain.com/docs/integrations/memory/xata_chat_message_history"}, "XataVectorStore": {"Xata chat memory": "https://python.langchain.com/docs/integrations/memory/xata_chat_message_history", "Xata": "https://python.langchain.com/docs/integrations/vectorstores/xata"}, "create_retriever_tool": {"Xata chat memory": "https://python.langchain.com/docs/integrations/memory/xata_chat_message_history", "Conversational Retrieval Agent": "https://python.langchain.com/docs/use_cases/question_answering/how_to/conversational_retrieval_agents", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/qa_structured/sql", "SQL": "https://python.langchain.com/docs/use_cases/sql/sql"}, "CassandraChatMessageHistory": {"Cassandra Chat Message History": "https://python.langchain.com/docs/integrations/memory/cassandra_chat_message_history", "Cassandra": "https://python.langchain.com/docs/integrations/providers/cassandra"}, "SQLChatMessageHistory": {"SQL Chat Message History": "https://python.langchain.com/docs/integrations/memory/sql_chat_message_history"}, "BaseMessage": {"SQL Chat Message History": "https://python.langchain.com/docs/integrations/memory/sql_chat_message_history", "CAMEL Role-Playing Autonomous Cooperative Agents": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/camel_role_playing", "Multi-agent decentralized speaker selection": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/multiagent_bidding", "Multi-agent authoritarian speaker selection": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/multiagent_authoritarian", "Multi-Player Dungeons & Dragons": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/multi_player_dnd", "Simulated Environment: Gymnasium": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/gymnasium", "Agent Debates with Tools": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/two_agent_debate_tools"}, "BaseMessageConverter": {"SQL Chat Message History": "https://python.langchain.com/docs/integrations/memory/sql_chat_message_history"}, "MotorheadMemory": {"Mot\u00f6rhead Memory": "https://python.langchain.com/docs/integrations/memory/motorhead_memory", "Mot\u00f6rhead Memory (Managed)": "https://python.langchain.com/docs/integrations/memory/motorhead_memory_managed"}, "StreamlitChatMessageHistory": {"Streamlit Chat Message History": "https://python.langchain.com/docs/integrations/memory/streamlit_chat_message_history"}, "DynamoDBChatMessageHistory": {"Dynamodb Chat Message History": "https://python.langchain.com/docs/integrations/memory/dynamodb_chat_message_history"}, "PythonREPL": {"Dynamodb Chat Message History": "https://python.langchain.com/docs/integrations/memory/dynamodb_chat_message_history", "Python": "https://python.langchain.com/docs/integrations/toolkits/python", "Code writing": "https://python.langchain.com/docs/expression_language/cookbook/code_writing"}, "RocksetChatMessageHistory": {"Rockset Chat Message History": "https://python.langchain.com/docs/integrations/memory/rockset_chat_message_history"}, "AzureMLChatOnlineEndpoint": {"AzureML Chat Online Endpoint": "https://python.langchain.com/docs/integrations/chat/azureml_chat_endpoint"}, "LlamaContentFormatter": {"AzureML Chat Online Endpoint": "https://python.langchain.com/docs/integrations/chat/azureml_chat_endpoint"}, "ChatAnthropic": {"Anthropic": "https://python.langchain.com/docs/integrations/chat/anthropic", "Log10": "https://python.langchain.com/docs/integrations/providers/log10", "PlayWright Browser": "https://python.langchain.com/docs/integrations/toolkits/playwright", "Fallbacks": "https://python.langchain.com/docs/guides/fallbacks", "Agent Trajectory": "https://python.langchain.com/docs/guides/evaluation/trajectory/trajectory_eval", "Custom Pairwise Evaluator": "https://python.langchain.com/docs/guides/evaluation/comparison/custom", "Pairwise String Comparison": "https://python.langchain.com/docs/guides/evaluation/comparison/pairwise_string", "Criteria Evaluation": "https://python.langchain.com/docs/guides/evaluation/string/criteria_eval_chain", "XML Agent": "https://python.langchain.com/docs/modules/agents/agent_types/xml_agent", "Few-shot examples for chat models": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot_examples_chat", "Agents": "https://python.langchain.com/docs/expression_language/cookbook/agent"}, "SystemMessagePromptTemplate": {"Anthropic": "https://python.langchain.com/docs/integrations/chat/anthropic", "\ud83d\ude85 LiteLLM": "https://python.langchain.com/docs/integrations/chat/litellm", "Konko": "https://python.langchain.com/docs/integrations/chat/konko", "OpenAI": "https://python.langchain.com/docs/integrations/chat/openai", "Google Cloud Platform Vertex AI PaLM ": "https://python.langchain.com/docs/integrations/chat/google_vertex_ai_palm", "JinaChat": "https://python.langchain.com/docs/integrations/chat/jinachat", "Figma": "https://python.langchain.com/docs/integrations/document_loaders/figma", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/chatbots", "CAMEL Role-Playing Autonomous Cooperative Agents": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/camel_role_playing", "Code writing": "https://python.langchain.com/docs/expression_language/cookbook/code_writing"}, "AIMessagePromptTemplate": {"Anthropic": "https://python.langchain.com/docs/integrations/chat/anthropic", "\ud83d\ude85 LiteLLM": "https://python.langchain.com/docs/integrations/chat/litellm", "Konko": "https://python.langchain.com/docs/integrations/chat/konko", "OpenAI": "https://python.langchain.com/docs/integrations/chat/openai", "JinaChat": "https://python.langchain.com/docs/integrations/chat/jinachat", "Figma": "https://python.langchain.com/docs/integrations/document_loaders/figma"}, "HumanMessagePromptTemplate": {"Anthropic": "https://python.langchain.com/docs/integrations/chat/anthropic", "\ud83d\ude85 LiteLLM": "https://python.langchain.com/docs/integrations/chat/litellm", "Konko": "https://python.langchain.com/docs/integrations/chat/konko", "OpenAI": "https://python.langchain.com/docs/integrations/chat/openai", "Google Cloud Platform Vertex AI PaLM ": "https://python.langchain.com/docs/integrations/chat/google_vertex_ai_palm", "JinaChat": "https://python.langchain.com/docs/integrations/chat/jinachat", "Context": "https://python.langchain.com/docs/integrations/callbacks/context", "Figma": "https://python.langchain.com/docs/integrations/document_loaders/figma", "Fireworks": "https://python.langchain.com/docs/integrations/llms/fireworks", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/extraction", "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa", "CAMEL Role-Playing Autonomous Cooperative Agents": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/camel_role_playing", "Multi-agent authoritarian speaker selection": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/multiagent_authoritarian", "Memory in LLMChain": "https://python.langchain.com/docs/modules/memory/adding_memory", "Retry parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/retry", "Pydantic (JSON) parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/pydantic", "Prompt pipelining": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/prompts_pipelining", "Using OpenAI functions": "https://python.langchain.com/docs/modules/chains/how_to/openai_functions", "Code writing": "https://python.langchain.com/docs/expression_language/cookbook/code_writing"}, "CallbackManager": {"Anthropic": "https://python.langchain.com/docs/integrations/chat/anthropic", "\ud83d\ude85 LiteLLM": "https://python.langchain.com/docs/integrations/chat/litellm", "Ollama": "https://python.langchain.com/docs/integrations/llms/ollama", "Llama.cpp": "https://python.langchain.com/docs/integrations/llms/llamacpp", "Titan Takeoff": "https://python.langchain.com/docs/integrations/llms/titan_takeoff", "Run LLMs locally": "https://python.langchain.com/docs/guides/local_llms", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/code_understanding", "Use local LLMs": "https://python.langchain.com/docs/use_cases/question_answering/how_to/local_retrieval_qa", "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research"}, "StreamingStdOutCallbackHandler": {"Anthropic": "https://python.langchain.com/docs/integrations/chat/anthropic", "\ud83d\ude85 LiteLLM": "https://python.langchain.com/docs/integrations/chat/litellm", "Ollama": "https://python.langchain.com/docs/integrations/llms/ollama", "GPT4All": "https://python.langchain.com/docs/integrations/llms/gpt4all", "Arthur": "https://python.langchain.com/docs/integrations/providers/arthur_tracking", "Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat", "TextGen": "https://python.langchain.com/docs/integrations/llms/textgen", "Llama.cpp": "https://python.langchain.com/docs/integrations/llms/llamacpp", "Titan Takeoff": "https://python.langchain.com/docs/integrations/llms/titan_takeoff", "Eden AI": "https://python.langchain.com/docs/integrations/llms/edenai", "C Transformers": "https://python.langchain.com/docs/integrations/llms/ctransformers", "Huggingface TextGen Inference": "https://python.langchain.com/docs/integrations/llms/huggingface_textgen_inference", "Replicate": "https://python.langchain.com/docs/integrations/llms/replicate", "Run LLMs locally": "https://python.langchain.com/docs/guides/local_llms", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/code_understanding", "Use local LLMs": "https://python.langchain.com/docs/use_cases/question_answering/how_to/local_retrieval_qa", "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research"}, "ChatLiteLLM": {"\ud83d\ude85 LiteLLM": "https://python.langchain.com/docs/integrations/chat/litellm"}, "create_tagging_chain": {"Llama API": "https://python.langchain.com/docs/integrations/chat/llama_api", "Anthropic Functions": "https://python.langchain.com/docs/integrations/chat/anthropic_functions", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/tagging"}, "ChatKonko": {"Konko": "https://python.langchain.com/docs/integrations/chat/konko"}, "ChatVertexAI": {"Google Cloud Platform Vertex AI PaLM ": "https://python.langchain.com/docs/integrations/chat/google_vertex_ai_palm"}, "BedrockChat": {"Bedrock Chat": "https://python.langchain.com/docs/integrations/chat/bedrock"}, "JinaChat": {"JinaChat": "https://python.langchain.com/docs/integrations/chat/jinachat"}, "ChatOllama": {"Ollama": "https://python.langchain.com/docs/integrations/chat/ollama"}, "LLMResult": {"Ollama": "https://python.langchain.com/docs/integrations/llms/ollama", "Async callbacks": "https://python.langchain.com/docs/modules/callbacks/async_callbacks"}, "BaseCallbackHandler": {"Ollama": "https://python.langchain.com/docs/integrations/llms/ollama", "Custom callback handlers": "https://python.langchain.com/docs/modules/callbacks/custom_callbacks", "Multiple callback handlers": "https://python.langchain.com/docs/modules/callbacks/multiple_callbacks", "Async callbacks": "https://python.langchain.com/docs/modules/callbacks/async_callbacks", "Streaming final agent output": "https://python.langchain.com/docs/modules/agents/how_to/streaming_stdout_final_only"}, "AzureChatOpenAI": {"Azure": "https://python.langchain.com/docs/integrations/chat/azure_chat_openai", "Azure OpenAI": "https://python.langchain.com/docs/integrations/providers/azure_openai"}, "get_openai_callback": {"Azure": "https://python.langchain.com/docs/integrations/chat/azure_chat_openai", "Token counting": "https://python.langchain.com/docs/modules/callbacks/token_counting", "Tracking token usage": "https://python.langchain.com/docs/modules/model_io/models/llms/token_usage_tracking", "Run arbitrary functions": "https://python.langchain.com/docs/expression_language/how_to/functions"}, "QianfanChatEndpoint": {"Baidu Qianfan": "https://python.langchain.com/docs/integrations/chat/baidu_qianfan_endpoint"}, "ErnieBotChat": {"ERNIE-Bot Chat": "https://python.langchain.com/docs/integrations/chat/ernie"}, "PromptLayerChatOpenAI": {"PromptLayer ChatOpenAI": "https://python.langchain.com/docs/integrations/chat/promptlayer_chatopenai"}, "ChatAnyscale": {"Anyscale": "https://python.langchain.com/docs/integrations/chat/anyscale"}, "create_extraction_chain": {"Anthropic Functions": "https://python.langchain.com/docs/integrations/chat/anthropic_functions", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/extraction"}, "DeepEvalCallbackHandler": {"Confident": "https://python.langchain.com/docs/integrations/callbacks/confident"}, "CharacterTextSplitter": {"Confident": "https://python.langchain.com/docs/integrations/callbacks/confident", "Hugging Face": "https://python.langchain.com/docs/integrations/providers/huggingface", "OpenAI": "https://python.langchain.com/docs/integrations/providers/openai", "Elasticsearch": "https://python.langchain.com/docs/integrations/vectorstores/elasticsearch", "Vectara Text Generation": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_text_generation", "Document Comparison": "https://python.langchain.com/docs/integrations/toolkits/document_comparison_toolkit", "Vectorstore": "https://python.langchain.com/docs/integrations/toolkits/vectorstore", "LanceDB": "https://python.langchain.com/docs/integrations/vectorstores/lancedb", "sqlite-vss": "https://python.langchain.com/docs/integrations/vectorstores/sqlitevss", "Weaviate": "https://python.langchain.com/docs/integrations/vectorstores/weaviate", "DashVector": "https://python.langchain.com/docs/integrations/vectorstores/dashvector", "ScaNN": "https://python.langchain.com/docs/integrations/vectorstores/scann", "Xata": "https://python.langchain.com/docs/integrations/vectorstores/xata", "Vectara": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/vectara_self_query", "PGVector": "https://python.langchain.com/docs/integrations/vectorstores/pgvector", "Rockset": "https://python.langchain.com/docs/integrations/vectorstores/rockset", "DingoDB": "https://python.langchain.com/docs/integrations/vectorstores/dingo", "Zilliz": "https://python.langchain.com/docs/integrations/vectorstores/zilliz", "SingleStoreDB": "https://python.langchain.com/docs/integrations/vectorstores/singlestoredb", "Annoy": "https://python.langchain.com/docs/integrations/vectorstores/annoy", "Typesense": "https://python.langchain.com/docs/integrations/vectorstores/typesense", "Activeloop Deep Lake": "https://python.langchain.com/docs/integrations/vectorstores/activeloop_deeplake", "Neo4j Vector Index": "https://python.langchain.com/docs/integrations/vectorstores/neo4jvector", "Tair": "https://python.langchain.com/docs/integrations/vectorstores/tair", "Chroma": "https://python.langchain.com/docs/integrations/vectorstores/chroma", "Alibaba Cloud OpenSearch": "https://python.langchain.com/docs/integrations/vectorstores/alibabacloud_opensearch", "Baidu Cloud VectorSearch": "https://python.langchain.com/docs/integrations/vectorstores/baiducloud_vector_search", "StarRocks": "https://python.langchain.com/docs/integrations/vectorstores/starrocks", "scikit-learn": "https://python.langchain.com/docs/integrations/vectorstores/sklearn", "Tencent Cloud VectorDB": "https://python.langchain.com/docs/integrations/vectorstores/tencentvectordb", "DocArray HnswSearch": "https://python.langchain.com/docs/integrations/vectorstores/docarray_hnsw", "MyScale": "https://python.langchain.com/docs/integrations/vectorstores/myscale", "ClickHouse": "https://python.langchain.com/docs/integrations/vectorstores/clickhouse", "Qdrant": "https://python.langchain.com/docs/integrations/vectorstores/qdrant", "Tigris": "https://python.langchain.com/docs/integrations/vectorstores/tigris", "AwaDB": "https://python.langchain.com/docs/integrations/vectorstores/awadb", "Supabase (Postgres)": "https://python.langchain.com/docs/integrations/vectorstores/supabase", "OpenSearch": "https://python.langchain.com/docs/integrations/vectorstores/opensearch", "Pinecone": "https://python.langchain.com/docs/integrations/vectorstores/pinecone", "BagelDB": "https://python.langchain.com/docs/integrations/vectorstores/bageldb", "Azure Cognitive Search": "https://python.langchain.com/docs/integrations/vectorstores/azuresearch", "Cassandra": "https://python.langchain.com/docs/integrations/vectorstores/cassandra", "USearch": "https://python.langchain.com/docs/integrations/vectorstores/usearch", "Milvus": "https://python.langchain.com/docs/integrations/vectorstores/milvus", "Marqo": "https://python.langchain.com/docs/integrations/vectorstores/marqo", "DocArray InMemorySearch": "https://python.langchain.com/docs/integrations/vectorstores/docarray_in_memory", "Postgres Embedding": "https://python.langchain.com/docs/integrations/vectorstores/pgembedding", "Faiss": "https://python.langchain.com/docs/integrations/vectorstores/faiss", "Epsilla": "https://python.langchain.com/docs/integrations/vectorstores/epsilla", "AnalyticDB": "https://python.langchain.com/docs/integrations/vectorstores/analyticdb", "Hologres": "https://python.langchain.com/docs/integrations/vectorstores/hologres", "MongoDB Atlas": "https://python.langchain.com/docs/integrations/vectorstores/mongodb_atlas", "Meilisearch": "https://python.langchain.com/docs/integrations/vectorstores/meilisearch", "Figma": "https://python.langchain.com/docs/integrations/document_loaders/figma", "Psychic": "https://python.langchain.com/docs/integrations/document_loaders/psychic", "Manifest": "https://python.langchain.com/docs/integrations/llms/manifest", "LLM Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/summarization", "Conversational Retrieval Agent": "https://python.langchain.com/docs/use_cases/question_answering/how_to/conversational_retrieval_agents", "Retrieve from vector stores directly": "https://python.langchain.com/docs/use_cases/question_answering/how_to/vector_db_text_generation", "Improve document indexing with HyDE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/hyde", "Analysis of Twitter the-algorithm source code with LangChain, GPT4 and Activeloop's Deep Lake": "https://python.langchain.com/docs/use_cases/question_answering/how_to/code/twitter-the-algorithm-analysis-deeplake", "Use LangChain, GPT and Activeloop's Deep Lake to work with code base": "https://python.langchain.com/docs/use_cases/question_answering/how_to/code/code-analysis-deeplake", "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa", "QA using Activeloop's DeepLake": "https://python.langchain.com/docs/use_cases/question_answering/integrations/semantic-search-over-chat", "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/more/agents/agents/sales_agent_with_context", "Indexing": "https://python.langchain.com/docs/modules/data_connection/indexing", "Caching": "https://python.langchain.com/docs/modules/data_connection/text_embedding/caching_embeddings", "Split by tokens ": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/split_by_token", "Memory in the Multi-Input Chain": "https://python.langchain.com/docs/modules/memory/adding_memory_chain_multiple_inputs", "Combine agents and vector stores": "https://python.langchain.com/docs/modules/agents/how_to/agent_vectorstore", "Loading from LangChainHub": "https://python.langchain.com/docs/modules/chains/how_to/from_hub"}, "LLMonitorCallbackHandler": {"LLMonitor": "https://python.langchain.com/docs/integrations/callbacks/llmonitor"}, "ContextCallbackHandler": {"Context": "https://python.langchain.com/docs/integrations/callbacks/context"}, "LabelStudioCallbackHandler": {"Label Studio": "https://python.langchain.com/docs/integrations/callbacks/labelstudio"}, "ArgillaCallbackHandler": {"Argilla": "https://python.langchain.com/docs/integrations/providers/argilla"}, "StdOutCallbackHandler": {"Argilla": "https://python.langchain.com/docs/integrations/callbacks/argilla", "Comet": "https://python.langchain.com/docs/integrations/providers/comet_tracking", "Aim": "https://python.langchain.com/docs/integrations/providers/aim_tracking", "Weights & Biases": "https://python.langchain.com/docs/integrations/providers/wandb_tracking", "ClearML": "https://python.langchain.com/docs/integrations/providers/clearml_tracking", "OpaquePrompts": "https://python.langchain.com/docs/integrations/llms/opaqueprompts", "Vector SQL Retriever with MyScale": "https://python.langchain.com/docs/use_cases/qa_structured/integrations/myscale_vector_sql", "Async API": "https://python.langchain.com/docs/modules/agents/how_to/async_agent", "Custom chain": "https://python.langchain.com/docs/modules/chains/how_to/custom_chain"}, "PromptLayerCallbackHandler": {"PromptLayer": "https://python.langchain.com/docs/integrations/callbacks/promptlayer"}, "GPT4All": {"PromptLayer": "https://python.langchain.com/docs/integrations/callbacks/promptlayer", "GPT4All": "https://python.langchain.com/docs/integrations/llms/gpt4all", "Run LLMs locally": "https://python.langchain.com/docs/guides/local_llms", "Use local LLMs": "https://python.langchain.com/docs/use_cases/question_answering/how_to/local_retrieval_qa"}, "StreamlitCallbackHandler": {"Streamlit": "https://python.langchain.com/docs/integrations/callbacks/.ipynb_checkpoints/streamlit-checkpoint", "GPT4All": "https://python.langchain.com/docs/integrations/providers/gpt4all"}, "InfinoCallbackHandler": {"Infino": "https://python.langchain.com/docs/integrations/providers/infino"}, "FigmaFileLoader": {"Figma": "https://python.langchain.com/docs/integrations/document_loaders/figma"}, "AzureOpenAI": {"Azure OpenAI": "https://python.langchain.com/docs/integrations/llms/azure_openai", "OpenAI": "https://python.langchain.com/docs/integrations/providers/openai"}, "MyScale": {"MyScale": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/myscale_self_query"}, "Baseten": {"Baseten": "https://python.langchain.com/docs/integrations/llms/baseten"}, "WeatherDataLoader": {"Weather": "https://python.langchain.com/docs/integrations/document_loaders/weather"}, "Tair": {"Tair": "https://python.langchain.com/docs/integrations/vectorstores/tair"}, "UnstructuredWordDocumentLoader": {"Microsoft Word": "https://python.langchain.com/docs/integrations/document_loaders/microsoft_word"}, "CollegeConfidentialLoader": {"College Confidential": "https://python.langchain.com/docs/integrations/document_loaders/college_confidential"}, "RWKV": {"RWKV-4": "https://python.langchain.com/docs/integrations/providers/rwkv"}, "GoogleDriveLoader": {"Google Drive": "https://python.langchain.com/docs/integrations/document_loaders/google_drive"}, "Fireworks": {"Fireworks": "https://python.langchain.com/docs/integrations/llms/fireworks"}, "DeepLake": {"Activeloop Deep Lake": "https://python.langchain.com/docs/integrations/vectorstores/activeloop_deeplake", "Analysis of Twitter the-algorithm source code with LangChain, GPT4 and Activeloop's Deep Lake": "https://python.langchain.com/docs/use_cases/question_answering/how_to/code/twitter-the-algorithm-analysis-deeplake", "Use LangChain, GPT and Activeloop's Deep Lake to work with code base": "https://python.langchain.com/docs/use_cases/question_answering/how_to/code/code-analysis-deeplake", "QA using Activeloop's DeepLake": "https://python.langchain.com/docs/use_cases/question_answering/integrations/semantic-search-over-chat", "Deep Lake": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/activeloop_deeplake_self_query"}, "AmazonAPIGateway": {"Amazon API Gateway": "https://python.langchain.com/docs/integrations/llms/amazon_api_gateway"}, "UnstructuredPowerPointLoader": {"Microsoft PowerPoint": "https://python.langchain.com/docs/integrations/document_loaders/microsoft_powerpoint"}, "CometCallbackHandler": {"Comet": "https://python.langchain.com/docs/integrations/providers/comet_tracking"}, "CTransformers": {"C Transformers": "https://python.langchain.com/docs/integrations/llms/ctransformers"}, "BiliBiliLoader": {"BiliBili": "https://python.langchain.com/docs/integrations/document_loaders/bilibili"}, "MongoDBAtlasVectorSearch": {"MongoDB Atlas": "https://python.langchain.com/docs/integrations/vectorstores/mongodb_atlas"}, "SupabaseVectorStore": {"Supabase (Postgres)": "https://python.langchain.com/docs/integrations/vectorstores/supabase", "Supabase": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/supabase_self_query"}, "DiffbotLoader": {"Diffbot": "https://python.langchain.com/docs/integrations/document_loaders/diffbot"}, "DeepSparse": {"DeepSparse": "https://python.langchain.com/docs/integrations/llms/deepsparse"}, "AimCallbackHandler": {"Aim": "https://python.langchain.com/docs/integrations/providers/aim_tracking"}, "ModernTreasuryLoader": {"Modern Treasury": "https://python.langchain.com/docs/integrations/document_loaders/modern_treasury"}, "FacebookChatLoader": {"Facebook Chat": "https://python.langchain.com/docs/integrations/document_loaders/facebook_chat"}, "Banana": {"Banana": "https://python.langchain.com/docs/integrations/llms/banana"}, "HuggingFacePipeline": {"Hugging Face": "https://python.langchain.com/docs/integrations/providers/huggingface", "Hugging Face Local Pipelines": "https://python.langchain.com/docs/integrations/llms/huggingface_pipelines", "RELLM": "https://python.langchain.com/docs/integrations/llms/rellm_experimental", "JSONFormer": "https://python.langchain.com/docs/integrations/llms/jsonformer_experimental"}, "HuggingFaceHub": {"Hugging Face": "https://python.langchain.com/docs/integrations/providers/huggingface"}, "HuggingFaceHubEmbeddings": {"Hugging Face": "https://python.langchain.com/docs/integrations/providers/huggingface"}, "DocugamiLoader": {"Docugami": "https://python.langchain.com/docs/integrations/document_loaders/docugami"}, "GutenbergLoader": {"Gutenberg": "https://python.langchain.com/docs/integrations/document_loaders/gutenberg"}, "AzureBlobStorageContainerLoader": {"Azure Blob Storage": "https://python.langchain.com/docs/integrations/providers/azure_blob_storage", "Azure Blob Storage Container": "https://python.langchain.com/docs/integrations/document_loaders/azure_blob_storage_container"}, "AzureBlobStorageFileLoader": {"Azure Blob Storage": "https://python.langchain.com/docs/integrations/providers/azure_blob_storage", "Azure Blob Storage File": "https://python.langchain.com/docs/integrations/document_loaders/azure_blob_storage_file"}, "WikipediaLoader": {"Wikipedia": "https://python.langchain.com/docs/integrations/document_loaders/wikipedia", "Diffbot Graph Transformer": "https://python.langchain.com/docs/use_cases/more/graph/diffbot_graphtransformer"}, "ConfluenceLoader": {"Confluence": "https://python.langchain.com/docs/integrations/document_loaders/confluence"}, "Predibase": {"Predibase": "https://python.langchain.com/docs/integrations/llms/predibase"}, "Beam": {"Beam": "https://python.langchain.com/docs/integrations/llms/beam"}, "GrobidParser": {"Grobid": "https://python.langchain.com/docs/integrations/document_loaders/grobid"}, "GenericLoader": {"Grobid": "https://python.langchain.com/docs/integrations/document_loaders/grobid", "Loading documents from a YouTube url": "https://python.langchain.com/docs/integrations/document_loaders/youtube_audio", "Source Code": "https://python.langchain.com/docs/integrations/document_loaders/source_code", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/code_understanding"}, "Typesense": {"Typesense": "https://python.langchain.com/docs/integrations/vectorstores/typesense"}, "Hologres": {"Hologres": "https://python.langchain.com/docs/integrations/vectorstores/hologres"}, "AI21": {"AI21 Labs": "https://python.langchain.com/docs/integrations/providers/ai21", "AI21": "https://python.langchain.com/docs/integrations/llms/ai21"}, "WandbCallbackHandler": {"Weights & Biases": "https://python.langchain.com/docs/integrations/providers/wandb_tracking"}, "ObsidianLoader": {"Obsidian": "https://python.langchain.com/docs/integrations/document_loaders/obsidian"}, "create_sql_agent": {"CnosDB": "https://python.langchain.com/docs/integrations/providers/cnosdb", "SQL Database": "https://python.langchain.com/docs/integrations/toolkits/sql_database", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/qa_structured/sql", "SQL": "https://python.langchain.com/docs/use_cases/sql/sql"}, "SQLDatabaseToolkit": {"CnosDB": "https://python.langchain.com/docs/integrations/providers/cnosdb", "SQL Database": "https://python.langchain.com/docs/integrations/toolkits/sql_database", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/qa_structured/sql", "SQL": "https://python.langchain.com/docs/use_cases/sql/sql", "Use ToolKits with OpenAI Functions": "https://python.langchain.com/docs/modules/agents/how_to/use_toolkits_with_openai_functions"}, "SageMakerCallbackHandler": {"SageMaker Tracking": "https://python.langchain.com/docs/integrations/providers/sagemaker_tracking"}, "OpenAIModerationChain": {"OpenAI": "https://python.langchain.com/docs/integrations/providers/openai", "Adding moderation": "https://python.langchain.com/docs/expression_language/cookbook/moderation"}, "ChatGPTLoader": {"OpenAI": "https://python.langchain.com/docs/integrations/providers/openai", "ChatGPT Data": "https://python.langchain.com/docs/integrations/document_loaders/chatgpt_loader"}, "Nebula": {"Nebula": "https://python.langchain.com/docs/integrations/providers/symblai_nebula", "Nebula (Symbl.ai)": "https://python.langchain.com/docs/integrations/llms/symblai_nebula"}, "AZLyricsLoader": {"AZLyrics": "https://python.langchain.com/docs/integrations/document_loaders/azlyrics"}, "ToMarkdownLoader": {"2Markdown": "https://python.langchain.com/docs/integrations/document_loaders/tomarkdown"}, "DingoDB": {"DingoDB": "https://python.langchain.com/docs/integrations/vectorstores/dingo"}, "GitLoader": {"Git": "https://python.langchain.com/docs/integrations/document_loaders/git"}, "MlflowAIGateway": {"MLflow AI Gateway": "https://python.langchain.com/docs/integrations/providers/mlflow_ai_gateway"}, "MlflowAIGatewayEmbeddings": {"MLflow AI Gateway": "https://python.langchain.com/docs/integrations/providers/mlflow_ai_gateway"}, "ChatMLflowAIGateway": {"MLflow AI Gateway": "https://python.langchain.com/docs/integrations/providers/mlflow_ai_gateway"}, "SingleStoreDB": {"SingleStoreDB": "https://python.langchain.com/docs/integrations/vectorstores/singlestoredb"}, "Tigris": {"Tigris": "https://python.langchain.com/docs/integrations/vectorstores/tigris"}, "Bedrock": {"Bedrock": "https://python.langchain.com/docs/integrations/llms/bedrock"}, "Meilisearch": {"Meilisearch": "https://python.langchain.com/docs/integrations/vectorstores/meilisearch"}, "S3DirectoryLoader": {"AWS S3 Directory": "https://python.langchain.com/docs/integrations/document_loaders/aws_s3_directory"}, "S3FileLoader": {"AWS S3 Directory": "https://python.langchain.com/docs/integrations/providers/aws_s3", "AWS S3 File": "https://python.langchain.com/docs/integrations/document_loaders/aws_s3_file"}, "SQLDatabase": {"Rebuff": "https://python.langchain.com/docs/integrations/providers/rebuff", "SQL Database": "https://python.langchain.com/docs/integrations/toolkits/sql_database", "Multiple Retrieval Sources": "https://python.langchain.com/docs/use_cases/question_answering/how_to/multiple_retrieval", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/qa_structured/sql", "Vector SQL Retriever with MyScale": "https://python.langchain.com/docs/use_cases/qa_structured/integrations/myscale_vector_sql", "SQL": "https://python.langchain.com/docs/use_cases/sql/sql", "sql_db.md": "https://python.langchain.com/docs/expression_language/cookbook/sql_db"}, "Weaviate": {"Weaviate": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/weaviate_self_query"}, "Clickhouse": {"ClickHouse": "https://python.langchain.com/docs/integrations/vectorstores/clickhouse"}, "ClickhouseSettings": {"ClickHouse": "https://python.langchain.com/docs/integrations/vectorstores/clickhouse"}, "AirbyteJSONLoader": {"Airbyte": "https://python.langchain.com/docs/integrations/providers/airbyte", "Airbyte JSON": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_json"}, "TelegramChatFileLoader": {"Telegram": "https://python.langchain.com/docs/integrations/document_loaders/telegram"}, "TelegramChatApiLoader": {"Telegram": "https://python.langchain.com/docs/integrations/document_loaders/telegram"}, "PredictionGuard": {"Prediction Guard": "https://python.langchain.com/docs/integrations/llms/predictionguard"}, "ScaNN": {"ScaNN": "https://python.langchain.com/docs/integrations/vectorstores/scann"}, "NotionDirectoryLoader": {"Notion DB": "https://python.langchain.com/docs/integrations/providers/notion", "Notion DB 1/2": "https://python.langchain.com/docs/integrations/document_loaders/notion", "Perform context-aware text splitting": "https://python.langchain.com/docs/use_cases/question_answering/how_to/document-context-aware-QA"}, "NotionDBLoader": {"Notion DB": "https://python.langchain.com/docs/integrations/providers/notion", "Notion DB 2/2": "https://python.langchain.com/docs/integrations/document_loaders/notiondb"}, "MWDumpLoader": {"MediaWikiDump": "https://python.langchain.com/docs/integrations/document_loaders/mediawikidump"}, "BraveSearchLoader": {"Brave Search": "https://python.langchain.com/docs/integrations/document_loaders/brave_search"}, "StarRocks": {"StarRocks": "https://python.langchain.com/docs/integrations/vectorstores/starrocks"}, "ElasticsearchStore": {"Elasticsearch": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/elasticsearch_self_query", "Indexing": "https://python.langchain.com/docs/modules/data_connection/indexing"}, "DatadogLogsLoader": {"Datadog Logs": "https://python.langchain.com/docs/integrations/document_loaders/datadog_logs"}, "ApifyDatasetLoader": {"Apify": "https://python.langchain.com/docs/integrations/providers/apify", "Apify Dataset": "https://python.langchain.com/docs/integrations/document_loaders/apify_dataset"}, "NLPCloud": {"NLPCloud": "https://python.langchain.com/docs/integrations/providers/nlpcloud", "NLP Cloud": "https://python.langchain.com/docs/integrations/llms/nlpcloud"}, "Milvus": {"Milvus": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/milvus_self_query", "Zilliz": "https://python.langchain.com/docs/integrations/vectorstores/zilliz"}, "Qdrant": {"Qdrant": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/qdrant_self_query"}, "GitbookLoader": {"GitBook": "https://python.langchain.com/docs/integrations/document_loaders/gitbook"}, "OpenSearchVectorSearch": {"OpenSearch": "https://python.langchain.com/docs/integrations/vectorstores/opensearch"}, "Pinecone": {"Pinecone": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/pinecone"}, "Rockset": {"Rockset": "https://python.langchain.com/docs/integrations/vectorstores/rockset"}, "RocksetLoader": {"Rockset": "https://python.langchain.com/docs/integrations/document_loaders/rockset"}, "Minimax": {"Minimax": "https://python.langchain.com/docs/integrations/llms/minimax"}, "UnstructuredFileLoader": {"Unstructured": "https://python.langchain.com/docs/integrations/providers/unstructured", "Unstructured File": "https://python.langchain.com/docs/integrations/document_loaders/unstructured_file"}, "SelfHostedPipeline": {"Runhouse": "https://python.langchain.com/docs/integrations/llms/runhouse"}, "SelfHostedHuggingFaceLLM": {"Runhouse": "https://python.langchain.com/docs/integrations/llms/runhouse"}, "MlflowCallbackHandler": {"MLflow": "https://python.langchain.com/docs/integrations/providers/mlflow_tracking"}, "SpreedlyLoader": {"Spreedly": "https://python.langchain.com/docs/integrations/document_loaders/spreedly"}, "OpenLLM": {"OpenLLM": "https://python.langchain.com/docs/integrations/llms/openllm"}, "PubMedLoader": {"PubMed": "https://python.langchain.com/docs/integrations/document_loaders/pubmed"}, "SearxSearchResults": {"SearxNG Search API": "https://python.langchain.com/docs/integrations/providers/searx"}, "SpacyTextSplitter": {"spaCy": "https://python.langchain.com/docs/integrations/providers/spacy", "Atlas": "https://python.langchain.com/docs/integrations/vectorstores/atlas", "Split by tokens ": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/split_by_token"}, "Modal": {"Modal": "https://python.langchain.com/docs/integrations/llms/modal"}, "PGEmbedding": {"Postgres Embedding": "https://python.langchain.com/docs/integrations/vectorstores/pgembedding"}, "Xinference": {"Xorbits Inference (Xinference)": "https://python.langchain.com/docs/integrations/llms/xinference"}, "IFixitLoader": {"iFixit": "https://python.langchain.com/docs/integrations/document_loaders/ifixit"}, "AlephAlpha": {"Aleph Alpha": "https://python.langchain.com/docs/integrations/llms/aleph_alpha"}, "PipelineAI": {"PipelineAI": "https://python.langchain.com/docs/integrations/llms/pipelineai"}, "Epsilla": {"Epsilla": "https://python.langchain.com/docs/integrations/vectorstores/epsilla"}, "LlamaCpp": {"Llama.cpp": "https://python.langchain.com/docs/integrations/llms/llamacpp", "Run LLMs locally": "https://python.langchain.com/docs/guides/local_llms", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/code_understanding", "Use local LLMs": "https://python.langchain.com/docs/use_cases/question_answering/how_to/local_retrieval_qa", "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research"}, "AwaDB": {"AwaDB": "https://python.langchain.com/docs/integrations/vectorstores/awadb"}, "ArxivLoader": {"Arxiv": "https://python.langchain.com/docs/integrations/document_loaders/arxiv"}, "Anyscale": {"Anyscale": "https://python.langchain.com/docs/integrations/llms/anyscale"}, "AINetworkToolkit": {"AINetwork": "https://python.langchain.com/docs/integrations/toolkits/ainetwork"}, "StripeLoader": {"Stripe": "https://python.langchain.com/docs/integrations/document_loaders/stripe"}, "Bagel": {"BagelDB": "https://python.langchain.com/docs/integrations/vectorstores/bageldb"}, "BlackboardLoader": {"Blackboard": "https://python.langchain.com/docs/integrations/document_loaders/blackboard"}, "LanceDB": {"LanceDB": "https://python.langchain.com/docs/integrations/vectorstores/lancedb"}, "OneDriveLoader": {"Microsoft OneDrive": "https://python.langchain.com/docs/integrations/document_loaders/microsoft_onedrive"}, "AnalyticDB": {"AnalyticDB": "https://python.langchain.com/docs/integrations/vectorstores/analyticdb"}, "YoutubeLoader": {"YouTube": "https://python.langchain.com/docs/integrations/providers/youtube", "YouTube transcripts": "https://python.langchain.com/docs/integrations/document_loaders/youtube_transcript"}, "GoogleApiYoutubeLoader": {"YouTube": "https://python.langchain.com/docs/integrations/providers/youtube", "YouTube transcripts": "https://python.langchain.com/docs/integrations/document_loaders/youtube_transcript"}, "PromptLayerOpenAI": {"PromptLayer": "https://python.langchain.com/docs/integrations/providers/promptlayer", "PromptLayer OpenAI": "https://python.langchain.com/docs/integrations/llms/promptlayer_openai"}, "USearch": {"USearch": "https://python.langchain.com/docs/integrations/vectorstores/usearch"}, "WhyLabsCallbackHandler": {"WhyLabs": "https://python.langchain.com/docs/integrations/providers/whylabs_profiling"}, "FlyteCallbackHandler": {"Flyte": "https://python.langchain.com/docs/integrations/providers/flyte"}, "wandb_tracing_enabled": {"WandB Tracing": "https://python.langchain.com/docs/integrations/providers/wandb_tracing"}, "ManifestWrapper": {"Hazy Research": "https://python.langchain.com/docs/integrations/providers/hazy_research", "Manifest": "https://python.langchain.com/docs/integrations/llms/manifest"}, "Marqo": {"Marqo": "https://python.langchain.com/docs/integrations/vectorstores/marqo"}, "IMSDbLoader": {"IMSDb": "https://python.langchain.com/docs/integrations/document_loaders/imsdb"}, "PGVector": {"PGVector": "https://python.langchain.com/docs/integrations/vectorstores/pgvector"}, "DeepInfra": {"DeepInfra": "https://python.langchain.com/docs/integrations/llms/deepinfra"}, "ZeroShotAgent": {"Jina": "https://python.langchain.com/docs/integrations/providers/jina", "Bittensor": "https://python.langchain.com/docs/integrations/llms/bittensor", "BabyAGI with Tools": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/baby_agi_with_agent", "Message Memory in Agent backed by a database": "https://python.langchain.com/docs/modules/memory/agent_with_memory_in_db", "Memory in Agent": "https://python.langchain.com/docs/modules/memory/agent_with_memory", "Custom MRKL agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_mrkl_agent", "Shared memory across agents and tools": "https://python.langchain.com/docs/modules/agents/how_to/sharedmemory_for_tools"}, "RedditPostsLoader": {"Reddit": "https://python.langchain.com/docs/integrations/document_loaders/reddit"}, "TrelloLoader": {"Trello": "https://python.langchain.com/docs/integrations/document_loaders/trello"}, "SKLearnVectorStore": {"scikit-learn": "https://python.langchain.com/docs/integrations/vectorstores/sklearn"}, "EverNoteLoader": {"EverNote": "https://python.langchain.com/docs/integrations/document_loaders/evernote"}, "TwitterTweetLoader": {"Twitter": "https://python.langchain.com/docs/integrations/document_loaders/twitter"}, "DiscordChatLoader": {"Discord": "https://python.langchain.com/docs/integrations/document_loaders/discord"}, "RedisCache": {"Redis": "https://python.langchain.com/docs/integrations/providers/redis", "LLM Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching"}, "RedisSemanticCache": {"Redis": "https://python.langchain.com/docs/integrations/providers/redis", "LLM Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching"}, "Redis": {"Redis": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/redis_self_query"}, "SelfQueryRetriever": {"Chroma": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/chroma_self_query", "Vectara": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/vectara_self_query", "Docugami": "https://python.langchain.com/docs/integrations/document_loaders/docugami", "Perform context-aware text splitting": "https://python.langchain.com/docs/use_cases/question_answering/how_to/document-context-aware-QA", "Milvus": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/milvus_self_query", "Weaviate": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/weaviate_self_query", "DashVector": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/dashvector", "Elasticsearch": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/elasticsearch_self_query", "Pinecone": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/pinecone", "Supabase": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/supabase_self_query", "Redis": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/redis_self_query", "MyScale": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/myscale_self_query", "Deep Lake": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/activeloop_deeplake_self_query", "Qdrant": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/qdrant_self_query"}, "MatchingEngine": {"Google Vertex AI MatchingEngine": "https://python.langchain.com/docs/integrations/vectorstores/matchingengine"}, "ClearMLCallbackHandler": {"ClearML": "https://python.langchain.com/docs/integrations/providers/clearml_tracking"}, "Cohere": {"Cohere": "https://python.langchain.com/docs/integrations/llms/cohere"}, "SlackDirectoryLoader": {"Slack": "https://python.langchain.com/docs/integrations/document_loaders/slack"}, "LLMContentHandler": {"SageMaker Endpoint": "https://python.langchain.com/docs/integrations/providers/sagemaker_endpoint", "SageMakerEndpoint": "https://python.langchain.com/docs/integrations/llms/sagemaker", "Amazon Comprehend Moderation Chain": "https://python.langchain.com/docs/guides/safety/amazon_comprehend_chain"}, "ContentHandlerBase": {"SageMaker Endpoint": "https://python.langchain.com/docs/integrations/providers/sagemaker_endpoint"}, "HNLoader": {"Hacker News": "https://python.langchain.com/docs/integrations/document_loaders/hacker_news"}, "Annoy": {"Annoy": "https://python.langchain.com/docs/integrations/vectorstores/annoy"}, "DashVector": {"DashVector": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/dashvector"}, "Cassandra": {"Cassandra": "https://python.langchain.com/docs/integrations/vectorstores/cassandra"}, "TencentVectorDB": {"TencentVectorDB": "https://python.langchain.com/docs/integrations/providers/tencentvectordb", "Tencent Cloud VectorDB": "https://python.langchain.com/docs/integrations/vectorstores/tencentvectordb"}, "Vearch": {"Vearch": "https://python.langchain.com/docs/integrations/providers/vearch"}, "GCSDirectoryLoader": {"Google Cloud Storage": "https://python.langchain.com/docs/integrations/providers/google_cloud_storage", "Google Cloud Storage Directory": "https://python.langchain.com/docs/integrations/document_loaders/google_cloud_storage_directory"}, "GCSFileLoader": {"Google Cloud Storage": "https://python.langchain.com/docs/integrations/providers/google_cloud_storage", "Google Cloud Storage File": "https://python.langchain.com/docs/integrations/document_loaders/google_cloud_storage_file"}, "ArthurCallbackHandler": {"Arthur": "https://python.langchain.com/docs/integrations/providers/arthur_tracking"}, "DuckDBLoader": {"DuckDB": "https://python.langchain.com/docs/integrations/document_loaders/duckdb"}, "Petals": {"Petals": "https://python.langchain.com/docs/integrations/llms/petals"}, "MomentoCache": {"Momento": "https://python.langchain.com/docs/integrations/providers/momento", "LLM Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching"}, "NIBittensorLLM": {"NIBittensor": "https://python.langchain.com/docs/integrations/providers/bittensor", "Bittensor": "https://python.langchain.com/docs/integrations/llms/bittensor"}, "Neo4jVector": {"Neo4j": "https://python.langchain.com/docs/integrations/providers/neo4j", "Neo4j Vector Index": "https://python.langchain.com/docs/integrations/vectorstores/neo4jvector"}, "Neo4jGraph": {"Neo4j": "https://python.langchain.com/docs/integrations/providers/neo4j", "Diffbot Graph Transformer": "https://python.langchain.com/docs/use_cases/more/graph/diffbot_graphtransformer", "Neo4j DB QA chain": "https://python.langchain.com/docs/use_cases/more/graph/graph_cypher_qa"}, "GraphCypherQAChain": {"Neo4j": "https://python.langchain.com/docs/integrations/providers/neo4j", "Memgraph QA chain": "https://python.langchain.com/docs/use_cases/more/graph/graph_memgraph_qa", "Diffbot Graph Transformer": "https://python.langchain.com/docs/use_cases/more/graph/diffbot_graphtransformer", "Neo4j DB QA chain": "https://python.langchain.com/docs/use_cases/more/graph/graph_cypher_qa"}, "AirtableLoader": {"Airtable": "https://python.langchain.com/docs/integrations/document_loaders/airtable"}, "TensorflowDatasetLoader": {"TensorFlow Datasets": "https://python.langchain.com/docs/integrations/document_loaders/tensorflow_datasets"}, "Clarifai": {"Clarifai": "https://python.langchain.com/docs/integrations/llms/clarifai"}, "BigQueryLoader": {"Google BigQuery": "https://python.langchain.com/docs/integrations/document_loaders/google_bigquery"}, "RoamLoader": {"Roam": "https://python.langchain.com/docs/integrations/document_loaders/roam"}, "Portkey": {"Log, Trace, and Monitor": "https://python.langchain.com/docs/integrations/providers/portkey/logging_tracing_portkey", "Portkey": "https://python.langchain.com/docs/integrations/providers/portkey/index"}, "Vectara": {"Vectara": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/vectara_self_query", "Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat", "Vectara Text Generation": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_text_generation"}, "VectaraRetriever": {"Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat"}, "load_qa_chain": {"Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat", "Amazon Textract ": "https://python.langchain.com/docs/integrations/document_loaders/pdf-amazonTextractPDFLoader", "SageMakerEndpoint": "https://python.langchain.com/docs/integrations/llms/sagemaker", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/code_understanding", "Question Answering": "https://python.langchain.com/docs/use_cases/question_answering/question_answering", "Use local LLMs": "https://python.langchain.com/docs/use_cases/question_answering/how_to/local_retrieval_qa", "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research", "Memory in the Multi-Input Chain": "https://python.langchain.com/docs/modules/memory/adding_memory_chain_multiple_inputs"}, "CONDENSE_QUESTION_PROMPT": {"Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat"}, "load_qa_with_sources_chain": {"Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat", "!pip install bs4": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/marathon_times"}, "QA_PROMPT": {"Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat"}, "create_csv_agent": {"CSV": "https://python.langchain.com/docs/integrations/toolkits/csv"}, "create_xorbits_agent": {"Xorbits": "https://python.langchain.com/docs/integrations/toolkits/xorbits"}, "JiraToolkit": {"Jira": "https://python.langchain.com/docs/integrations/toolkits/jira"}, "JiraAPIWrapper": {"Jira": "https://python.langchain.com/docs/integrations/toolkits/jira"}, "create_spark_dataframe_agent": {"Spark Dataframe": "https://python.langchain.com/docs/integrations/toolkits/spark"}, "PyPDFLoader": {"Document Comparison": "https://python.langchain.com/docs/integrations/toolkits/document_comparison_toolkit", "Google Cloud Storage File": "https://python.langchain.com/docs/integrations/document_loaders/google_cloud_storage_file", "MergeDocLoader": "https://python.langchain.com/docs/integrations/document_loaders/merge_doc_loader", "QA using Activeloop's DeepLake": "https://python.langchain.com/docs/use_cases/question_answering/integrations/semantic-search-over-chat"}, "create_python_agent": {"Python": "https://python.langchain.com/docs/integrations/toolkits/python"}, "PythonREPLTool": {"Python": "https://python.langchain.com/docs/integrations/toolkits/python"}, "create_pbi_agent": {"PowerBI Dataset": "https://python.langchain.com/docs/integrations/toolkits/powerbi"}, "PowerBIToolkit": {"PowerBI Dataset": "https://python.langchain.com/docs/integrations/toolkits/powerbi"}, "PowerBIDataset": {"PowerBI Dataset": "https://python.langchain.com/docs/integrations/toolkits/powerbi"}, "AzureCognitiveServicesToolkit": {"Azure Cognitive Services": "https://python.langchain.com/docs/integrations/toolkits/azure_cognitive_services"}, "Requests": {"Natural Language APIs": "https://python.langchain.com/docs/integrations/toolkits/openapi_nla"}, "APIOperation": {"Natural Language APIs": "https://python.langchain.com/docs/integrations/toolkits/openapi_nla"}, "OpenAPISpec": {"Natural Language APIs": "https://python.langchain.com/docs/integrations/toolkits/openapi_nla"}, "NLAToolkit": {"Natural Language APIs": "https://python.langchain.com/docs/integrations/toolkits/openapi_nla", "Plug-and-Plai": "https://python.langchain.com/docs/use_cases/more/agents/agents/custom_agent_with_plugin_retrieval_using_plugnplai", "Custom Agent with PlugIn Retrieval": "https://python.langchain.com/docs/use_cases/more/agents/agents/custom_agent_with_plugin_retrieval"}, "GmailToolkit": {"Gmail": "https://python.langchain.com/docs/integrations/toolkits/gmail"}, "build_resource_service": {"Gmail": "https://python.langchain.com/docs/integrations/toolkits/gmail"}, "get_gmail_credentials": {"Gmail": "https://python.langchain.com/docs/integrations/toolkits/gmail"}, "create_json_agent": {"JSON": "https://python.langchain.com/docs/integrations/toolkits/json"}, "JsonToolkit": {"JSON": "https://python.langchain.com/docs/integrations/toolkits/json"}, "JsonSpec": {"JSON": "https://python.langchain.com/docs/integrations/toolkits/json", "OpenAPI": "https://python.langchain.com/docs/integrations/toolkits/openapi"}, "AirbyteStripeLoader": {"Airbyte Question Answering": "https://python.langchain.com/docs/integrations/toolkits/airbyte_structured_qa", "Airbyte Stripe": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_stripe"}, "create_pandas_dataframe_agent": {"Airbyte Question Answering": "https://python.langchain.com/docs/integrations/toolkits/airbyte_structured_qa", "Pandas Dataframe": "https://python.langchain.com/docs/integrations/toolkits/pandas", "!pip install bs4": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/marathon_times"}, "GitHubToolkit": {"Github": "https://python.langchain.com/docs/integrations/toolkits/github"}, "GitHubAPIWrapper": {"Github": "https://python.langchain.com/docs/integrations/toolkits/github"}, "GitHubAction": {"Github": "https://python.langchain.com/docs/integrations/toolkits/github"}, "create_spark_sql_agent": {"Spark SQL": "https://python.langchain.com/docs/integrations/toolkits/spark_sql"}, "SparkSQLToolkit": {"Spark SQL": "https://python.langchain.com/docs/integrations/toolkits/spark_sql"}, "SparkSQL": {"Spark SQL": "https://python.langchain.com/docs/integrations/toolkits/spark_sql"}, "create_sync_playwright_browser": {"PlayWright Browser": "https://python.langchain.com/docs/integrations/toolkits/playwright"}, "O365Toolkit": {"Office365": "https://python.langchain.com/docs/integrations/toolkits/office365"}, "MultionToolkit": {"MultiOn": "https://python.langchain.com/docs/integrations/toolkits/multion"}, "AmadeusToolkit": {"Amadeus": "https://python.langchain.com/docs/integrations/toolkits/amadeus"}, "create_vectorstore_agent": {"Vectorstore": "https://python.langchain.com/docs/integrations/toolkits/vectorstore"}, "VectorStoreToolkit": {"Vectorstore": "https://python.langchain.com/docs/integrations/toolkits/vectorstore"}, "VectorStoreInfo": {"Vectorstore": "https://python.langchain.com/docs/integrations/toolkits/vectorstore"}, "create_vectorstore_router_agent": {"Vectorstore": "https://python.langchain.com/docs/integrations/toolkits/vectorstore"}, "VectorStoreRouterToolkit": {"Vectorstore": "https://python.langchain.com/docs/integrations/toolkits/vectorstore"}, "reduce_openapi_spec": {"OpenAPI": "https://python.langchain.com/docs/integrations/toolkits/openapi"}, "RequestsWrapper": {"OpenAPI": "https://python.langchain.com/docs/integrations/toolkits/openapi"}, "create_openapi_agent": {"OpenAPI": "https://python.langchain.com/docs/integrations/toolkits/openapi"}, "OpenAPIToolkit": {"OpenAPI": "https://python.langchain.com/docs/integrations/toolkits/openapi"}, "GitLabToolkit": {"Gitlab": "https://python.langchain.com/docs/integrations/toolkits/gitlab"}, "GitLabAPIWrapper": {"Gitlab": "https://python.langchain.com/docs/integrations/toolkits/gitlab"}, "SQLiteVSS": {"sqlite-vss": "https://python.langchain.com/docs/integrations/vectorstores/sqlitevss"}, "RetrievalQAWithSourcesChain": {"Weaviate": "https://python.langchain.com/docs/integrations/vectorstores/weaviate", "Neo4j Vector Index": "https://python.langchain.com/docs/integrations/vectorstores/neo4jvector", "Marqo": "https://python.langchain.com/docs/integrations/vectorstores/marqo", "Psychic": "https://python.langchain.com/docs/integrations/document_loaders/psychic", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/web_scraping", "Question Answering": "https://python.langchain.com/docs/use_cases/question_answering/question_answering", "Vector SQL Retriever with MyScale": "https://python.langchain.com/docs/use_cases/qa_structured/integrations/myscale_vector_sql", "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research"}, "google_palm": {"ScaNN": "https://python.langchain.com/docs/integrations/vectorstores/scann"}, "NucliaDB": {"NucliaDB": "https://python.langchain.com/docs/integrations/vectorstores/nucliadb"}, "AttributeInfo": {"Vectara": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/vectara_self_query", "Docugami": "https://python.langchain.com/docs/integrations/document_loaders/docugami", "Perform context-aware text splitting": "https://python.langchain.com/docs/use_cases/question_answering/how_to/document-context-aware-QA", "Milvus": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/milvus_self_query", "Weaviate": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/weaviate_self_query", "DashVector": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/dashvector", "Elasticsearch": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/elasticsearch_self_query", "Chroma": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/chroma_self_query", "Pinecone": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/pinecone", "Supabase": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/supabase_self_query", "Redis": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/redis_self_query", "MyScale": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/myscale_self_query", "Deep Lake": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/activeloop_deeplake_self_query", "Qdrant": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/qdrant_self_query"}, "RedisText": {"Redis": "https://python.langchain.com/docs/integrations/vectorstores/redis"}, "RedisNum": {"Redis": "https://python.langchain.com/docs/integrations/vectorstores/redis"}, "RedisTag": {"Redis": "https://python.langchain.com/docs/integrations/vectorstores/redis"}, "RedisFilter": {"Redis": "https://python.langchain.com/docs/integrations/vectorstores/redis"}, "InMemoryDocstore": {"Annoy": "https://python.langchain.com/docs/integrations/vectorstores/annoy", "Agents": "https://python.langchain.com/docs/use_cases/more/agents/agents", "AutoGPT": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/autogpt", "BabyAGI User Guide": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/baby_agi", "BabyAGI with Tools": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/baby_agi_with_agent", "!pip install bs4": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/marathon_times", "Generative Agents in LangChain": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/characters"}, "AtlasDB": {"Atlas": "https://python.langchain.com/docs/integrations/vectorstores/atlas"}, "OpenAIChat": {"Activeloop Deep Lake": "https://python.langchain.com/docs/integrations/vectorstores/activeloop_deeplake"}, "AlibabaCloudOpenSearch": {"Alibaba Cloud OpenSearch": "https://python.langchain.com/docs/integrations/vectorstores/alibabacloud_opensearch"}, "AlibabaCloudOpenSearchSettings": {"Alibaba Cloud OpenSearch": "https://python.langchain.com/docs/integrations/vectorstores/alibabacloud_opensearch"}, "BESVectorStore":{"Baidu Cloud VectorSearch": "https://python.langchain.com/docs/integrations/vectorstores/baiducloud_vector_search"}, "StarRocksSettings": {"StarRocks": "https://python.langchain.com/docs/integrations/vectorstores/starrocks"}, "TokenTextSplitter": {"StarRocks": "https://python.langchain.com/docs/integrations/vectorstores/starrocks", "Split by tokens ": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/split_by_token"}, "DirectoryLoader": {"StarRocks": "https://python.langchain.com/docs/integrations/vectorstores/starrocks"}, "UnstructuredMarkdownLoader": {"StarRocks": "https://python.langchain.com/docs/integrations/vectorstores/starrocks"}, "ConnectionParams": {"Tencent Cloud VectorDB": "https://python.langchain.com/docs/integrations/vectorstores/tencentvectordb"}, "DocArrayHnswSearch": {"DocArray HnswSearch": "https://python.langchain.com/docs/integrations/vectorstores/docarray_hnsw"}, "MyScaleSettings": {"MyScale": "https://python.langchain.com/docs/integrations/vectorstores/myscale"}, "AzureSearch": {"Azure Cognitive Search": "https://python.langchain.com/docs/integrations/vectorstores/azuresearch"}, "ElasticVectorSearch": {"Elasticsearch": "https://python.langchain.com/docs/integrations/vectorstores/elasticsearch", "Memory in the Multi-Input Chain": "https://python.langchain.com/docs/modules/memory/adding_memory_chain_multiple_inputs"}, "DocArrayInMemorySearch": {"DocArray InMemorySearch": "https://python.langchain.com/docs/integrations/vectorstores/docarray_in_memory"}, "ZepVectorStore": {"Zep": "https://python.langchain.com/docs/integrations/vectorstores/zep"}, "CollectionConfig": {"Zep": "https://python.langchain.com/docs/integrations/vectorstores/zep"}, "AsyncChromiumLoader": {"Beautiful Soup": "https://python.langchain.com/docs/integrations/document_transformers/beautiful_soup", "Async Chromium": "https://python.langchain.com/docs/integrations/document_loaders/async_chromium", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/web_scraping"}, "BeautifulSoupTransformer": {"Beautiful Soup": "https://python.langchain.com/docs/integrations/document_transformers/beautiful_soup", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/web_scraping"}, "NucliaTextTransformer": {"Nuclia Understanding API document transformer": "https://python.langchain.com/docs/integrations/document_transformers/nuclia_transformer"}, "create_metadata_tagger": {"OpenAI Functions Metadata Tagger": "https://python.langchain.com/docs/integrations/document_transformers/openai_metadata_tagger"}, "AsyncHtmlLoader": {"html2text": "https://python.langchain.com/docs/integrations/document_transformers/html2text", "AsyncHtmlLoader": "https://python.langchain.com/docs/integrations/document_loaders/async_html", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/web_scraping"}, "Html2TextTransformer": {"html2text": "https://python.langchain.com/docs/integrations/document_transformers/html2text", "Async Chromium": "https://python.langchain.com/docs/integrations/document_loaders/async_chromium", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/web_scraping"}, "DoctranPropertyExtractor": {"Doctran Extract Properties": "https://python.langchain.com/docs/integrations/document_transformers/doctran_extract_properties"}, "DoctranQATransformer": {"Doctran Interrogate Documents": "https://python.langchain.com/docs/integrations/document_transformers/doctran_interrogate_document"}, "Blob": {"docai.md": "https://python.langchain.com/docs/integrations/document_transformers/docai", "Embaas": "https://python.langchain.com/docs/integrations/document_loaders/embaas"}, "DocAIParser": {"docai.md": "https://python.langchain.com/docs/integrations/document_transformers/docai"}, "DoctranTextTranslator": {"Doctran Translate Documents": "https://python.langchain.com/docs/integrations/document_transformers/doctran_translate_document"}, "SnowflakeLoader": {"Snowflake": "https://python.langchain.com/docs/integrations/document_loaders/snowflake"}, "AcreomLoader": {"acreom": "https://python.langchain.com/docs/integrations/document_loaders/acreom"}, "ArcGISLoader": {"ArcGIS": "https://python.langchain.com/docs/integrations/document_loaders/arcgis"}, "UnstructuredCSVLoader": {"CSV": "https://python.langchain.com/docs/integrations/document_loaders/csv"}, "XorbitsLoader": {"Xorbits Pandas DataFrame": "https://python.langchain.com/docs/integrations/document_loaders/xorbits"}, "UnstructuredEmailLoader": {"Email": "https://python.langchain.com/docs/integrations/document_loaders/email"}, "OutlookMessageLoader": {"Email": "https://python.langchain.com/docs/integrations/document_loaders/email"}, "AssemblyAIAudioTranscriptLoader": {"AssemblyAI Audio Transcripts": "https://python.langchain.com/docs/integrations/document_loaders/assemblyai"}, "TranscriptFormat": {"AssemblyAI Audio Transcripts": "https://python.langchain.com/docs/integrations/document_loaders/assemblyai"}, "BlockchainDocumentLoader": {"Blockchain": "https://python.langchain.com/docs/integrations/document_loaders/blockchain"}, "BlockchainType": {"Blockchain": "https://python.langchain.com/docs/integrations/document_loaders/blockchain"}, "RecursiveUrlLoader": {"Recursive URL Loader": "https://python.langchain.com/docs/integrations/document_loaders/recursive_url_loader"}, "JoplinLoader": {"Joplin": "https://python.langchain.com/docs/integrations/document_loaders/joplin"}, "AirbyteSalesforceLoader": {"Airbyte Salesforce": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_salesforce"}, "EtherscanLoader": {"Etherscan Loader": "https://python.langchain.com/docs/integrations/document_loaders/Etherscan"}, "AirbyteCDKLoader": {"Airbyte CDK": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_cdk"}, "Docx2txtLoader": {"Microsoft Word": "https://python.langchain.com/docs/integrations/document_loaders/microsoft_word"}, "OpenAIWhisperParser": {"Loading documents from a YouTube url": "https://python.langchain.com/docs/integrations/document_loaders/youtube_audio"}, "YoutubeAudioLoader": {"Loading documents from a YouTube url": "https://python.langchain.com/docs/integrations/document_loaders/youtube_audio"}, "UnstructuredURLLoader": {"URL": "https://python.langchain.com/docs/integrations/document_loaders/url"}, "SeleniumURLLoader": {"URL": "https://python.langchain.com/docs/integrations/document_loaders/url"}, "PlaywrightURLLoader": {"URL": "https://python.langchain.com/docs/integrations/document_loaders/url"}, "OpenCityDataLoader": {"Geopandas": "https://python.langchain.com/docs/integrations/document_loaders/geopandas", "Open City Data": "https://python.langchain.com/docs/integrations/document_loaders/open_city_data"}, "GeoDataFrameLoader": {"Geopandas": "https://python.langchain.com/docs/integrations/document_loaders/geopandas"}, "OBSFileLoader": {"Huawei OBS File": "https://python.langchain.com/docs/integrations/document_loaders/huawei_obs_file"}, "HuggingFaceDatasetLoader": {"HuggingFace dataset": "https://python.langchain.com/docs/integrations/document_loaders/hugging_face_dataset"}, "DropboxLoader": {"Dropbox": "https://python.langchain.com/docs/integrations/document_loaders/dropbox"}, "AirbyteTypeformLoader": {"Airbyte Typeform": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_typeform"}, "MHTMLLoader": {"mhtml": "https://python.langchain.com/docs/integrations/document_loaders/mhtml"}, "NewsURLLoader": {"News URL": "https://python.langchain.com/docs/integrations/document_loaders/news"}, "ImageCaptionLoader": {"Image captions": "https://python.langchain.com/docs/integrations/document_loaders/image_captions"}, "UnstructuredRSTLoader": {"RST": "https://python.langchain.com/docs/integrations/document_loaders/rst"}, "ConversationBufferWindowMemory": {"Figma": "https://python.langchain.com/docs/integrations/document_loaders/figma", "OpaquePrompts": "https://python.langchain.com/docs/integrations/llms/opaqueprompts", "Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/chatbots", "Meta-Prompt": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/meta_prompt", "Create ChatGPT clone": "https://python.langchain.com/docs/modules/agents/how_to/chatgpt_clone"}, "UnstructuredImageLoader": {"Images": "https://python.langchain.com/docs/integrations/document_loaders/image"}, "NucliaLoader": {"Nuclia Understanding API document loader": "https://python.langchain.com/docs/integrations/document_loaders/nuclia"}, "TencentCOSFileLoader": {"Tencent COS File": "https://python.langchain.com/docs/integrations/document_loaders/tencent_cos_file"}, "TomlLoader": {"TOML": "https://python.langchain.com/docs/integrations/document_loaders/toml"}, "UnstructuredAPIFileLoader": {"Unstructured File": "https://python.langchain.com/docs/integrations/document_loaders/unstructured_file"}, "PsychicLoader": {"Psychic": "https://python.langchain.com/docs/integrations/document_loaders/psychic"}, "TencentCOSDirectoryLoader": {"Tencent COS Directory": "https://python.langchain.com/docs/integrations/document_loaders/tencent_cos_directory"}, "GitHubIssuesLoader": {"GitHub": "https://python.langchain.com/docs/integrations/document_loaders/github"}, "UnstructuredOrgModeLoader": {"Org-mode": "https://python.langchain.com/docs/integrations/document_loaders/org_mode"}, "LarkSuiteDocLoader": {"LarkSuite (FeiShu)": "https://python.langchain.com/docs/integrations/document_loaders/larksuite"}, "load_summarize_chain": {"LarkSuite (FeiShu)": "https://python.langchain.com/docs/integrations/document_loaders/larksuite", "LLM Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/summarization"}, "IuguLoader": {"Iugu": "https://python.langchain.com/docs/integrations/document_loaders/iugu"}, "SharePointLoader": {"Microsoft SharePoint": "https://python.langchain.com/docs/integrations/document_loaders/microsoft_sharepoint"}, "UnstructuredEPubLoader": {"EPub ": "https://python.langchain.com/docs/integrations/document_loaders/epub"}, "UnstructuredFileIOLoader": {"Google Drive": "https://python.langchain.com/docs/integrations/document_loaders/google_drive"}, "BrowserlessLoader": {"Browserless": "https://python.langchain.com/docs/integrations/document_loaders/browserless"}, "BibtexLoader": {"BibTeX": "https://python.langchain.com/docs/integrations/document_loaders/bibtex"}, "AirbyteHubspotLoader": {"Airbyte Hubspot": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_hubspot"}, "AirbyteGongLoader": {"Airbyte Gong": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_gong"}, "ReadTheDocsLoader": {"ReadTheDocs Documentation": "https://python.langchain.com/docs/integrations/document_loaders/readthedocs_documentation"}, "PolarsDataFrameLoader": {"Polars DataFrame": "https://python.langchain.com/docs/integrations/document_loaders/polars_dataframe"}, "DataFrameLoader": {"Pandas DataFrame": "https://python.langchain.com/docs/integrations/document_loaders/pandas_dataframe"}, "GoogleApiClient": {"YouTube transcripts": "https://python.langchain.com/docs/integrations/document_loaders/youtube_transcript"}, "ConcurrentLoader": {"Concurrent Loader": "https://python.langchain.com/docs/integrations/document_loaders/concurrent"}, "RSSFeedLoader": {"RSS Feeds": "https://python.langchain.com/docs/integrations/document_loaders/rss"}, "NotebookLoader": {"Jupyter Notebook": "https://python.langchain.com/docs/integrations/document_loaders/jupyter_notebook", "Notebook": "https://python.langchain.com/docs/integrations/document_loaders/example_data/notebook"}, "UnstructuredTSVLoader": {"TSV": "https://python.langchain.com/docs/integrations/document_loaders/tsv"}, "UnstructuredODTLoader": {"Open Document Format (ODT)": "https://python.langchain.com/docs/integrations/document_loaders/odt"}, "EmbaasBlobLoader": {"Embaas": "https://python.langchain.com/docs/integrations/document_loaders/embaas"}, "EmbaasLoader": {"Embaas": "https://python.langchain.com/docs/integrations/document_loaders/embaas"}, "UnstructuredXMLLoader": {"XML": "https://python.langchain.com/docs/integrations/document_loaders/xml"}, "MaxComputeLoader": {"Alibaba Cloud MaxCompute": "https://python.langchain.com/docs/integrations/document_loaders/alibaba_cloud_maxcompute"}, "CubeSemanticLoader": {"Cube Semantic Layer": "https://python.langchain.com/docs/integrations/document_loaders/cube_semantic"}, "UnstructuredExcelLoader": {"Microsoft Excel": "https://python.langchain.com/docs/integrations/document_loaders/excel"}, "AmazonTextractPDFLoader": {"Amazon Textract ": "https://python.langchain.com/docs/integrations/document_loaders/pdf-amazonTextractPDFLoader"}, "Language": {"Source Code": "https://python.langchain.com/docs/integrations/document_loaders/source_code", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/code_understanding"}, "LanguageParser": {"Source Code": "https://python.langchain.com/docs/integrations/document_loaders/source_code", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/code_understanding"}, "SRTLoader": {"Subtitle": "https://python.langchain.com/docs/integrations/document_loaders/subtitle"}, "MastodonTootsLoader": {"Mastodon": "https://python.langchain.com/docs/integrations/document_loaders/mastodon"}, "AirbyteShopifyLoader": {"Airbyte Shopify": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_shopify"}, "MergedDataLoader": {"MergeDocLoader": "https://python.langchain.com/docs/integrations/document_loaders/merge_doc_loader"}, "PySparkDataFrameLoader": {"PySpark DataFrame Loader": "https://python.langchain.com/docs/integrations/document_loaders/pyspark_dataframe"}, "AirbyteZendeskSupportLoader": {"Airbyte Zendesk Support": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_zendesk_support"}, "CoNLLULoader": {"CoNLL-U": "https://python.langchain.com/docs/integrations/document_loaders/conll-u"}, "OBSDirectoryLoader": {"Huawei OBS Directory": "https://python.langchain.com/docs/integrations/document_loaders/huawei_obs_directory"}, "FaunaLoader": {"Fauna": "https://python.langchain.com/docs/integrations/document_loaders/fauna"}, "SitemapLoader": {"Sitemap": "https://python.langchain.com/docs/integrations/document_loaders/sitemap"}, "DocumentIntelligenceLoader": {"Azure Document Intelligence": "https://python.langchain.com/docs/integrations/document_loaders/azure_document_intelligence"}, "StochasticAI": {"StochasticAI": "https://python.langchain.com/docs/integrations/llms/stochasticai"}, "FireworksChat": {"Fireworks": "https://python.langchain.com/docs/integrations/llms/fireworks"}, "OctoAIEndpoint": {"OctoAI": "https://python.langchain.com/docs/integrations/llms/octoai"}, "Writer": {"Writer": "https://python.langchain.com/docs/integrations/llms/writer"}, "TextGen": {"TextGen": "https://python.langchain.com/docs/integrations/llms/textgen"}, "ForefrontAI": {"ForefrontAI": "https://python.langchain.com/docs/integrations/llms/forefrontai"}, "MosaicML": {"MosaicML": "https://python.langchain.com/docs/integrations/llms/mosaicml"}, "KoboldApiLLM": {"KoboldAI API": "https://python.langchain.com/docs/integrations/llms/koboldai"}, "CerebriumAI": {"CerebriumAI": "https://python.langchain.com/docs/integrations/llms/cerebriumai"}, "VertexAI": {"Google Vertex AI PaLM ": "https://python.langchain.com/docs/integrations/llms/google_vertex_ai_palm"}, "VertexAIModelGarden": {"Google Vertex AI PaLM ": "https://python.langchain.com/docs/integrations/llms/google_vertex_ai_palm"}, "Ollama": {"Ollama": "https://python.langchain.com/docs/integrations/llms/ollama", "Run LLMs locally": "https://python.langchain.com/docs/guides/local_llms"}, "OpaquePrompts": {"OpaquePrompts": "https://python.langchain.com/docs/integrations/llms/opaqueprompts"}, "RunnableMap": {"OpaquePrompts": "https://python.langchain.com/docs/integrations/llms/opaqueprompts", "interface.md": "https://python.langchain.com/docs/expression_language/interface", "First we add a step to load memory": "https://python.langchain.com/docs/expression_language/cookbook/retrieval", "sql_db.md": "https://python.langchain.com/docs/expression_language/cookbook/sql_db", "prompt_llm_parser.md": "https://python.langchain.com/docs/expression_language/cookbook/prompt_llm_parser", "Adding memory": "https://python.langchain.com/docs/expression_language/cookbook/memory", "multiple_chains.md": "https://python.langchain.com/docs/expression_language/cookbook/multiple_chains"}, "TitanTakeoff": {"Titan Takeoff": "https://python.langchain.com/docs/integrations/llms/titan_takeoff"}, "Databricks": {"Databricks": "https://python.langchain.com/docs/integrations/llms/databricks"}, "QianfanLLMEndpoint": {"Baidu Qianfan": "https://python.langchain.com/docs/integrations/llms/baidu_qianfan_endpoint"}, "VLLM": {"vLLM": "https://python.langchain.com/docs/integrations/llms/vllm"}, "VLLMOpenAI": {"vLLM": "https://python.langchain.com/docs/integrations/llms/vllm"}, "AzureMLOnlineEndpoint": {"Azure ML": "https://python.langchain.com/docs/integrations/llms/azure_ml"}, "ContentFormatterBase": {"Azure ML": "https://python.langchain.com/docs/integrations/llms/azure_ml"}, "DollyContentFormatter": {"Azure ML": "https://python.langchain.com/docs/integrations/llms/azure_ml"}, "load_llm": {"Azure ML": "https://python.langchain.com/docs/integrations/llms/azure_ml", "Serialization": "https://python.langchain.com/docs/modules/model_io/models/llms/llm_serialization"}, "AzureMLEndpointClient": {"Azure ML": "https://python.langchain.com/docs/integrations/llms/azure_ml"}, "MapReduceChain": {"Manifest": "https://python.langchain.com/docs/integrations/llms/manifest", "LLM Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/summarization"}, "ModelLaboratory": {"Manifest": "https://python.langchain.com/docs/integrations/llms/manifest", "Model comparison": "https://python.langchain.com/docs/guides/model_laboratory"}, "Tongyi": {"Tongyi Qwen": "https://python.langchain.com/docs/integrations/llms/tongyi", "DashVector": "https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/dashvector"}, "InMemoryCache": {"LLM Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching"}, "SQLiteCache": {"LLM Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching"}, "GPTCache": {"LLM Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching"}, "SQLAlchemyCache": {"LLM Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching"}, "GooseAI": {"GooseAI": "https://python.langchain.com/docs/integrations/llms/gooseai"}, "OpenLM": {"OpenLM": "https://python.langchain.com/docs/integrations/llms/openlm"}, "CTranslate2": {"CTranslate2": "https://python.langchain.com/docs/integrations/llms/ctranslate2"}, "HuggingFaceTextGenInference": {"Huggingface TextGen Inference": "https://python.langchain.com/docs/integrations/llms/huggingface_textgen_inference"}, "ChatGLM": {"ChatGLM": "https://python.langchain.com/docs/integrations/llms/chatglm"}, "Replicate": {"Replicate": "https://python.langchain.com/docs/integrations/llms/replicate"}, "DatetimeOutputParser": {"Fallbacks": "https://python.langchain.com/docs/guides/fallbacks", "Datetime parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/datetime"}, "ConditionalPromptSelector": {"Run LLMs locally": "https://python.langchain.com/docs/guides/local_llms"}, "tracing_v2_enabled": {"LangSmith Walkthrough": "https://python.langchain.com/docs/guides/langsmith/walkthrough"}, "wait_for_all_tracers": {"LangSmith Walkthrough": "https://python.langchain.com/docs/guides/langsmith/walkthrough"}, "EvaluatorType": {"LangSmith Walkthrough": "https://python.langchain.com/docs/guides/langsmith/walkthrough", "Criteria Evaluation": "https://python.langchain.com/docs/guides/evaluation/string/criteria_eval_chain"}, "RunEvalConfig": {"LangSmith Walkthrough": "https://python.langchain.com/docs/guides/langsmith/walkthrough"}, "arun_on_dataset": {"LangSmith Walkthrough": "https://python.langchain.com/docs/guides/langsmith/walkthrough"}, "run_on_dataset": {"LangSmith Walkthrough": "https://python.langchain.com/docs/guides/langsmith/walkthrough"}, "load_chain": {"Hugging Face Prompt Injection Identification": "https://python.langchain.com/docs/guides/safety/hugging_face_prompt_injection", "Serialization": "https://python.langchain.com/docs/modules/chains/how_to/serialization", "Loading from LangChainHub": "https://python.langchain.com/docs/modules/chains/how_to/from_hub"}, "FakeListLLM": {"Amazon Comprehend Moderation Chain": "https://python.langchain.com/docs/guides/safety/amazon_comprehend_chain", "Fake LLM": "https://python.langchain.com/docs/modules/model_io/models/llms/fake_llm"}, "load_prompt": {"Amazon Comprehend Moderation Chain": "https://python.langchain.com/docs/guides/safety/amazon_comprehend_chain", "Serialization": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/prompt_serialization"}, "openai": {"OpenAI Adapter": "https://python.langchain.com/docs/guides/adapters/openai"}, "load_evaluator": {"Comparing Chain Outputs": "https://python.langchain.com/docs/guides/evaluation/examples/comparisons", "Agent Trajectory": "https://python.langchain.com/docs/guides/evaluation/trajectory/trajectory_eval", "Pairwise Embedding Distance ": "https://python.langchain.com/docs/guides/evaluation/comparison/pairwise_embedding_distance", "Pairwise String Comparison": "https://python.langchain.com/docs/guides/evaluation/comparison/pairwise_string", "Criteria Evaluation": "https://python.langchain.com/docs/guides/evaluation/string/criteria_eval_chain", "String Distance": "https://python.langchain.com/docs/guides/evaluation/string/string_distance", "Embedding Distance": "https://python.langchain.com/docs/guides/evaluation/string/embedding_distance"}, "load_dataset": {"Comparing Chain Outputs": "https://python.langchain.com/docs/guides/evaluation/examples/comparisons"}, "AgentAction": {"Custom Trajectory Evaluator": "https://python.langchain.com/docs/guides/evaluation/trajectory/custom", "Agents": "https://python.langchain.com/docs/use_cases/more/agents/agents", "Plug-and-Plai": "https://python.langchain.com/docs/use_cases/more/agents/agents/custom_agent_with_plugin_retrieval_using_plugnplai", "Wikibase Agent": "https://python.langchain.com/docs/use_cases/more/agents/agents/wikibase_agent", "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/more/agents/agents/sales_agent_with_context", "Custom Agent with PlugIn Retrieval": "https://python.langchain.com/docs/use_cases/more/agents/agents/custom_agent_with_plugin_retrieval", "Multiple callback handlers": "https://python.langchain.com/docs/modules/callbacks/multiple_callbacks", "Custom multi-action agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_multi_action_agent", "Custom agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent", "Custom agent with tool retrieval": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent_with_tool_retrieval"}, "AgentTrajectoryEvaluator": {"Custom Trajectory Evaluator": "https://python.langchain.com/docs/guides/evaluation/trajectory/custom"}, "EmbeddingDistance": {"Pairwise Embedding Distance ": "https://python.langchain.com/docs/guides/evaluation/comparison/pairwise_embedding_distance", "Embedding Distance": "https://python.langchain.com/docs/guides/evaluation/string/embedding_distance"}, "PairwiseStringEvaluator": {"Custom Pairwise Evaluator": "https://python.langchain.com/docs/guides/evaluation/comparison/custom"}, "Criteria": {"Criteria Evaluation": "https://python.langchain.com/docs/guides/evaluation/string/criteria_eval_chain"}, "StringEvaluator": {"Custom String Evaluator": "https://python.langchain.com/docs/guides/evaluation/string/custom"}, "StringDistance": {"String Distance": "https://python.langchain.com/docs/guides/evaluation/string/string_distance"}, "WebResearchRetriever": {"Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/web_scraping", "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research"}, "ConversationSummaryMemory": {"Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/chatbots", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/code_understanding", "Multiple Memory classes": "https://python.langchain.com/docs/modules/memory/multiple_memory"}, "ConversationSummaryBufferMemory": {"Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/chatbots", "Conversation Summary Buffer": "https://python.langchain.com/docs/modules/memory/types/summary_buffer"}, "MessagesPlaceholder": {"Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/chatbots", "Conversational Retrieval Agent": "https://python.langchain.com/docs/use_cases/question_answering/how_to/conversational_retrieval_agents", "Agents": "https://python.langchain.com/docs/use_cases/more/agents/agents", "Memory in LLMChain": "https://python.langchain.com/docs/modules/memory/adding_memory", "Add Memory to OpenAI Functions Agent": "https://python.langchain.com/docs/modules/agents/how_to/add_memory_openai_functions", "Types of `MessagePromptTemplate`": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/msg_prompt_templates", "Adding memory": "https://python.langchain.com/docs/expression_language/cookbook/memory"}, "StuffDocumentsChain": {"Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/summarization", "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa", "Lost in the middle: The problem with long contexts": "https://python.langchain.com/docs/modules/data_connection/document_transformers/post_retrieval/long_context_reorder"}, "ReduceDocumentsChain": {"Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/summarization"}, "MapReduceDocumentsChain": {"Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/summarization"}, "create_extraction_chain_pydantic": {"Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/extraction"}, "PydanticOutputParser": {"Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/extraction", "MultiQueryRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/MultiQueryRetriever", "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research", "Retry parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/retry", "Pydantic (JSON) parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/pydantic"}, "get_openapi_chain": {"Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/apis"}, "APIChain": {"Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/apis"}, "open_meteo_docs": {"Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/apis"}, "tmdb_docs": {"Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/apis"}, "podcast_docs": {"Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/apis"}, "LLMRequestsChain": {"Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/apis"}, "create_tagging_chain_pydantic": {"Set env var OPENAI_API_KEY or load from a .env file:": "https://python.langchain.com/docs/use_cases/tagging"}, "MultiQueryRetriever": {"Question Answering": "https://python.langchain.com/docs/use_cases/question_answering/question_answering", "MultiQueryRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/MultiQueryRetriever"}, "MarkdownHeaderTextSplitter": {"Perform context-aware text splitting": "https://python.langchain.com/docs/use_cases/question_answering/how_to/document-context-aware-QA", "MarkdownHeaderTextSplitter": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/markdown_header_metadata"}, "create_conversational_retrieval_agent": {"Conversational Retrieval Agent": "https://python.langchain.com/docs/use_cases/question_answering/how_to/conversational_retrieval_agents"}, "AgentTokenBufferMemory": {"Conversational Retrieval Agent": "https://python.langchain.com/docs/use_cases/question_answering/how_to/conversational_retrieval_agents"}, "create_sql_query_chain": {"Multiple Retrieval Sources": "https://python.langchain.com/docs/use_cases/question_answering/how_to/multiple_retrieval", "Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/qa_structured/sql", "SQL": "https://python.langchain.com/docs/use_cases/sql/sql"}, "create_citation_fuzzy_match_chain": {"Cite sources": "https://python.langchain.com/docs/use_cases/question_answering/how_to/qa_citations"}, "BaseRetriever": {"Retrieve as you generate with FLARE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/flare"}, "AsyncCallbackManagerForRetrieverRun": {"Retrieve as you generate with FLARE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/flare"}, "CallbackManagerForRetrieverRun": {"Retrieve as you generate with FLARE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/flare"}, "FlareChain": {"Retrieve as you generate with FLARE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/flare"}, "HypotheticalDocumentEmbedder": {"Improve document indexing with HyDE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/hyde"}, "create_qa_with_sources_chain": {"Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa"}, "create_qa_with_structure_chain": {"Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa"}, "NeptuneGraph": {"Neptune Open Cypher QA Chain": "https://python.langchain.com/docs/use_cases/more/graph/neptune_cypher_qa"}, "NeptuneOpenCypherQAChain": {"Neptune Open Cypher QA Chain": "https://python.langchain.com/docs/use_cases/more/graph/neptune_cypher_qa"}, "NebulaGraphQAChain": {"NebulaGraphQAChain": "https://python.langchain.com/docs/use_cases/more/graph/graph_nebula_qa"}, "NebulaGraph": {"NebulaGraphQAChain": "https://python.langchain.com/docs/use_cases/more/graph/graph_nebula_qa"}, "MemgraphGraph": {"Memgraph QA chain": "https://python.langchain.com/docs/use_cases/more/graph/graph_memgraph_qa"}, "KuzuGraph": {"KuzuQAChain": "https://python.langchain.com/docs/use_cases/more/graph/graph_kuzu_qa"}, "KuzuQAChain": {"KuzuQAChain": "https://python.langchain.com/docs/use_cases/more/graph/graph_kuzu_qa"}, "HugeGraphQAChain": {"HugeGraph QA Chain": "https://python.langchain.com/docs/use_cases/more/graph/graph_hugegraph_qa"}, "HugeGraph": {"HugeGraph QA Chain": "https://python.langchain.com/docs/use_cases/more/graph/graph_hugegraph_qa"}, "GraphSparqlQAChain": {"GraphSparqlQAChain": "https://python.langchain.com/docs/use_cases/more/graph/graph_sparql_qa"}, "RdfGraph": {"GraphSparqlQAChain": "https://python.langchain.com/docs/use_cases/more/graph/graph_sparql_qa"}, "ArangoGraph": {"ArangoDB QA chain": "https://python.langchain.com/docs/use_cases/more/graph/graph_arangodb_qa"}, "ArangoGraphQAChain": {"ArangoDB QA chain": "https://python.langchain.com/docs/use_cases/more/graph/graph_arangodb_qa"}, "GraphIndexCreator": {"Graph QA": "https://python.langchain.com/docs/use_cases/more/graph/graph_qa"}, "GraphQAChain": {"Graph QA": "https://python.langchain.com/docs/use_cases/more/graph/graph_qa"}, "NetworkxEntityGraph": {"Graph QA": "https://python.langchain.com/docs/use_cases/more/graph/graph_qa"}, "FalkorDBGraph": {"FalkorDBQAChain": "https://python.langchain.com/docs/use_cases/more/graph/graph_falkordb_qa"}, "FalkorDBQAChain": {"FalkorDBQAChain": "https://python.langchain.com/docs/use_cases/more/graph/graph_falkordb_qa"}, "AgentFinish": {"Agents": "https://python.langchain.com/docs/use_cases/more/agents/agents", "Plug-and-Plai": "https://python.langchain.com/docs/use_cases/more/agents/agents/custom_agent_with_plugin_retrieval_using_plugnplai", "Wikibase Agent": "https://python.langchain.com/docs/use_cases/more/agents/agents/wikibase_agent", "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/more/agents/agents/sales_agent_with_context", "Custom Agent with PlugIn Retrieval": "https://python.langchain.com/docs/use_cases/more/agents/agents/custom_agent_with_plugin_retrieval", "Custom multi-action agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_multi_action_agent", "Running Agent as an Iterator": "https://python.langchain.com/docs/modules/agents/how_to/agent_iter", "Custom agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent", "Custom agent with tool retrieval": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent_with_tool_retrieval"}, "BaseSingleActionAgent": {"Agents": "https://python.langchain.com/docs/use_cases/more/agents/agents", "Custom agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent"}, "FileChatMessageHistory": {"AutoGPT": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/autogpt"}, "BaseLLM": {"BabyAGI User Guide": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/baby_agi", "BabyAGI with Tools": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/baby_agi_with_agent", "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/more/agents/agents/sales_agent_with_context"}, "VectorStore": {"BabyAGI User Guide": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/baby_agi", "BabyAGI with Tools": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/baby_agi_with_agent"}, "Chain": {"BabyAGI User Guide": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/baby_agi", "BabyAGI with Tools": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/baby_agi_with_agent", "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/more/agents/agents/sales_agent_with_context", "Custom chain": "https://python.langchain.com/docs/modules/chains/how_to/custom_chain"}, "BaseTool": {"!pip install bs4": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/marathon_times", "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools", "Combine agents and vector stores": "https://python.langchain.com/docs/modules/agents/how_to/agent_vectorstore", "Custom functions with OpenAI Functions Agent": "https://python.langchain.com/docs/modules/agents/how_to/custom-functions-with-openai-functions-agent"}, "BaseCombineDocumentsChain": {"!pip install bs4": "https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/marathon_times"}, "LLMSingleActionAgent": {"Plug-and-Plai": "https://python.langchain.com/docs/use_cases/more/agents/agents/custom_agent_with_plugin_retrieval_using_plugnplai", "Wikibase Agent": "https://python.langchain.com/docs/use_cases/more/agents/agents/wikibase_agent", "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/more/agents/agents/sales_agent_with_context", "Custom Agent with PlugIn Retrieval": "https://python.langchain.com/docs/use_cases/more/agents/agents/custom_agent_with_plugin_retrieval", "Custom agent with tool retrieval": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent_with_tool_retrieval"}, "AgentOutputParser": {"Plug-and-Plai": "https://python.langchain.com/docs/use_cases/more/agents/agents/custom_agent_with_plugin_retrieval_using_plugnplai", "Wikibase Agent": "https://python.langchain.com/docs/use_cases/more/agents/agents/wikibase_agent", "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/more/agents/agents/sales_agent_with_context", "Custom Agent with PlugIn Retrieval": "https://python.langchain.com/docs/use_cases/more/agents/agents/custom_agent_with_plugin_retrieval", "Custom agent with tool retrieval": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent_with_tool_retrieval"}, "StringPromptTemplate": {"Plug-and-Plai": "https://python.langchain.com/docs/use_cases/more/agents/agents/custom_agent_with_plugin_retrieval_using_plugnplai", "Wikibase Agent": "https://python.langchain.com/docs/use_cases/more/agents/agents/wikibase_agent", "SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/more/agents/agents/sales_agent_with_context", "Custom Agent with PlugIn Retrieval": "https://python.langchain.com/docs/use_cases/more/agents/agents/custom_agent_with_plugin_retrieval", "Custom agent with tool retrieval": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent_with_tool_retrieval", "Custom prompt template": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/custom_prompt_template", "Connecting to a Feature Store": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/connecting_to_a_feature_store"}, "AIPlugin": {"Plug-and-Plai": "https://python.langchain.com/docs/use_cases/more/agents/agents/custom_agent_with_plugin_retrieval_using_plugnplai", "Custom Agent with PlugIn Retrieval": "https://python.langchain.com/docs/use_cases/more/agents/agents/custom_agent_with_plugin_retrieval"}, "SteamshipImageGenerationTool": {"Multi-modal outputs: Image & Text": "https://python.langchain.com/docs/use_cases/more/agents/multi_modal/multi_modal_output_agent"}, "RegexParser": {"Multi-Agent Simulated Environment: Petting Zoo": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/petting_zoo", "Multi-agent decentralized speaker selection": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/multiagent_bidding", "Multi-agent authoritarian speaker selection": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/multiagent_authoritarian", "Simulated Environment: Gymnasium": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/gymnasium"}, "TimeWeightedVectorStoreRetriever": {"Generative Agents in LangChain": "https://python.langchain.com/docs/use_cases/more/agents/agent_simulations/characters"}, "LLMBashChain": {"Bash chain": "https://python.langchain.com/docs/use_cases/more/code_writing/llm_bash"}, "BashOutputParser": {"Bash chain": "https://python.langchain.com/docs/use_cases/more/code_writing/llm_bash"}, "BashProcess": {"Bash chain": "https://python.langchain.com/docs/use_cases/more/code_writing/llm_bash"}, "LLMSymbolicMathChain": {"LLM Symbolic Math ": "https://python.langchain.com/docs/use_cases/more/code_writing/llm_symbolic_math"}, "LLMSummarizationCheckerChain": {"Summarization checker chain": "https://python.langchain.com/docs/use_cases/more/self_check/llm_summarization_checker"}, "LLMCheckerChain": {"Self-checking chain": "https://python.langchain.com/docs/use_cases/more/self_check/llm_checker"}, "ElasticsearchDatabaseChain": {"Set env var OPENAI_API_KEY or load from a .env file": "https://python.langchain.com/docs/use_cases/qa_structured/sql", "Elasticsearch": "https://python.langchain.com/docs/use_cases/qa_structured/integrations/elasticsearch", "SQL": "https://python.langchain.com/docs/use_cases/sql/sql"}, "SQLRecordManager": {"Indexing": "https://python.langchain.com/docs/modules/data_connection/indexing"}, "index": {"Indexing": "https://python.langchain.com/docs/modules/data_connection/indexing"}, "BaseLoader": {"Indexing": "https://python.langchain.com/docs/modules/data_connection/indexing"}, "InMemoryStore": {"Caching": "https://python.langchain.com/docs/modules/data_connection/text_embedding/caching_embeddings", "MultiVector Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/multi_vector", "Parent Document Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/parent_document_retriever"}, "LocalFileStore": {"Caching": "https://python.langchain.com/docs/modules/data_connection/text_embedding/caching_embeddings"}, "RedisStore": {"Caching": "https://python.langchain.com/docs/modules/data_connection/text_embedding/caching_embeddings"}, "CacheBackedEmbeddings": {"Caching": "https://python.langchain.com/docs/modules/data_connection/text_embedding/caching_embeddings"}, "EnsembleRetriever": {"Ensemble Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/ensemble"}, "MultiVectorRetriever": {"MultiVector Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/multi_vector"}, "JsonKeyOutputFunctionsParser": {"MultiVector Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/multi_vector", "prompt_llm_parser.md": "https://python.langchain.com/docs/expression_language/cookbook/prompt_llm_parser"}, "ParentDocumentRetriever": {"Parent Document Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/parent_document_retriever"}, "SentenceTransformersTokenTextSplitter": {"Split by tokens ": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/split_by_token"}, "NLTKTextSplitter": {"Split by tokens ": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/split_by_token"}, "ChatMessageHistory": {"Message Memory in Agent backed by a database": "https://python.langchain.com/docs/modules/memory/agent_with_memory_in_db"}, "BaseMemory": {"Custom Memory": "https://python.langchain.com/docs/modules/memory/custom_memory"}, "ConversationKGMemory": {"Conversation Knowledge Graph": "https://python.langchain.com/docs/modules/memory/types/kg"}, "ConversationTokenBufferMemory": {"Conversation Token Buffer": "https://python.langchain.com/docs/modules/memory/types/token_buffer"}, "tracing_enabled": {"Multiple callback handlers": "https://python.langchain.com/docs/modules/callbacks/multiple_callbacks"}, "FileCallbackHandler": {"Logging to file": "https://python.langchain.com/docs/modules/callbacks/filecallbackhandler"}, "AsyncCallbackHandler": {"Async callbacks": "https://python.langchain.com/docs/modules/callbacks/async_callbacks"}, "StructuredTool": {"Multi-Input Tools": "https://python.langchain.com/docs/modules/agents/tools/multi_input_tool", "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools"}, "AsyncCallbackManagerForToolRun": {"Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools"}, "CallbackManagerForToolRun": {"Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools"}, "ToolException": {"Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools"}, "format_tool_to_openai_function": {"Tools as OpenAI Functions": "https://python.langchain.com/docs/modules/agents/tools/tools_as_openai_functions"}, "RequestsGetTool": {"Tool Input Schema": "https://python.langchain.com/docs/modules/agents/tools/tool_input_validation"}, "HumanApprovalCallbackHandler": {"Human-in-the-loop Tool Validation": "https://python.langchain.com/docs/modules/agents/tools/human_approval"}, "XMLAgent": {"XML Agent": "https://python.langchain.com/docs/modules/agents/agent_types/xml_agent", "Agents": "https://python.langchain.com/docs/expression_language/cookbook/agent"}, "DocstoreExplorer": {"ReAct document store": "https://python.langchain.com/docs/modules/agents/agent_types/react_docstore"}, "ReadOnlySharedMemory": {"Shared memory across agents and tools": "https://python.langchain.com/docs/modules/agents/how_to/sharedmemory_for_tools"}, "BaseMultiActionAgent": {"Custom multi-action agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_multi_action_agent"}, "FinalStreamingStdOutCallbackHandler": {"Streaming final agent output": "https://python.langchain.com/docs/modules/agents/how_to/streaming_stdout_final_only"}, "LangChainTracer": {"Async API": "https://python.langchain.com/docs/modules/agents/how_to/async_agent"}, "HumanInputChatModel": {"Human input chat model": "https://python.langchain.com/docs/modules/model_io/models/chat/human_input_chat_model"}, "CallbackManagerForLLMRun": {"Custom LLM": "https://python.langchain.com/docs/modules/model_io/models/llms/custom_llm"}, "LLM": {"Custom LLM": "https://python.langchain.com/docs/modules/model_io/models/llms/custom_llm"}, "HumanInputLLM": {"Human input LLM": "https://python.langchain.com/docs/modules/model_io/models/llms/human_input_llm"}, "OutputFixingParser": {"Retry parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/retry"}, "RetryOutputParser": {"Retry parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/retry"}, "RetryWithErrorOutputParser": {"Retry parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/retry"}, "EnumOutputParser": {"Enum parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/enum"}, "MaxMarginalRelevanceExampleSelector": {"Select by maximal marginal relevance (MMR)": "https://python.langchain.com/docs/modules/model_io/prompts/example_selectors/mmr"}, "SemanticSimilarityExampleSelector": {"Select by maximal marginal relevance (MMR)": "https://python.langchain.com/docs/modules/model_io/prompts/example_selectors/mmr", "Few-shot examples for chat models": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot_examples_chat"}, "FewShotPromptTemplate": {"Select by maximal marginal relevance (MMR)": "https://python.langchain.com/docs/modules/model_io/prompts/example_selectors/mmr", "Select by n-gram overlap": "https://python.langchain.com/docs/modules/model_io/prompts/example_selectors/ngram_overlap"}, "BaseExampleSelector": {"Custom example selector": "https://python.langchain.com/docs/modules/model_io/prompts/example_selectors/custom_example_selector"}, "NGramOverlapExampleSelector": {"Select by n-gram overlap": "https://python.langchain.com/docs/modules/model_io/prompts/example_selectors/ngram_overlap"}, "FewShotChatMessagePromptTemplate": {"Few-shot examples for chat models": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot_examples_chat"}, "ChatMessagePromptTemplate": {"Types of `MessagePromptTemplate`": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/msg_prompt_templates"}, "MultiPromptChain": {"Router": "https://python.langchain.com/docs/modules/chains/foundational/router"}, "LLMRouterChain": {"Router": "https://python.langchain.com/docs/modules/chains/foundational/router"}, "RouterOutputParser": {"Router": "https://python.langchain.com/docs/modules/chains/foundational/router"}, "EmbeddingRouterChain": {"Router": "https://python.langchain.com/docs/modules/chains/foundational/router"}, "BaseLanguageModel": {"Custom chain": "https://python.langchain.com/docs/modules/chains/how_to/custom_chain"}, "AsyncCallbackManagerForChainRun": {"Custom chain": "https://python.langchain.com/docs/modules/chains/how_to/custom_chain"}, "CallbackManagerForChainRun": {"Custom chain": "https://python.langchain.com/docs/modules/chains/how_to/custom_chain"}, "BasePromptTemplate": {"Custom chain": "https://python.langchain.com/docs/modules/chains/how_to/custom_chain"}, "create_openai_fn_chain": {"Using OpenAI functions": "https://python.langchain.com/docs/modules/chains/how_to/openai_functions"}, "create_structured_output_chain": {"Using OpenAI functions": "https://python.langchain.com/docs/modules/chains/how_to/openai_functions"}, "RunnablePassthrough": {"First we add a step to load memory": "https://python.langchain.com/docs/expression_language/cookbook/retrieval", "prompt_llm_parser.md": "https://python.langchain.com/docs/expression_language/cookbook/prompt_llm_parser", "multiple_chains.md": "https://python.langchain.com/docs/expression_language/cookbook/multiple_chains"}, "format_document": {"First we add a step to load memory": "https://python.langchain.com/docs/expression_language/cookbook/retrieval"}, "RunnableLambda": {"sql_db.md": "https://python.langchain.com/docs/expression_language/cookbook/sql_db", "Run arbitrary functions": "https://python.langchain.com/docs/expression_language/how_to/functions"}, "JsonOutputFunctionsParser": {"prompt_llm_parser.md": "https://python.langchain.com/docs/expression_language/cookbook/prompt_llm_parser"}, "RunnableConfig": {"Run arbitrary functions": "https://python.langchain.com/docs/expression_language/how_to/functions"}, "GoogleSpeechToTextLoader": {"Google Cloud Speech-to-Text": "https://python.langchain.com/docs/integrations/document_loaders/google_speech_to_text"},  "GoogleTranslateTransformer": {"Google Cloud Translation": "https://python.langchain.com/docs/integrations/document_loaders/google_translate"}}
