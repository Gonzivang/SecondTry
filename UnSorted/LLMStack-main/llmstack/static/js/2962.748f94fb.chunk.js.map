{"version":3,"file":"static/js/2962.748f94fb.chunk.js","mappings":"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","sources":["components/DeleteConfirmationModal.jsx","components/Utils.jsx","components/datasource/ShareDataSourceModal.jsx","pages/data.jsx"],"sourcesContent":["import React from \"react\";\nimport {\n  Dialog,\n  Button,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n} from \"@mui/material\";\n\nexport default function DeleteConfirmationModal(props) {\n  const { id, open, onOk, onCancel, title, text } = props;\n  return (\n    <Dialog\n      title={title ? title : \"Logged Out\"}\n      open={open}\n      onCancel={onCancel}\n    >\n      <DialogTitle id=\"delete-modal-title\">Confirm Delete</DialogTitle>\n      <DialogContent>\n        <DialogContentText>{text}</DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button key=\"cancel\" onClick={() => onCancel(id)}>\n          Cancel\n        </Button>\n        ,\n        <Button key=\"submit\" type=\"primary\" onClick={() => onOk(id)}>\n          Confirm\n        </Button>\n        ,\n      </DialogActions>\n    </Dialog>\n  );\n}\n","export function LocaleDate(props) {\n  const date = new Date(props.value);\n  return <span>{date.toLocaleString()}</span>;\n}\n\n// Render file size in human readable format\nexport function FileSize(props) {\n  let size = props.value;\n  const units = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"];\n  let unit = 0;\n  while (size >= 1024) {\n    size /= 1024;\n    unit += 1;\n  }\n  return (\n    <span>\n      {size > 0\n        ? size.toFixed(2) + \" \" + units[unit]\n        : size + \" \" + units[unit]}\n    </span>\n  );\n}\n","import React from \"react\";\n\nimport {\n  Dialog,\n  Button as MuiButton,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Stack,\n  Select as MuiSelect,\n  MenuItem,\n} from \"@mui/material\";\nimport { axios } from \"../../data/axios\";\n\nexport default function ShareDataSourceModal(props) {\n  const { id, open, onOk, onCancel, title, dataSource } = props;\n  const [visibility, setVisibility] = React.useState(dataSource?.visibility);\n\n  const onOkClick = () => {\n    let action = \"noop\";\n    if (visibility !== dataSource.visibility) {\n      if (dataSource.visibility === 0 && visibility === 1) {\n        // If the visibility is changing from 1 to 0, then we need to make the entry private\n        axios()\n          .post(`api/org/datasources/${dataSource.uuid}/add_entry`)\n          .then((res) => {\n            onOk(action, dataSource);\n          });\n      } else if (dataSource.visibility === 1 && visibility === 0) {\n        // If the visibility is changing from 1 to 0, then we need to make the entry org public\n        axios()\n          .delete(`api/org/datasources/${dataSource.uuid}`)\n          .then((res) => {\n            onOk(action, dataSource);\n          });\n      } else {\n        onOk(action, dataSource);\n      }\n    } else {\n      onOk(action, dataSource);\n    }\n  };\n\n  const visibilityOptions = [\n    {\n      value: 1,\n      label: \"Organization\",\n      description: \"Members of your organization can access this datasource\",\n    },\n    {\n      value: 0,\n      label: \"You\",\n      description: \"Only you can access this datasource\",\n    },\n  ];\n  return (\n    <Dialog\n      open={open}\n      onClose={() => onCancel(id)}\n      aria-labelledby=\"share-datasource-dialog-title\"\n      aria-describedby=\"share-datasource-dialog-description\"\n    >\n      <DialogTitle id=\"share-datasource-dialog-title\">{title}</DialogTitle>\n      <DialogContent style={{ minWidth: \"500px\" }}>\n        <Stack spacing={2}>\n          <h4>Choose who can access this datasource</h4>\n          <MuiSelect\n            labelId=\"share-datasource-select-label\"\n            size=\"small\"\n            defaultValue={\n              dataSource?.visibility === undefined ? 1 : dataSource?.visibility\n            }\n            onChange={(e) => {\n              setVisibility(e.target.value);\n            }}\n          >\n            {visibilityOptions.map((option) => {\n              return (\n                <MenuItem key={option.value} value={option.value}>\n                  <Stack direction=\"row\" spacing={1}>\n                    <span>{option.label}</span>\n                    <small>{option.description}</small>\n                  </Stack>\n                </MenuItem>\n              );\n            })}\n          </MuiSelect>\n        </Stack>\n      </DialogContent>\n      <DialogActions>\n        <MuiButton onClick={() => onCancel(id)}>Cancel</MuiButton>\n        <MuiButton variant=\"contained\" onClick={() => onOkClick(id)}>\n          Done\n        </MuiButton>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import { Table } from \"antd\";\nimport {\n  Button,\n  IconButton,\n  Box,\n  CircularProgress,\n  Drawer,\n  Divider,\n  Chip,\n  Grid,\n  Stack,\n  Tooltip,\n} from \"@mui/material\";\n\nimport { TextareaAutosize } from \"@mui/base\";\n\nimport DeleteOutlineOutlinedIcon from \"@mui/icons-material/DeleteOutlineOutlined\";\nimport AddOutlinedIcon from \"@mui/icons-material/AddOutlined\";\nimport SyncOutlinedIcon from \"@mui/icons-material/SyncOutlined\";\nimport SettingsEthernetIcon from \"@mui/icons-material/SettingsEthernet\";\nimport PeopleOutlineOutlinedIcon from \"@mui/icons-material/PeopleOutlineOutlined\";\nimport PersonOutlineOutlinedIcon from \"@mui/icons-material/PersonOutlineOutlined\";\n\nimport { Alert, AlertTitle, Link } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport {\n  dataSourceEntriesState,\n  orgDataSourceEntriesState,\n  dataSourceEntriesTableDataState,\n  profileFlagsState,\n  profileState,\n} from \"../data/atoms\";\nimport { AddDataSourceModal } from \"../components/datasource/AddDataSourceModal\";\nimport DeleteConfirmationModal from \"../components/DeleteConfirmationModal\";\nimport ShareDataSourceModal from \"../components/datasource/ShareDataSourceModal\";\nimport { axios } from \"../data/axios\";\nimport { LocaleDate, FileSize } from \"../components/Utils\";\nimport { useReloadDataSourceEntries, useReloadDataSources } from \"../data/init\";\n\nfunction DataSourceEntryContent({ onCancel, dataSourceEntryData, open }) {\n  const [data, setData] = useState(null);\n  const [metadata, setMetadata] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (dataSourceEntryData?.config?.document_ids) {\n      setLoading(true);\n      axios()\n        .get(`/api/datasource_entries/${dataSourceEntryData.uuid}/text_content`)\n        .then((response) => {\n          setData(\n            <TextareaAutosize\n              value={response.data?.content}\n              disabled={true}\n              autoSize\n              style={{\n                maxHeight: \"80vh\",\n                width: \"100%\",\n                overflow: \"auto\",\n              }}\n            />,\n          );\n          setMetadata(response.data?.metadata);\n        })\n        .finally(() => setLoading(false));\n    } else {\n      setData(\n        <TextareaAutosize\n          value={JSON.stringify(dataSourceEntryData?.config?.errors)}\n          disabled={true}\n          autoSize\n          style={{ maxHeight: \"80vh\", width: \"100%\", overflow: \"auto\" }}\n        ></TextareaAutosize>,\n      );\n    }\n  }, [\n    dataSourceEntryData?.config?.document_ids,\n    dataSourceEntryData?.config?.errors,\n    dataSourceEntryData.uuid,\n  ]);\n  return (\n    <Drawer\n      open={open}\n      onClose={onCancel}\n      anchor=\"right\"\n      sx={{ \"& .MuiDrawer-paper\": { minWidth: \"40%\" } }}\n    >\n      <Box>\n        <Stack direction={\"row\"} gap={1} sx={{ mb: \"10px\", mt: \"10px\" }}>\n          <Button onClick={() => onCancel()} sx={{ alignSelf: \"left\" }}>\n            X\n          </Button>\n          {Object.keys(metadata || {}).map((key) => (\n            <Chip\n              label={`${key}: ${metadata[key]}`}\n              size=\"small\"\n              key={key}\n              sx={{ borderRadius: \"10px\", marginTop: \"5px\" }}\n            />\n          ))}\n        </Stack>\n        <Divider />\n        {loading ? (\n          <CircularProgress />\n        ) : (\n          <div style={{ margin: \"0px 10px\" }}>{data}</div>\n        )}\n      </Box>\n    </Drawer>\n  );\n}\nexport default function DataPage() {\n  const [deleteModalTitle, setDeleteModalTitle] = useState(\"\");\n  const [deleteModalMessage, setDeleteModalMessage] = useState(\"\");\n  const [deleteId, setDeleteId] = useState(null);\n  const [addDataSourceModalOpen, setAddDataSourceModalOpen] = useState(false);\n  const [deleteConfirmationModalOpen, setDeleteConfirmationModalOpen] =\n    useState(false);\n  const [shareDataSourceModalOpen, setShareDataSourceModalOpen] =\n    useState(false);\n\n  const [dataSourceEntryData, setDataSourceEntryData] = useState(null);\n  const [dataSourceEntryDrawerOpen, setDataSourceEntryDrawerOpen] =\n    useState(false);\n  const dataSourceEntriesTable = useRecoilValue(\n    dataSourceEntriesTableDataState,\n  );\n  const [dataSourceEntries, setDataSourceEntries] = useRecoilState(\n    dataSourceEntriesState,\n  );\n  const [orgDataSourceEntries, setOrgDataSourceEntries] = useRecoilState(\n    orgDataSourceEntriesState,\n  );\n  const [dataSourceEntriesLoading, setDataSourceEntriesLoading] =\n    useState(null);\n  const profile = useRecoilValue(profileState);\n  const [table_data, setTableData] = useState([]);\n  const [modalTitle, setModalTitle] = useState(\"Add New Data Source\");\n  const [selectedDataSource, setSelectedDataSource] = useState(null);\n  const reloadDataSourceEntries = useReloadDataSourceEntries();\n  const reloadDataSources = useReloadDataSources();\n  const profileFlags = useRecoilValue(profileFlagsState);\n\n  useEffect(() => {\n    if (dataSourceEntriesTable.length > 0) {\n      setTableData(dataSourceEntriesTable);\n    }\n  }, [dataSourceEntriesTable]);\n\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\",\n    },\n    {\n      title: \"Owner\",\n      key: \"owner\",\n      render: (record) => {\n        return <span>{record.isUserOwned ? \"me\" : record.owner_email}</span>;\n      },\n    },\n    {\n      title: \"Data Source Type\",\n      dataIndex: [\"type\", \"name\"],\n      key: \"type\",\n    },\n\n    {\n      title: \"Size\",\n      dataIndex: \"size\",\n      key: \"size\",\n      render: (record) => {\n        return <FileSize value={record} />;\n      },\n    },\n    {\n      title: \"Created At\",\n      dataIndex: \"created_at\",\n      key: \"created_at\",\n      render: (record) => {\n        return <LocaleDate value={record} />;\n      },\n    },\n    {\n      title: \"Last Modified\",\n      dataIndex: \"updated_at\",\n      key: \"updated_at\",\n      render: (record) => {\n        return <LocaleDate value={record} />;\n      },\n    },\n    {\n      title: \"Action\",\n      key: \"operation\",\n      render: (record) => {\n        return (\n          <Box>\n            {!record?.type?.is_external_datasource && (\n              <IconButton\n                disabled={!record.isUserOwned}\n                onClick={() => {\n                  setModalTitle(\"Add New Data Entry\");\n                  setSelectedDataSource(record);\n                  setAddDataSourceModalOpen(true);\n                }}\n              >\n                <AddOutlinedIcon />\n              </IconButton>\n            )}\n            {record?.type?.is_external_datasource && (\n              <Tooltip title=\"External Connection\">\n                <span>\n                  <IconButton disabled={true}>\n                    <SettingsEthernetIcon />\n                  </IconButton>\n                </span>\n              </Tooltip>\n            )}\n            <IconButton\n              disabled={!record.isUserOwned}\n              onClick={() => {\n                setDeleteId(record);\n                setDeleteModalTitle(\"Delete Data Source\");\n                setDeleteModalMessage(\n                  <div>\n                    Are you sure you want to delete{\" \"}\n                    <span style={{ fontWeight: \"bold\" }}>{record.name}</span> ?\n                  </div>,\n                );\n                setDeleteConfirmationModalOpen(true);\n              }}\n            >\n              <DeleteOutlineOutlinedIcon />\n            </IconButton>\n            {profileFlags.IS_ORGANIZATION_MEMBER && record.isUserOwned && (\n              <IconButton\n                onClick={() => {\n                  setModalTitle(\"Share Datasource\");\n                  setSelectedDataSource(record);\n                  setShareDataSourceModalOpen(true);\n                }}\n              >\n                {record.visibility === 0 ? (\n                  <PersonOutlineOutlinedIcon />\n                ) : (\n                  <PeopleOutlineOutlinedIcon />\n                )}\n              </IconButton>\n            )}\n          </Box>\n        );\n      },\n    },\n  ];\n\n  const expandedRowRender = (data) => {\n    const data_source_entries = data.data_source_entries;\n\n    if (dataSourceEntriesLoading === data.uuid) {\n      return (\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <CircularProgress />\n        </div>\n      );\n    }\n\n    const columns = [\n      {\n        title: \"Name\",\n        dataIndex: \"name\",\n        key: \"name\",\n      },\n      {\n        title: \"Size\",\n        key: \"size\",\n        dataIndex: \"size\",\n        render: (record) => {\n          return <FileSize value={record} />;\n        },\n      },\n      {\n        title: \"Status\",\n        key: \"status\",\n        render: (record) => {\n          let color = \"success\";\n          if (record.status === \"FAILED\") {\n            color = \"error\";\n          } else if (record.status === \"READY\") {\n            color = \"success\";\n          } else {\n            color = \"info\";\n          }\n          return (\n            <Chip\n              color={color}\n              key={record.uuid}\n              style={{ cursor: \"pointer\" }}\n              onClick={() => {\n                setDataSourceEntryData(record);\n                setDataSourceEntryDrawerOpen(true);\n              }}\n              label={\n                record.status.charAt(0) + record.status.slice(1).toLowerCase()\n              }\n              size=\"small\"\n            ></Chip>\n          );\n        },\n      },\n      {\n        title: \"Created At\",\n        dataIndex: \"created_at\",\n        key: \"created_at\",\n        render: (record) => {\n          return <LocaleDate value={record} />;\n        },\n      },\n      {\n        title: \"Last Modified\",\n        dataIndex: \"updated_at\",\n        key: \"updated_at\",\n        render: (record) => {\n          return <LocaleDate value={record} />;\n        },\n      },\n      {\n        title: \"Action\",\n        key: \"operation\",\n        render: (record) => {\n          const isAdhocSyncSupported = record?.sync_config;\n\n          return (\n            <Box>\n              <IconButton\n                disabled={!record.isUserOwned}\n                onClick={() => {\n                  setDeleteId(record);\n                  setDeleteModalTitle(\"Delete Data Source Entry\");\n                  setDeleteModalMessage(\n                    <div>\n                      Are you sure you want to delete{\" \"}\n                      <span style={{ fontWeight: \"bold\" }}>{record.name}</span>{\" \"}\n                      ?\n                    </div>,\n                  );\n                  setDeleteConfirmationModalOpen(true);\n                }}\n              >\n                <DeleteOutlineOutlinedIcon className=\"delete-dataentry-icon\" />\n              </IconButton>\n              {isAdhocSyncSupported && (\n                <IconButton\n                  onClick={() => {\n                    axios()\n                      .post(`/api/datasource_entries/${record.uuid}/resync`)\n                      .then((response) => {\n                        reloadDataSourceEntries();\n                        reloadDataSourceEntries();\n                      });\n                  }}\n                >\n                  <SyncOutlinedIcon className=\"resync-dataentry-icon\" />\n                </IconButton>\n              )}\n            </Box>\n          );\n        },\n      },\n    ];\n\n    return (\n      <Table\n        columns={columns}\n        dataSource={data_source_entries}\n        rowKey={(record) => record.uuid}\n        pagination={false}\n        style={{ cursor: \"pointer\" }}\n        onRow={(record, rowIndex) => {\n          return {\n            onClick: (event) => {\n              if (event.target.tagName === \"TD\") {\n                setDataSourceEntryData(record);\n                setDataSourceEntryDrawerOpen(true);\n              }\n            },\n          };\n        }}\n      />\n    );\n  };\n\n  const onDataSourceExpand = (expanded, record) => {\n    if (expanded) {\n      let url = `/api/datasources/${record.uuid}/entries`;\n      if (!record.isUserOwned) {\n        url = `/api/org/datasources/${record.uuid}/entries`;\n      }\n      setDataSourceEntriesLoading(record.uuid);\n\n      axios()\n        .get(url)\n        .then((response) => {\n          if (record.isUserOwned) {\n            setDataSourceEntries([\n              ...dataSourceEntries.filter(\n                (dataSourceEntry) =>\n                  dataSourceEntry.datasource.uuid !== record.uuid,\n              ),\n              ...response.data,\n            ]);\n          } else {\n            setOrgDataSourceEntries([\n              ...orgDataSourceEntries.filter(\n                (dataSourceEntry) =>\n                  dataSourceEntry.datasource.uuid !== record.uuid,\n              ),\n              ...response.data,\n            ]);\n          }\n        })\n        .finally(() => {\n          setDataSourceEntriesLoading(null);\n        });\n    }\n  };\n\n  return (\n    <div id=\"data-page\">\n      {false &&\n        profile &&\n        !profile.openai_key &&\n        !profileFlags?.IS_ORGANIZATION_MEMBER && (\n          <Alert\n            severity=\"error\"\n            style={{ width: \"100%\", margin: \"10px 0\", textAlign: \"left\" }}\n          >\n            <AlertTitle>Missing API Keys</AlertTitle>\n            <p>\n              You are missing API keys for <strong>Open AI</strong>. Please add\n              them in your <Link href=\"/settings\">profile</Link> before you a\n              add datasource. If you don't have an API key, you can get one by\n              visiting your{\" \"}\n              <Link\n                href=\"https://platform.openai.com/account/api-keys\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Open AI account\n              </Link>\n              .\n            </p>\n          </Alert>\n        )}\n      <Grid span={24} style={{ padding: \"10px\" }}>\n        <Grid item style={{ width: \"100%\", padding: \"15px 0px\" }}>\n          <Button\n            onClick={() => {\n              setAddDataSourceModalOpen(true);\n            }}\n            type=\"primary\"\n            variant=\"contained\"\n            sx={{ float: \"left\", marginBottom: \"10px\", textTransform: \"none\" }}\n          >\n            Add Data Source\n          </Button>\n        </Grid>\n        <Grid item style={{ width: \"100%\" }}>\n          <Table\n            dataSource={table_data}\n            columns={columns}\n            pagination={{ pageSize: 10 }}\n            expandable={{ expandedRowRender, onExpand: onDataSourceExpand }}\n            rowKey={(record) => record.uuid}\n            style={{ width: \"100%\" }}\n          ></Table>\n        </Grid>\n      </Grid>\n      {addDataSourceModalOpen && (\n        <AddDataSourceModal\n          open={addDataSourceModalOpen}\n          handleCancelCb={() => {\n            setSelectedDataSource(null);\n            setAddDataSourceModalOpen(false);\n          }}\n          dataSourceAddedCb={() => {\n            setSelectedDataSource(null);\n            reloadDataSourceEntries();\n            reloadDataSources();\n            setAddDataSourceModalOpen(false);\n          }}\n          modalTitle={modalTitle}\n          datasource={selectedDataSource}\n        />\n      )}\n      {deleteConfirmationModalOpen && (\n        <DeleteConfirmationModal\n          id={deleteId}\n          title={deleteModalTitle}\n          text={deleteModalMessage}\n          open={deleteConfirmationModalOpen}\n          onOk={(param) => {\n            if (param?.data_source_entries !== undefined) {\n              axios()\n                .delete(`api/datasources/${param.uuid}`)\n                .then((res) => {\n                  reloadDataSources();\n                  setDeleteConfirmationModalOpen(false);\n                });\n            } else {\n              axios()\n                .delete(`api/datasource_entries/${param.uuid}`)\n                .then((res) => {\n                  reloadDataSourceEntries();\n                  setDeleteConfirmationModalOpen(false);\n                });\n            }\n          }}\n          onCancel={() => {\n            setDeleteConfirmationModalOpen(false);\n          }}\n        />\n      )}\n      {dataSourceEntryDrawerOpen && (\n        <DataSourceEntryContent\n          onCancel={() => setDataSourceEntryDrawerOpen(false)}\n          dataSourceEntryData={dataSourceEntryData}\n          open={dataSourceEntryDrawerOpen}\n        />\n      )}\n      {shareDataSourceModalOpen && (\n        <ShareDataSourceModal\n          title={modalTitle}\n          onCancel={() => setShareDataSourceModalOpen(false)}\n          onOk={() => {\n            setShareDataSourceModalOpen(false);\n          }}\n          open={shareDataSourceModalOpen}\n          dataSource={selectedDataSource}\n        />\n      )}\n    </div>\n  );\n}\n"],"names":["DeleteConfirmationModal","props","id","open","onOk","onCancel","title","text","onClick","type","LocaleDate","date","Date","value","toLocaleString","FileSize","size","units","unit","toFixed","ShareDataSourceModal","dataSource","React","visibility","setVisibility","Dialog","onClose","DialogTitle","DialogContent","style","minWidth","Stack","spacing","labelId","defaultValue","undefined","onChange","e","target","label","description","map","option","MenuItem","direction","DialogActions","variant","action","axios","post","uuid","then","res","delete","onOkClick","DataSourceEntryContent","dataSourceEntryData","useState","data","setData","metadata","setMetadata","loading","setLoading","useEffect","config","document_ids","get","response","TextareaAutosize","content","disabled","autoSize","maxHeight","width","overflow","finally","JSON","stringify","errors","Drawer","anchor","sx","Box","gap","mb","mt","Button","alignSelf","Object","keys","key","Chip","borderRadius","marginTop","Divider","CircularProgress","margin","DataPage","deleteModalTitle","setDeleteModalTitle","deleteModalMessage","setDeleteModalMessage","deleteId","setDeleteId","addDataSourceModalOpen","setAddDataSourceModalOpen","deleteConfirmationModalOpen","setDeleteConfirmationModalOpen","shareDataSourceModalOpen","setShareDataSourceModalOpen","setDataSourceEntryData","dataSourceEntryDrawerOpen","setDataSourceEntryDrawerOpen","dataSourceEntriesTable","useRecoilValue","dataSourceEntriesTableDataState","useRecoilState","dataSourceEntriesState","dataSourceEntries","setDataSourceEntries","orgDataSourceEntriesState","orgDataSourceEntries","setOrgDataSourceEntries","dataSourceEntriesLoading","setDataSourceEntriesLoading","profileState","table_data","setTableData","modalTitle","setModalTitle","selectedDataSource","setSelectedDataSource","reloadDataSourceEntries","useReloadDataSourceEntries","reloadDataSources","useReloadDataSources","profileFlags","profileFlagsState","length","columns","dataIndex","render","record","isUserOwned","owner_email","is_external_datasource","IconButton","AddOutlined","Tooltip","SettingsEthernet","fontWeight","name","DeleteOutlineOutlined","IS_ORGANIZATION_MEMBER","PersonOutlineOutlined","PeopleOutlineOutlined","Grid","span","padding","item","float","marginBottom","textTransform","pagination","pageSize","expandable","expandedRowRender","data_source_entries","display","justifyContent","color","status","cursor","charAt","slice","toLowerCase","isAdhocSyncSupported","sync_config","className","SyncOutlined","rowKey","onRow","rowIndex","event","tagName","onExpand","expanded","url","filter","dataSourceEntry","datasource","AddDataSourceModal","handleCancelCb","dataSourceAddedCb","param"],"sourceRoot":""}